
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002754  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002754  000027c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001cf8  00000000  00000000  000027d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a17  00000000  00000000  000044c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000501f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000518f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000962b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__vector_1>
       8:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__vector_2>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 58 12 	call	0x24b0	; 0x24b0 <main>
      7a:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Buzzer_Init>:
#include "Buzzer.h"
#include "DIO.h"
#include "avr/delay.h"

void Buzzer_Init()
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDir(PortD,Pin7,Output); /* Set pin 7D as an output pin (buzzer)*/
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	0e 94 02 0b 	call	0x1604	; 0x1604 <DIO_voidSetDir>
	DIO_voidWriteVal(PortD,Pin7,Zero_Volt); /* Set pin 7D to 0V */
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	67 e0       	ldi	r22, 0x07	; 7
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
}
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <Buzzer>:
void Buzzer(u8 u8State)
{
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	0f 92       	push	r0
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidWriteVal(PortD,Pin7,u8State);
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	67 e0       	ldi	r22, 0x07	; 7
     b68:	49 81       	ldd	r20, Y+1	; 0x01
     b6a:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
}
     b6e:	0f 90       	pop	r0
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <Buzzer_Mode>:

void Buzzer_Mode(u8 u8Freq1, u8 u8Freq2)
{
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	c8 55       	subi	r28, 0x58	; 88
     b84:	d0 40       	sbci	r29, 0x00	; 0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	fe 01       	movw	r30, r28
     b92:	e9 5a       	subi	r30, 0xA9	; 169
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	80 83       	st	Z, r24
     b98:	fe 01       	movw	r30, r28
     b9a:	e8 5a       	subi	r30, 0xA8	; 168
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	60 83       	st	Z, r22
		int count;
		for(count=0; count<u8Freq1; count++)
     ba0:	fe 01       	movw	r30, r28
     ba2:	eb 5a       	subi	r30, 0xAB	; 171
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	11 82       	std	Z+1, r1	; 0x01
     ba8:	10 82       	st	Z, r1
     baa:	4a c1       	rjmp	.+660    	; 0xe40 <Buzzer_Mode+0x2ca>
		{
			Buzzer(ON);
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	0e 94 ac 05 	call	0xb58	; 0xb58 <Buzzer>
     bb2:	fe 01       	movw	r30, r28
     bb4:	ef 5a       	subi	r30, 0xAF	; 175
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e8       	ldi	r26, 0x80	; 128
     bbe:	bf e3       	ldi	r27, 0x3F	; 63
     bc0:	80 83       	st	Z, r24
     bc2:	91 83       	std	Z+1, r25	; 0x01
     bc4:	a2 83       	std	Z+2, r26	; 0x02
     bc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc8:	8e 01       	movw	r16, r28
     bca:	03 5b       	subi	r16, 0xB3	; 179
     bcc:	1f 4f       	sbci	r17, 0xFF	; 255
     bce:	fe 01       	movw	r30, r28
     bd0:	ef 5a       	subi	r30, 0xAF	; 175
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	60 81       	ld	r22, Z
     bd6:	71 81       	ldd	r23, Z+1	; 0x01
     bd8:	82 81       	ldd	r24, Z+2	; 0x02
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	4a e7       	ldi	r20, 0x7A	; 122
     be2:	53 e4       	ldi	r21, 0x43	; 67
     be4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	f8 01       	movw	r30, r16
     bee:	80 83       	st	Z, r24
     bf0:	91 83       	std	Z+1, r25	; 0x01
     bf2:	a2 83       	std	Z+2, r26	; 0x02
     bf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bf6:	fe 01       	movw	r30, r28
     bf8:	e3 5b       	subi	r30, 0xB3	; 179
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	60 81       	ld	r22, Z
     bfe:	71 81       	ldd	r23, Z+1	; 0x01
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	93 81       	ldd	r25, Z+3	; 0x03
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e8       	ldi	r20, 0x80	; 128
     c0a:	5f e3       	ldi	r21, 0x3F	; 63
     c0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c10:	88 23       	and	r24, r24
     c12:	44 f4       	brge	.+16     	; 0xc24 <Buzzer_Mode+0xae>
		__ticks = 1;
     c14:	fe 01       	movw	r30, r28
     c16:	e5 5b       	subi	r30, 0xB5	; 181
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	91 83       	std	Z+1, r25	; 0x01
     c20:	80 83       	st	Z, r24
     c22:	64 c0       	rjmp	.+200    	; 0xcec <Buzzer_Mode+0x176>
	else if (__tmp > 65535)
     c24:	fe 01       	movw	r30, r28
     c26:	e3 5b       	subi	r30, 0xB3	; 179
     c28:	ff 4f       	sbci	r31, 0xFF	; 255
     c2a:	60 81       	ld	r22, Z
     c2c:	71 81       	ldd	r23, Z+1	; 0x01
     c2e:	82 81       	ldd	r24, Z+2	; 0x02
     c30:	93 81       	ldd	r25, Z+3	; 0x03
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	3f ef       	ldi	r19, 0xFF	; 255
     c36:	4f e7       	ldi	r20, 0x7F	; 127
     c38:	57 e4       	ldi	r21, 0x47	; 71
     c3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c3e:	18 16       	cp	r1, r24
     c40:	0c f0       	brlt	.+2      	; 0xc44 <Buzzer_Mode+0xce>
     c42:	43 c0       	rjmp	.+134    	; 0xcca <Buzzer_Mode+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c44:	fe 01       	movw	r30, r28
     c46:	ef 5a       	subi	r30, 0xAF	; 175
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	60 81       	ld	r22, Z
     c4c:	71 81       	ldd	r23, Z+1	; 0x01
     c4e:	82 81       	ldd	r24, Z+2	; 0x02
     c50:	93 81       	ldd	r25, Z+3	; 0x03
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	40 e2       	ldi	r20, 0x20	; 32
     c58:	51 e4       	ldi	r21, 0x41	; 65
     c5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	8e 01       	movw	r16, r28
     c64:	05 5b       	subi	r16, 0xB5	; 181
     c66:	1f 4f       	sbci	r17, 0xFF	; 255
     c68:	bc 01       	movw	r22, r24
     c6a:	cd 01       	movw	r24, r26
     c6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c70:	dc 01       	movw	r26, r24
     c72:	cb 01       	movw	r24, r22
     c74:	f8 01       	movw	r30, r16
     c76:	91 83       	std	Z+1, r25	; 0x01
     c78:	80 83       	st	Z, r24
     c7a:	1f c0       	rjmp	.+62     	; 0xcba <Buzzer_Mode+0x144>
     c7c:	fe 01       	movw	r30, r28
     c7e:	e7 5b       	subi	r30, 0xB7	; 183
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	89 e1       	ldi	r24, 0x19	; 25
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	91 83       	std	Z+1, r25	; 0x01
     c88:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c8a:	fe 01       	movw	r30, r28
     c8c:	e7 5b       	subi	r30, 0xB7	; 183
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <Buzzer_Mode+0x11e>
     c98:	fe 01       	movw	r30, r28
     c9a:	e7 5b       	subi	r30, 0xB7	; 183
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca2:	de 01       	movw	r26, r28
     ca4:	a5 5b       	subi	r26, 0xB5	; 181
     ca6:	bf 4f       	sbci	r27, 0xFF	; 255
     ca8:	fe 01       	movw	r30, r28
     caa:	e5 5b       	subi	r30, 0xB5	; 181
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	80 81       	ld	r24, Z
     cb0:	91 81       	ldd	r25, Z+1	; 0x01
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cba:	fe 01       	movw	r30, r28
     cbc:	e5 5b       	subi	r30, 0xB5	; 181
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	d1 f6       	brne	.-76     	; 0xc7c <Buzzer_Mode+0x106>
     cc8:	27 c0       	rjmp	.+78     	; 0xd18 <Buzzer_Mode+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cca:	8e 01       	movw	r16, r28
     ccc:	05 5b       	subi	r16, 0xB5	; 181
     cce:	1f 4f       	sbci	r17, 0xFF	; 255
     cd0:	fe 01       	movw	r30, r28
     cd2:	e3 5b       	subi	r30, 0xB3	; 179
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	60 81       	ld	r22, Z
     cd8:	71 81       	ldd	r23, Z+1	; 0x01
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	f8 01       	movw	r30, r16
     ce8:	91 83       	std	Z+1, r25	; 0x01
     cea:	80 83       	st	Z, r24
     cec:	de 01       	movw	r26, r28
     cee:	a9 5b       	subi	r26, 0xB9	; 185
     cf0:	bf 4f       	sbci	r27, 0xFF	; 255
     cf2:	fe 01       	movw	r30, r28
     cf4:	e5 5b       	subi	r30, 0xB5	; 181
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	80 81       	ld	r24, Z
     cfa:	91 81       	ldd	r25, Z+1	; 0x01
     cfc:	8d 93       	st	X+, r24
     cfe:	9c 93       	st	X, r25
     d00:	fe 01       	movw	r30, r28
     d02:	e9 5b       	subi	r30, 0xB9	; 185
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <Buzzer_Mode+0x194>
     d0e:	fe 01       	movw	r30, r28
     d10:	e9 5b       	subi	r30, 0xB9	; 185
     d12:	ff 4f       	sbci	r31, 0xFF	; 255
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
			_delay_ms(1);
			Buzzer(OFF);
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	0e 94 ac 05 	call	0xb58	; 0xb58 <Buzzer>
     d1e:	fe 01       	movw	r30, r28
     d20:	ed 5b       	subi	r30, 0xBD	; 189
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	a0 e2       	ldi	r26, 0x20	; 32
     d2a:	b1 e4       	ldi	r27, 0x41	; 65
     d2c:	80 83       	st	Z, r24
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	a2 83       	std	Z+2, r26	; 0x02
     d32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d34:	8e 01       	movw	r16, r28
     d36:	01 5c       	subi	r16, 0xC1	; 193
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	fe 01       	movw	r30, r28
     d3c:	ed 5b       	subi	r30, 0xBD	; 189
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	4a e7       	ldi	r20, 0x7A	; 122
     d4e:	53 e4       	ldi	r21, 0x43	; 67
     d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	f8 01       	movw	r30, r16
     d5a:	80 83       	st	Z, r24
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	a2 83       	std	Z+2, r26	; 0x02
     d60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d62:	fe 01       	movw	r30, r28
     d64:	ff 96       	adiw	r30, 0x3f	; 63
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e8       	ldi	r20, 0x80	; 128
     d74:	5f e3       	ldi	r21, 0x3F	; 63
     d76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d7a:	88 23       	and	r24, r24
     d7c:	2c f4       	brge	.+10     	; 0xd88 <Buzzer_Mode+0x212>
		__ticks = 1;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	9e af       	std	Y+62, r25	; 0x3e
     d84:	8d af       	std	Y+61, r24	; 0x3d
     d86:	46 c0       	rjmp	.+140    	; 0xe14 <Buzzer_Mode+0x29e>
	else if (__tmp > 65535)
     d88:	fe 01       	movw	r30, r28
     d8a:	ff 96       	adiw	r30, 0x3f	; 63
     d8c:	60 81       	ld	r22, Z
     d8e:	71 81       	ldd	r23, Z+1	; 0x01
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	3f ef       	ldi	r19, 0xFF	; 255
     d98:	4f e7       	ldi	r20, 0x7F	; 127
     d9a:	57 e4       	ldi	r21, 0x47	; 71
     d9c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     da0:	18 16       	cp	r1, r24
     da2:	64 f5       	brge	.+88     	; 0xdfc <Buzzer_Mode+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da4:	fe 01       	movw	r30, r28
     da6:	ed 5b       	subi	r30, 0xBD	; 189
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	60 81       	ld	r22, Z
     dac:	71 81       	ldd	r23, Z+1	; 0x01
     dae:	82 81       	ldd	r24, Z+2	; 0x02
     db0:	93 81       	ldd	r25, Z+3	; 0x03
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	51 e4       	ldi	r21, 0x41	; 65
     dba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	9e af       	std	Y+62, r25	; 0x3e
     dd0:	8d af       	std	Y+61, r24	; 0x3d
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <Buzzer_Mode+0x27c>
     dd4:	89 e1       	ldi	r24, 0x19	; 25
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9c af       	std	Y+60, r25	; 0x3c
     dda:	8b af       	std	Y+59, r24	; 0x3b
     ddc:	8b ad       	ldd	r24, Y+59	; 0x3b
     dde:	9c ad       	ldd	r25, Y+60	; 0x3c
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <Buzzer_Mode+0x26a>
     de4:	9c af       	std	Y+60, r25	; 0x3c
     de6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de8:	8d ad       	ldd	r24, Y+61	; 0x3d
     dea:	9e ad       	ldd	r25, Y+62	; 0x3e
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	9e af       	std	Y+62, r25	; 0x3e
     df0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df2:	8d ad       	ldd	r24, Y+61	; 0x3d
     df4:	9e ad       	ldd	r25, Y+62	; 0x3e
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	69 f7       	brne	.-38     	; 0xdd4 <Buzzer_Mode+0x25e>
     dfa:	16 c0       	rjmp	.+44     	; 0xe28 <Buzzer_Mode+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfc:	fe 01       	movw	r30, r28
     dfe:	ff 96       	adiw	r30, 0x3f	; 63
     e00:	60 81       	ld	r22, Z
     e02:	71 81       	ldd	r23, Z+1	; 0x01
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9e af       	std	Y+62, r25	; 0x3e
     e12:	8d af       	std	Y+61, r24	; 0x3d
     e14:	8d ad       	ldd	r24, Y+61	; 0x3d
     e16:	9e ad       	ldd	r25, Y+62	; 0x3e
     e18:	9a af       	std	Y+58, r25	; 0x3a
     e1a:	89 af       	std	Y+57, r24	; 0x39
     e1c:	89 ad       	ldd	r24, Y+57	; 0x39
     e1e:	9a ad       	ldd	r25, Y+58	; 0x3a
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <Buzzer_Mode+0x2aa>
     e24:	9a af       	std	Y+58, r25	; 0x3a
     e26:	89 af       	std	Y+57, r24	; 0x39
}

void Buzzer_Mode(u8 u8Freq1, u8 u8Freq2)
{
		int count;
		for(count=0; count<u8Freq1; count++)
     e28:	de 01       	movw	r26, r28
     e2a:	ab 5a       	subi	r26, 0xAB	; 171
     e2c:	bf 4f       	sbci	r27, 0xFF	; 255
     e2e:	fe 01       	movw	r30, r28
     e30:	eb 5a       	subi	r30, 0xAB	; 171
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	11 96       	adiw	r26, 0x01	; 1
     e3c:	9c 93       	st	X, r25
     e3e:	8e 93       	st	-X, r24
     e40:	fe 01       	movw	r30, r28
     e42:	e9 5a       	subi	r30, 0xA9	; 169
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	80 81       	ld	r24, Z
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	fe 01       	movw	r30, r28
     e4e:	eb 5a       	subi	r30, 0xAB	; 171
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	80 81       	ld	r24, Z
     e54:	91 81       	ldd	r25, Z+1	; 0x01
     e56:	82 17       	cp	r24, r18
     e58:	93 07       	cpc	r25, r19
     e5a:	0c f4       	brge	.+2      	; 0xe5e <Buzzer_Mode+0x2e8>
     e5c:	a7 ce       	rjmp	.-690    	; 0xbac <Buzzer_Mode+0x36>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	aa e7       	ldi	r26, 0x7A	; 122
     e64:	b4 e4       	ldi	r27, 0x44	; 68
     e66:	8d ab       	std	Y+53, r24	; 0x35
     e68:	9e ab       	std	Y+54, r25	; 0x36
     e6a:	af ab       	std	Y+55, r26	; 0x37
     e6c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e6e:	6d a9       	ldd	r22, Y+53	; 0x35
     e70:	7e a9       	ldd	r23, Y+54	; 0x36
     e72:	8f a9       	ldd	r24, Y+55	; 0x37
     e74:	98 ad       	ldd	r25, Y+56	; 0x38
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	4a e7       	ldi	r20, 0x7A	; 122
     e7c:	53 e4       	ldi	r21, 0x43	; 67
     e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	89 ab       	std	Y+49, r24	; 0x31
     e88:	9a ab       	std	Y+50, r25	; 0x32
     e8a:	ab ab       	std	Y+51, r26	; 0x33
     e8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e8e:	69 a9       	ldd	r22, Y+49	; 0x31
     e90:	7a a9       	ldd	r23, Y+50	; 0x32
     e92:	8b a9       	ldd	r24, Y+51	; 0x33
     e94:	9c a9       	ldd	r25, Y+52	; 0x34
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e8       	ldi	r20, 0x80	; 128
     e9c:	5f e3       	ldi	r21, 0x3F	; 63
     e9e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ea2:	88 23       	and	r24, r24
     ea4:	2c f4       	brge	.+10     	; 0xeb0 <Buzzer_Mode+0x33a>
		__ticks = 1;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	98 ab       	std	Y+48, r25	; 0x30
     eac:	8f a7       	std	Y+47, r24	; 0x2f
     eae:	3f c0       	rjmp	.+126    	; 0xf2e <Buzzer_Mode+0x3b8>
	else if (__tmp > 65535)
     eb0:	69 a9       	ldd	r22, Y+49	; 0x31
     eb2:	7a a9       	ldd	r23, Y+50	; 0x32
     eb4:	8b a9       	ldd	r24, Y+51	; 0x33
     eb6:	9c a9       	ldd	r25, Y+52	; 0x34
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	3f ef       	ldi	r19, 0xFF	; 255
     ebc:	4f e7       	ldi	r20, 0x7F	; 127
     ebe:	57 e4       	ldi	r21, 0x47	; 71
     ec0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ec4:	18 16       	cp	r1, r24
     ec6:	4c f5       	brge	.+82     	; 0xf1a <Buzzer_Mode+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec8:	6d a9       	ldd	r22, Y+53	; 0x35
     eca:	7e a9       	ldd	r23, Y+54	; 0x36
     ecc:	8f a9       	ldd	r24, Y+55	; 0x37
     ece:	98 ad       	ldd	r25, Y+56	; 0x38
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e2       	ldi	r20, 0x20	; 32
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	bc 01       	movw	r22, r24
     ee2:	cd 01       	movw	r24, r26
     ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	98 ab       	std	Y+48, r25	; 0x30
     eee:	8f a7       	std	Y+47, r24	; 0x2f
     ef0:	0f c0       	rjmp	.+30     	; 0xf10 <Buzzer_Mode+0x39a>
     ef2:	89 e1       	ldi	r24, 0x19	; 25
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	9e a7       	std	Y+46, r25	; 0x2e
     ef8:	8d a7       	std	Y+45, r24	; 0x2d
     efa:	8d a5       	ldd	r24, Y+45	; 0x2d
     efc:	9e a5       	ldd	r25, Y+46	; 0x2e
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	f1 f7       	brne	.-4      	; 0xefe <Buzzer_Mode+0x388>
     f02:	9e a7       	std	Y+46, r25	; 0x2e
     f04:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f06:	8f a5       	ldd	r24, Y+47	; 0x2f
     f08:	98 a9       	ldd	r25, Y+48	; 0x30
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	98 ab       	std	Y+48, r25	; 0x30
     f0e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f10:	8f a5       	ldd	r24, Y+47	; 0x2f
     f12:	98 a9       	ldd	r25, Y+48	; 0x30
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	69 f7       	brne	.-38     	; 0xef2 <Buzzer_Mode+0x37c>
     f18:	14 c0       	rjmp	.+40     	; 0xf42 <Buzzer_Mode+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1a:	69 a9       	ldd	r22, Y+49	; 0x31
     f1c:	7a a9       	ldd	r23, Y+50	; 0x32
     f1e:	8b a9       	ldd	r24, Y+51	; 0x33
     f20:	9c a9       	ldd	r25, Y+52	; 0x34
     f22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	98 ab       	std	Y+48, r25	; 0x30
     f2c:	8f a7       	std	Y+47, r24	; 0x2f
     f2e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f30:	98 a9       	ldd	r25, Y+48	; 0x30
     f32:	9c a7       	std	Y+44, r25	; 0x2c
     f34:	8b a7       	std	Y+43, r24	; 0x2b
     f36:	8b a5       	ldd	r24, Y+43	; 0x2b
     f38:	9c a5       	ldd	r25, Y+44	; 0x2c
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <Buzzer_Mode+0x3c4>
     f3e:	9c a7       	std	Y+44, r25	; 0x2c
     f40:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			Buzzer(OFF);
			_delay_ms(10);
		}
		_delay_ms(1000);
		for(count=0; count<u8Freq2; count++)
     f42:	fe 01       	movw	r30, r28
     f44:	eb 5a       	subi	r30, 0xAB	; 171
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	11 82       	std	Z+1, r1	; 0x01
     f4a:	10 82       	st	Z, r1
     f4c:	f6 c0       	rjmp	.+492    	; 0x113a <Buzzer_Mode+0x5c4>
		{
			Buzzer(ON);
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	0e 94 ac 05 	call	0xb58	; 0xb58 <Buzzer>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a0 e2       	ldi	r26, 0x20	; 32
     f5a:	b1 e4       	ldi	r27, 0x41	; 65
     f5c:	8f a3       	std	Y+39, r24	; 0x27
     f5e:	98 a7       	std	Y+40, r25	; 0x28
     f60:	a9 a7       	std	Y+41, r26	; 0x29
     f62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f64:	6f a1       	ldd	r22, Y+39	; 0x27
     f66:	78 a5       	ldd	r23, Y+40	; 0x28
     f68:	89 a5       	ldd	r24, Y+41	; 0x29
     f6a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	4a e7       	ldi	r20, 0x7A	; 122
     f72:	53 e4       	ldi	r21, 0x43	; 67
     f74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	8b a3       	std	Y+35, r24	; 0x23
     f7e:	9c a3       	std	Y+36, r25	; 0x24
     f80:	ad a3       	std	Y+37, r26	; 0x25
     f82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f84:	6b a1       	ldd	r22, Y+35	; 0x23
     f86:	7c a1       	ldd	r23, Y+36	; 0x24
     f88:	8d a1       	ldd	r24, Y+37	; 0x25
     f8a:	9e a1       	ldd	r25, Y+38	; 0x26
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e8       	ldi	r20, 0x80	; 128
     f92:	5f e3       	ldi	r21, 0x3F	; 63
     f94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f98:	88 23       	and	r24, r24
     f9a:	2c f4       	brge	.+10     	; 0xfa6 <Buzzer_Mode+0x430>
		__ticks = 1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	9a a3       	std	Y+34, r25	; 0x22
     fa2:	89 a3       	std	Y+33, r24	; 0x21
     fa4:	3f c0       	rjmp	.+126    	; 0x1024 <Buzzer_Mode+0x4ae>
	else if (__tmp > 65535)
     fa6:	6b a1       	ldd	r22, Y+35	; 0x23
     fa8:	7c a1       	ldd	r23, Y+36	; 0x24
     faa:	8d a1       	ldd	r24, Y+37	; 0x25
     fac:	9e a1       	ldd	r25, Y+38	; 0x26
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	3f ef       	ldi	r19, 0xFF	; 255
     fb2:	4f e7       	ldi	r20, 0x7F	; 127
     fb4:	57 e4       	ldi	r21, 0x47	; 71
     fb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fba:	18 16       	cp	r1, r24
     fbc:	4c f5       	brge	.+82     	; 0x1010 <Buzzer_Mode+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fbe:	6f a1       	ldd	r22, Y+39	; 0x27
     fc0:	78 a5       	ldd	r23, Y+40	; 0x28
     fc2:	89 a5       	ldd	r24, Y+41	; 0x29
     fc4:	9a a5       	ldd	r25, Y+42	; 0x2a
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e2       	ldi	r20, 0x20	; 32
     fcc:	51 e4       	ldi	r21, 0x41	; 65
     fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9a a3       	std	Y+34, r25	; 0x22
     fe4:	89 a3       	std	Y+33, r24	; 0x21
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <Buzzer_Mode+0x490>
     fe8:	89 e1       	ldi	r24, 0x19	; 25
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	98 a3       	std	Y+32, r25	; 0x20
     fee:	8f 8f       	std	Y+31, r24	; 0x1f
     ff0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ff2:	98 a1       	ldd	r25, Y+32	; 0x20
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <Buzzer_Mode+0x47e>
     ff8:	98 a3       	std	Y+32, r25	; 0x20
     ffa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffc:	89 a1       	ldd	r24, Y+33	; 0x21
     ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	9a a3       	std	Y+34, r25	; 0x22
    1004:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1006:	89 a1       	ldd	r24, Y+33	; 0x21
    1008:	9a a1       	ldd	r25, Y+34	; 0x22
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	69 f7       	brne	.-38     	; 0xfe8 <Buzzer_Mode+0x472>
    100e:	14 c0       	rjmp	.+40     	; 0x1038 <Buzzer_Mode+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1010:	6b a1       	ldd	r22, Y+35	; 0x23
    1012:	7c a1       	ldd	r23, Y+36	; 0x24
    1014:	8d a1       	ldd	r24, Y+37	; 0x25
    1016:	9e a1       	ldd	r25, Y+38	; 0x26
    1018:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	9a a3       	std	Y+34, r25	; 0x22
    1022:	89 a3       	std	Y+33, r24	; 0x21
    1024:	89 a1       	ldd	r24, Y+33	; 0x21
    1026:	9a a1       	ldd	r25, Y+34	; 0x22
    1028:	9e 8f       	std	Y+30, r25	; 0x1e
    102a:	8d 8f       	std	Y+29, r24	; 0x1d
    102c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    102e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <Buzzer_Mode+0x4ba>
    1034:	9e 8f       	std	Y+30, r25	; 0x1e
    1036:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			Buzzer(OFF);
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	0e 94 ac 05 	call	0xb58	; 0xb58 <Buzzer>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a0 e8       	ldi	r26, 0x80	; 128
    1044:	bf e3       	ldi	r27, 0x3F	; 63
    1046:	89 8f       	std	Y+25, r24	; 0x19
    1048:	9a 8f       	std	Y+26, r25	; 0x1a
    104a:	ab 8f       	std	Y+27, r26	; 0x1b
    104c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104e:	69 8d       	ldd	r22, Y+25	; 0x19
    1050:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1052:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1054:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	4a e7       	ldi	r20, 0x7A	; 122
    105c:	53 e4       	ldi	r21, 0x43	; 67
    105e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	8d 8b       	std	Y+21, r24	; 0x15
    1068:	9e 8b       	std	Y+22, r25	; 0x16
    106a:	af 8b       	std	Y+23, r26	; 0x17
    106c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    106e:	6d 89       	ldd	r22, Y+21	; 0x15
    1070:	7e 89       	ldd	r23, Y+22	; 0x16
    1072:	8f 89       	ldd	r24, Y+23	; 0x17
    1074:	98 8d       	ldd	r25, Y+24	; 0x18
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e8       	ldi	r20, 0x80	; 128
    107c:	5f e3       	ldi	r21, 0x3F	; 63
    107e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1082:	88 23       	and	r24, r24
    1084:	2c f4       	brge	.+10     	; 0x1090 <Buzzer_Mode+0x51a>
		__ticks = 1;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	9c 8b       	std	Y+20, r25	; 0x14
    108c:	8b 8b       	std	Y+19, r24	; 0x13
    108e:	3f c0       	rjmp	.+126    	; 0x110e <Buzzer_Mode+0x598>
	else if (__tmp > 65535)
    1090:	6d 89       	ldd	r22, Y+21	; 0x15
    1092:	7e 89       	ldd	r23, Y+22	; 0x16
    1094:	8f 89       	ldd	r24, Y+23	; 0x17
    1096:	98 8d       	ldd	r25, Y+24	; 0x18
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	3f ef       	ldi	r19, 0xFF	; 255
    109c:	4f e7       	ldi	r20, 0x7F	; 127
    109e:	57 e4       	ldi	r21, 0x47	; 71
    10a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10a4:	18 16       	cp	r1, r24
    10a6:	4c f5       	brge	.+82     	; 0x10fa <Buzzer_Mode+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a8:	69 8d       	ldd	r22, Y+25	; 0x19
    10aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e2       	ldi	r20, 0x20	; 32
    10b6:	51 e4       	ldi	r21, 0x41	; 65
    10b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	9c 8b       	std	Y+20, r25	; 0x14
    10ce:	8b 8b       	std	Y+19, r24	; 0x13
    10d0:	0f c0       	rjmp	.+30     	; 0x10f0 <Buzzer_Mode+0x57a>
    10d2:	89 e1       	ldi	r24, 0x19	; 25
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9a 8b       	std	Y+18, r25	; 0x12
    10d8:	89 8b       	std	Y+17, r24	; 0x11
    10da:	89 89       	ldd	r24, Y+17	; 0x11
    10dc:	9a 89       	ldd	r25, Y+18	; 0x12
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <Buzzer_Mode+0x568>
    10e2:	9a 8b       	std	Y+18, r25	; 0x12
    10e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e6:	8b 89       	ldd	r24, Y+19	; 0x13
    10e8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	9c 8b       	std	Y+20, r25	; 0x14
    10ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f0:	8b 89       	ldd	r24, Y+19	; 0x13
    10f2:	9c 89       	ldd	r25, Y+20	; 0x14
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	69 f7       	brne	.-38     	; 0x10d2 <Buzzer_Mode+0x55c>
    10f8:	14 c0       	rjmp	.+40     	; 0x1122 <Buzzer_Mode+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fa:	6d 89       	ldd	r22, Y+21	; 0x15
    10fc:	7e 89       	ldd	r23, Y+22	; 0x16
    10fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1100:	98 8d       	ldd	r25, Y+24	; 0x18
    1102:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	9c 8b       	std	Y+20, r25	; 0x14
    110c:	8b 8b       	std	Y+19, r24	; 0x13
    110e:	8b 89       	ldd	r24, Y+19	; 0x13
    1110:	9c 89       	ldd	r25, Y+20	; 0x14
    1112:	98 8b       	std	Y+16, r25	; 0x10
    1114:	8f 87       	std	Y+15, r24	; 0x0f
    1116:	8f 85       	ldd	r24, Y+15	; 0x0f
    1118:	98 89       	ldd	r25, Y+16	; 0x10
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <Buzzer_Mode+0x5a4>
    111e:	98 8b       	std	Y+16, r25	; 0x10
    1120:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			Buzzer(OFF);
			_delay_ms(10);
		}
		_delay_ms(1000);
		for(count=0; count<u8Freq2; count++)
    1122:	de 01       	movw	r26, r28
    1124:	ab 5a       	subi	r26, 0xAB	; 171
    1126:	bf 4f       	sbci	r27, 0xFF	; 255
    1128:	fe 01       	movw	r30, r28
    112a:	eb 5a       	subi	r30, 0xAB	; 171
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	11 96       	adiw	r26, 0x01	; 1
    1136:	9c 93       	st	X, r25
    1138:	8e 93       	st	-X, r24
    113a:	fe 01       	movw	r30, r28
    113c:	e8 5a       	subi	r30, 0xA8	; 168
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	80 81       	ld	r24, Z
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	fe 01       	movw	r30, r28
    1148:	eb 5a       	subi	r30, 0xAB	; 171
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	80 81       	ld	r24, Z
    114e:	91 81       	ldd	r25, Z+1	; 0x01
    1150:	82 17       	cp	r24, r18
    1152:	93 07       	cpc	r25, r19
    1154:	0c f4       	brge	.+2      	; 0x1158 <Buzzer_Mode+0x5e2>
    1156:	fb ce       	rjmp	.-522    	; 0xf4e <Buzzer_Mode+0x3d8>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a8 ec       	ldi	r26, 0xC8	; 200
    115e:	b2 e4       	ldi	r27, 0x42	; 66
    1160:	8b 87       	std	Y+11, r24	; 0x0b
    1162:	9c 87       	std	Y+12, r25	; 0x0c
    1164:	ad 87       	std	Y+13, r26	; 0x0d
    1166:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1168:	6b 85       	ldd	r22, Y+11	; 0x0b
    116a:	7c 85       	ldd	r23, Y+12	; 0x0c
    116c:	8d 85       	ldd	r24, Y+13	; 0x0d
    116e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	4a e7       	ldi	r20, 0x7A	; 122
    1176:	53 e4       	ldi	r21, 0x43	; 67
    1178:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	8f 83       	std	Y+7, r24	; 0x07
    1182:	98 87       	std	Y+8, r25	; 0x08
    1184:	a9 87       	std	Y+9, r26	; 0x09
    1186:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e8       	ldi	r20, 0x80	; 128
    1196:	5f e3       	ldi	r21, 0x3F	; 63
    1198:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    119c:	88 23       	and	r24, r24
    119e:	2c f4       	brge	.+10     	; 0x11aa <Buzzer_Mode+0x634>
		__ticks = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9e 83       	std	Y+6, r25	; 0x06
    11a6:	8d 83       	std	Y+5, r24	; 0x05
    11a8:	3f c0       	rjmp	.+126    	; 0x1228 <Buzzer_Mode+0x6b2>
	else if (__tmp > 65535)
    11aa:	6f 81       	ldd	r22, Y+7	; 0x07
    11ac:	78 85       	ldd	r23, Y+8	; 0x08
    11ae:	89 85       	ldd	r24, Y+9	; 0x09
    11b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	3f ef       	ldi	r19, 0xFF	; 255
    11b6:	4f e7       	ldi	r20, 0x7F	; 127
    11b8:	57 e4       	ldi	r21, 0x47	; 71
    11ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11be:	18 16       	cp	r1, r24
    11c0:	4c f5       	brge	.+82     	; 0x1214 <Buzzer_Mode+0x69e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e2       	ldi	r20, 0x20	; 32
    11d0:	51 e4       	ldi	r21, 0x41	; 65
    11d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	9e 83       	std	Y+6, r25	; 0x06
    11e8:	8d 83       	std	Y+5, r24	; 0x05
    11ea:	0f c0       	rjmp	.+30     	; 0x120a <Buzzer_Mode+0x694>
    11ec:	89 e1       	ldi	r24, 0x19	; 25
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	9c 83       	std	Y+4, r25	; 0x04
    11f2:	8b 83       	std	Y+3, r24	; 0x03
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <Buzzer_Mode+0x682>
    11fc:	9c 83       	std	Y+4, r25	; 0x04
    11fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	9e 81       	ldd	r25, Y+6	; 0x06
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	9e 83       	std	Y+6, r25	; 0x06
    1208:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	69 f7       	brne	.-38     	; 0x11ec <Buzzer_Mode+0x676>
    1212:	14 c0       	rjmp	.+40     	; 0x123c <Buzzer_Mode+0x6c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1214:	6f 81       	ldd	r22, Y+7	; 0x07
    1216:	78 85       	ldd	r23, Y+8	; 0x08
    1218:	89 85       	ldd	r24, Y+9	; 0x09
    121a:	9a 85       	ldd	r25, Y+10	; 0x0a
    121c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <Buzzer_Mode+0x6be>
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01
			Buzzer(OFF);
			_delay_ms(1);
		}
		_delay_ms(100);

}
    123c:	c8 5a       	subi	r28, 0xA8	; 168
    123e:	df 4f       	sbci	r29, 0xFF	; 255
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	08 95       	ret

00001254 <DIO_voidInit>:

#include "DIO.h"
#include "Utils.h"

void DIO_voidInit()
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
	Clr_Nibble_High(DDRA);
    125c:	aa e3       	ldi	r26, 0x3A	; 58
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	ea e3       	ldi	r30, 0x3A	; 58
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8f 70       	andi	r24, 0x0F	; 15
    1268:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRA);
    126a:	aa e3       	ldi	r26, 0x3A	; 58
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	ea e3       	ldi	r30, 0x3A	; 58
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 7f       	andi	r24, 0xF0	; 240
    1276:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRB);
    1278:	a7 e3       	ldi	r26, 0x37	; 55
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e7 e3       	ldi	r30, 0x37	; 55
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	8f 70       	andi	r24, 0x0F	; 15
    1284:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRB);
    1286:	a7 e3       	ldi	r26, 0x37	; 55
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e7 e3       	ldi	r30, 0x37	; 55
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	80 7f       	andi	r24, 0xF0	; 240
    1292:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRC);
    1294:	a4 e3       	ldi	r26, 0x34	; 52
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e4 e3       	ldi	r30, 0x34	; 52
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8f 70       	andi	r24, 0x0F	; 15
    12a0:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRC);
    12a2:	a4 e3       	ldi	r26, 0x34	; 52
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e4 e3       	ldi	r30, 0x34	; 52
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	80 7f       	andi	r24, 0xF0	; 240
    12ae:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRD);
    12b0:	a1 e3       	ldi	r26, 0x31	; 49
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e1 e3       	ldi	r30, 0x31	; 49
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	8f 70       	andi	r24, 0x0F	; 15
    12bc:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRD);
    12be:	a1 e3       	ldi	r26, 0x31	; 49
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e1 e3       	ldi	r30, 0x31	; 49
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	80 7f       	andi	r24, 0xF0	; 240
    12ca:	8c 93       	st	X, r24
}
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <DIO_u8GetVal>:

u8 DIO_u8GetVal(u8 u8Port, u8 u8Pin)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <DIO_u8GetVal+0x6>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <DIO_u8GetVal+0x8>
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	8a 83       	std	Y+2, r24	; 0x02
    12e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Return;
	switch (u8Port)
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3d 83       	std	Y+5, r19	; 0x05
    12ec:	2c 83       	std	Y+4, r18	; 0x04
    12ee:	4c 81       	ldd	r20, Y+4	; 0x04
    12f0:	5d 81       	ldd	r21, Y+5	; 0x05
    12f2:	41 30       	cpi	r20, 0x01	; 1
    12f4:	51 05       	cpc	r21, r1
    12f6:	b1 f1       	breq	.+108    	; 0x1364 <DIO_u8GetVal+0x92>
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	9d 81       	ldd	r25, Y+5	; 0x05
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	91 05       	cpc	r25, r1
    1300:	34 f4       	brge	.+12     	; 0x130e <DIO_u8GetVal+0x3c>
    1302:	2c 81       	ldd	r18, Y+4	; 0x04
    1304:	3d 81       	ldd	r19, Y+5	; 0x05
    1306:	21 15       	cp	r18, r1
    1308:	31 05       	cpc	r19, r1
    130a:	71 f0       	breq	.+28     	; 0x1328 <DIO_u8GetVal+0x56>
    130c:	84 c0       	rjmp	.+264    	; 0x1416 <DIO_u8GetVal+0x144>
    130e:	4c 81       	ldd	r20, Y+4	; 0x04
    1310:	5d 81       	ldd	r21, Y+5	; 0x05
    1312:	42 30       	cpi	r20, 0x02	; 2
    1314:	51 05       	cpc	r21, r1
    1316:	09 f4       	brne	.+2      	; 0x131a <DIO_u8GetVal+0x48>
    1318:	43 c0       	rjmp	.+134    	; 0x13a0 <DIO_u8GetVal+0xce>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	83 30       	cpi	r24, 0x03	; 3
    1320:	91 05       	cpc	r25, r1
    1322:	09 f4       	brne	.+2      	; 0x1326 <DIO_u8GetVal+0x54>
    1324:	5b c0       	rjmp	.+182    	; 0x13dc <DIO_u8GetVal+0x10a>
    1326:	77 c0       	rjmp	.+238    	; 0x1416 <DIO_u8GetVal+0x144>
	{
	case 0:
		Local_u8Return=Get_Bit(PINA,u8Pin);
    1328:	e9 e3       	ldi	r30, 0x39	; 57
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_u8GetVal+0x70>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	2a 95       	dec	r18
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_u8GetVal+0x6c>
    1346:	9a 01       	movw	r18, r20
    1348:	28 23       	and	r18, r24
    134a:	39 23       	and	r19, r25
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a9 01       	movw	r20, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_u8GetVal+0x88>
    1356:	55 95       	asr	r21
    1358:	47 95       	ror	r20
    135a:	8a 95       	dec	r24
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_u8GetVal+0x84>
    135e:	ca 01       	movw	r24, r20
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	59 c0       	rjmp	.+178    	; 0x1416 <DIO_u8GetVal+0x144>
		break;
	case 1:
		Local_u8Return=Get_Bit(PINB,u8Pin);
    1364:	e6 e3       	ldi	r30, 0x36	; 54
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_u8GetVal+0xac>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	2a 95       	dec	r18
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_u8GetVal+0xa8>
    1382:	9a 01       	movw	r18, r20
    1384:	28 23       	and	r18, r24
    1386:	39 23       	and	r19, r25
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a9 01       	movw	r20, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_u8GetVal+0xc4>
    1392:	55 95       	asr	r21
    1394:	47 95       	ror	r20
    1396:	8a 95       	dec	r24
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_u8GetVal+0xc0>
    139a:	ca 01       	movw	r24, r20
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	3b c0       	rjmp	.+118    	; 0x1416 <DIO_u8GetVal+0x144>
		break;
	case 2:
		Local_u8Return=Get_Bit(PINC,u8Pin);
    13a0:	e3 e3       	ldi	r30, 0x33	; 51
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_u8GetVal+0xe8>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	2a 95       	dec	r18
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_u8GetVal+0xe4>
    13be:	9a 01       	movw	r18, r20
    13c0:	28 23       	and	r18, r24
    13c2:	39 23       	and	r19, r25
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a9 01       	movw	r20, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <DIO_u8GetVal+0x100>
    13ce:	55 95       	asr	r21
    13d0:	47 95       	ror	r20
    13d2:	8a 95       	dec	r24
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <DIO_u8GetVal+0xfc>
    13d6:	ca 01       	movw	r24, r20
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	1d c0       	rjmp	.+58     	; 0x1416 <DIO_u8GetVal+0x144>
		break;
	case 3:
		Local_u8Return=Get_Bit(PIND,u8Pin);
    13dc:	e0 e3       	ldi	r30, 0x30	; 48
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_u8GetVal+0x124>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	2a 95       	dec	r18
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_u8GetVal+0x120>
    13fa:	9a 01       	movw	r18, r20
    13fc:	28 23       	and	r18, r24
    13fe:	39 23       	and	r19, r25
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_u8GetVal+0x13c>
    140a:	55 95       	asr	r21
    140c:	47 95       	ror	r20
    140e:	8a 95       	dec	r24
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_u8GetVal+0x138>
    1412:	ca 01       	movw	r24, r20
    1414:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Return;
    1416:	89 81       	ldd	r24, Y+1	; 0x01
}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <DIO_voidWriteVal>:

void DIO_voidWriteVal(u8 u8Port, u8 u8Pin, u8 u8Val)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <DIO_voidWriteVal+0x6>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <DIO_voidWriteVal+0x8>
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	6a 83       	std	Y+2, r22	; 0x02
    143a:	4b 83       	std	Y+3, r20	; 0x03
	switch (u8Port)
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3d 83       	std	Y+5, r19	; 0x05
    1444:	2c 83       	std	Y+4, r18	; 0x04
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	9d 81       	ldd	r25, Y+5	; 0x05
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	09 f4       	brne	.+2      	; 0x1452 <DIO_voidWriteVal+0x2a>
    1450:	46 c0       	rjmp	.+140    	; 0x14de <DIO_voidWriteVal+0xb6>
    1452:	2c 81       	ldd	r18, Y+4	; 0x04
    1454:	3d 81       	ldd	r19, Y+5	; 0x05
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	2c f4       	brge	.+10     	; 0x1466 <DIO_voidWriteVal+0x3e>
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	71 f0       	breq	.+28     	; 0x1480 <DIO_voidWriteVal+0x58>
    1464:	c7 c0       	rjmp	.+398    	; 0x15f4 <DIO_voidWriteVal+0x1cc>
    1466:	2c 81       	ldd	r18, Y+4	; 0x04
    1468:	3d 81       	ldd	r19, Y+5	; 0x05
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	09 f4       	brne	.+2      	; 0x1472 <DIO_voidWriteVal+0x4a>
    1470:	65 c0       	rjmp	.+202    	; 0x153c <DIO_voidWriteVal+0x114>
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	91 05       	cpc	r25, r1
    147a:	09 f4       	brne	.+2      	; 0x147e <DIO_voidWriteVal+0x56>
    147c:	8e c0       	rjmp	.+284    	; 0x159a <DIO_voidWriteVal+0x172>
    147e:	ba c0       	rjmp	.+372    	; 0x15f4 <DIO_voidWriteVal+0x1cc>
		{
		case 0:
			Assign_Bit(PORTA,u8Pin,u8Val);
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	88 23       	and	r24, r24
    1484:	a1 f4       	brne	.+40     	; 0x14ae <DIO_voidWriteVal+0x86>
    1486:	ab e3       	ldi	r26, 0x3B	; 59
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	eb e3       	ldi	r30, 0x3B	; 59
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <DIO_voidWriteVal+0x7c>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <DIO_voidWriteVal+0x78>
    14a8:	80 95       	com	r24
    14aa:	84 23       	and	r24, r20
    14ac:	8c 93       	st	X, r24
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <DIO_voidWriteVal+0x8e>
    14b4:	9f c0       	rjmp	.+318    	; 0x15f4 <DIO_voidWriteVal+0x1cc>
    14b6:	ab e3       	ldi	r26, 0x3B	; 59
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	eb e3       	ldi	r30, 0x3B	; 59
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_voidWriteVal+0xac>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_voidWriteVal+0xa8>
    14d8:	84 2b       	or	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	8b c0       	rjmp	.+278    	; 0x15f4 <DIO_voidWriteVal+0x1cc>
			break;
		case 1:
			Assign_Bit(PORTB,u8Pin,u8Val);
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	88 23       	and	r24, r24
    14e2:	a1 f4       	brne	.+40     	; 0x150c <DIO_voidWriteVal+0xe4>
    14e4:	a8 e3       	ldi	r26, 0x38	; 56
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e8 e3       	ldi	r30, 0x38	; 56
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_voidWriteVal+0xda>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_voidWriteVal+0xd6>
    1506:	80 95       	com	r24
    1508:	84 23       	and	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	09 f0       	breq	.+2      	; 0x1514 <DIO_voidWriteVal+0xec>
    1512:	70 c0       	rjmp	.+224    	; 0x15f4 <DIO_voidWriteVal+0x1cc>
    1514:	a8 e3       	ldi	r26, 0x38	; 56
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e8 e3       	ldi	r30, 0x38	; 56
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_voidWriteVal+0x10a>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <DIO_voidWriteVal+0x106>
    1536:	84 2b       	or	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	5c c0       	rjmp	.+184    	; 0x15f4 <DIO_voidWriteVal+0x1cc>
			break;
		case 2:
			Assign_Bit(PORTC,u8Pin,u8Val);
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 23       	and	r24, r24
    1540:	a1 f4       	brne	.+40     	; 0x156a <DIO_voidWriteVal+0x142>
    1542:	a5 e3       	ldi	r26, 0x35	; 53
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e3       	ldi	r30, 0x35	; 53
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_voidWriteVal+0x138>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_voidWriteVal+0x134>
    1564:	80 95       	com	r24
    1566:	84 23       	and	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	09 f0       	breq	.+2      	; 0x1572 <DIO_voidWriteVal+0x14a>
    1570:	41 c0       	rjmp	.+130    	; 0x15f4 <DIO_voidWriteVal+0x1cc>
    1572:	a5 e3       	ldi	r26, 0x35	; 53
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e5 e3       	ldi	r30, 0x35	; 53
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_voidWriteVal+0x168>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_voidWriteVal+0x164>
    1594:	84 2b       	or	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	2d c0       	rjmp	.+90     	; 0x15f4 <DIO_voidWriteVal+0x1cc>
			break;
		case 3:
			Assign_Bit(PORTD,u8Pin,u8Val);
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	88 23       	and	r24, r24
    159e:	a1 f4       	brne	.+40     	; 0x15c8 <DIO_voidWriteVal+0x1a0>
    15a0:	a2 e3       	ldi	r26, 0x32	; 50
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e2 e3       	ldi	r30, 0x32	; 50
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_voidWriteVal+0x196>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_voidWriteVal+0x192>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	99 f4       	brne	.+38     	; 0x15f4 <DIO_voidWriteVal+0x1cc>
    15ce:	a2 e3       	ldi	r26, 0x32	; 50
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e2 e3       	ldi	r30, 0x32	; 50
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_voidWriteVal+0x1c4>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_voidWriteVal+0x1c0>
    15f0:	84 2b       	or	r24, r20
    15f2:	8c 93       	st	X, r24
		}

}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <DIO_voidSetDir>:

void DIO_voidSetDir(u8 u8Port, u8 u8Pin, u8 u8Dir)
{
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	00 d0       	rcall	.+0      	; 0x160a <DIO_voidSetDir+0x6>
    160a:	00 d0       	rcall	.+0      	; 0x160c <DIO_voidSetDir+0x8>
    160c:	0f 92       	push	r0
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	6a 83       	std	Y+2, r22	; 0x02
    1616:	4b 83       	std	Y+3, r20	; 0x03
	switch (u8Port)
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	3d 83       	std	Y+5, r19	; 0x05
    1620:	2c 83       	std	Y+4, r18	; 0x04
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	9d 81       	ldd	r25, Y+5	; 0x05
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	91 05       	cpc	r25, r1
    162a:	09 f4       	brne	.+2      	; 0x162e <DIO_voidSetDir+0x2a>
    162c:	46 c0       	rjmp	.+140    	; 0x16ba <DIO_voidSetDir+0xb6>
    162e:	2c 81       	ldd	r18, Y+4	; 0x04
    1630:	3d 81       	ldd	r19, Y+5	; 0x05
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	2c f4       	brge	.+10     	; 0x1642 <DIO_voidSetDir+0x3e>
    1638:	8c 81       	ldd	r24, Y+4	; 0x04
    163a:	9d 81       	ldd	r25, Y+5	; 0x05
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	71 f0       	breq	.+28     	; 0x165c <DIO_voidSetDir+0x58>
    1640:	c7 c0       	rjmp	.+398    	; 0x17d0 <DIO_voidSetDir+0x1cc>
    1642:	2c 81       	ldd	r18, Y+4	; 0x04
    1644:	3d 81       	ldd	r19, Y+5	; 0x05
    1646:	22 30       	cpi	r18, 0x02	; 2
    1648:	31 05       	cpc	r19, r1
    164a:	09 f4       	brne	.+2      	; 0x164e <DIO_voidSetDir+0x4a>
    164c:	65 c0       	rjmp	.+202    	; 0x1718 <DIO_voidSetDir+0x114>
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	9d 81       	ldd	r25, Y+5	; 0x05
    1652:	83 30       	cpi	r24, 0x03	; 3
    1654:	91 05       	cpc	r25, r1
    1656:	09 f4       	brne	.+2      	; 0x165a <DIO_voidSetDir+0x56>
    1658:	8e c0       	rjmp	.+284    	; 0x1776 <DIO_voidSetDir+0x172>
    165a:	ba c0       	rjmp	.+372    	; 0x17d0 <DIO_voidSetDir+0x1cc>
		{
		case 0:
			Assign_Bit(DDRA,u8Pin,u8Dir);
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	88 23       	and	r24, r24
    1660:	a1 f4       	brne	.+40     	; 0x168a <DIO_voidSetDir+0x86>
    1662:	aa e3       	ldi	r26, 0x3A	; 58
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	ea e3       	ldi	r30, 0x3A	; 58
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_voidSetDir+0x7c>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_voidSetDir+0x78>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	09 f0       	breq	.+2      	; 0x1692 <DIO_voidSetDir+0x8e>
    1690:	9f c0       	rjmp	.+318    	; 0x17d0 <DIO_voidSetDir+0x1cc>
    1692:	aa e3       	ldi	r26, 0x3A	; 58
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ea e3       	ldi	r30, 0x3A	; 58
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_voidSetDir+0xac>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_voidSetDir+0xa8>
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	8b c0       	rjmp	.+278    	; 0x17d0 <DIO_voidSetDir+0x1cc>
			break;
		case 1:
			Assign_Bit(DDRB,u8Pin,u8Dir);
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	88 23       	and	r24, r24
    16be:	a1 f4       	brne	.+40     	; 0x16e8 <DIO_voidSetDir+0xe4>
    16c0:	a7 e3       	ldi	r26, 0x37	; 55
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e7 e3       	ldi	r30, 0x37	; 55
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <DIO_voidSetDir+0xda>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <DIO_voidSetDir+0xd6>
    16e2:	80 95       	com	r24
    16e4:	84 23       	and	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <DIO_voidSetDir+0xec>
    16ee:	70 c0       	rjmp	.+224    	; 0x17d0 <DIO_voidSetDir+0x1cc>
    16f0:	a7 e3       	ldi	r26, 0x37	; 55
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e7 e3       	ldi	r30, 0x37	; 55
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_voidSetDir+0x10a>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_voidSetDir+0x106>
    1712:	84 2b       	or	r24, r20
    1714:	8c 93       	st	X, r24
    1716:	5c c0       	rjmp	.+184    	; 0x17d0 <DIO_voidSetDir+0x1cc>
			break;
		case 2:
			Assign_Bit(DDRC,u8Pin,u8Dir);
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	88 23       	and	r24, r24
    171c:	a1 f4       	brne	.+40     	; 0x1746 <DIO_voidSetDir+0x142>
    171e:	a4 e3       	ldi	r26, 0x34	; 52
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e4 e3       	ldi	r30, 0x34	; 52
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_voidSetDir+0x138>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_voidSetDir+0x134>
    1740:	80 95       	com	r24
    1742:	84 23       	and	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	09 f0       	breq	.+2      	; 0x174e <DIO_voidSetDir+0x14a>
    174c:	41 c0       	rjmp	.+130    	; 0x17d0 <DIO_voidSetDir+0x1cc>
    174e:	a4 e3       	ldi	r26, 0x34	; 52
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e4 e3       	ldi	r30, 0x34	; 52
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_voidSetDir+0x168>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <DIO_voidSetDir+0x164>
    1770:	84 2b       	or	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	2d c0       	rjmp	.+90     	; 0x17d0 <DIO_voidSetDir+0x1cc>
			break;
		case 3:
			Assign_Bit(DDRD,u8Pin,u8Dir);
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	88 23       	and	r24, r24
    177a:	a1 f4       	brne	.+40     	; 0x17a4 <DIO_voidSetDir+0x1a0>
    177c:	a1 e3       	ldi	r26, 0x31	; 49
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e1 e3       	ldi	r30, 0x31	; 49
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <DIO_voidSetDir+0x196>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <DIO_voidSetDir+0x192>
    179e:	80 95       	com	r24
    17a0:	84 23       	and	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	99 f4       	brne	.+38     	; 0x17d0 <DIO_voidSetDir+0x1cc>
    17aa:	a1 e3       	ldi	r26, 0x31	; 49
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e1 e3       	ldi	r30, 0x31	; 49
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_voidSetDir+0x1c4>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_voidSetDir+0x1c0>
    17cc:	84 2b       	or	r24, r20
    17ce:	8c 93       	st	X, r24
		}

}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <ExtINT_voidInit>:
#include "Utils.h"


void ExtINT_voidInit(u8 u8Number)

{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <ExtINT_voidInit+0x6>
    17e6:	0f 92       	push	r0
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	89 83       	std	Y+1, r24	; 0x01
	switch (u8Number)
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	3b 83       	std	Y+3, r19	; 0x03
    17f6:	2a 83       	std	Y+2, r18	; 0x02
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	9b 81       	ldd	r25, Y+3	; 0x03
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	31 f0       	breq	.+12     	; 0x180c <ExtINT_voidInit+0x2c>
    1800:	2a 81       	ldd	r18, Y+2	; 0x02
    1802:	3b 81       	ldd	r19, Y+3	; 0x03
    1804:	21 30       	cpi	r18, 0x01	; 1
    1806:	31 05       	cpc	r19, r1
    1808:	29 f1       	breq	.+74     	; 0x1854 <ExtINT_voidInit+0x74>
    180a:	47 c0       	rjmp	.+142    	; 0x189a <ExtINT_voidInit+0xba>
	{

	case INT0:
		Set_Bit(GICR,Pin6);
    180c:	ab e5       	ldi	r26, 0x5B	; 91
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	eb e5       	ldi	r30, 0x5B	; 91
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	80 64       	ori	r24, 0x40	; 64
    1818:	8c 93       	st	X, r24
		Clr_Bit(GICR,Pin7);
    181a:	ab e5       	ldi	r26, 0x5B	; 91
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	eb e5       	ldi	r30, 0x5B	; 91
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	8f 77       	andi	r24, 0x7F	; 127
    1826:	8c 93       	st	X, r24
		Clr_Bit(GICR,Pin5);
    1828:	ab e5       	ldi	r26, 0x5B	; 91
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	eb e5       	ldi	r30, 0x5B	; 91
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	8f 7d       	andi	r24, 0xDF	; 223
    1834:	8c 93       	st	X, r24

		Set_Bit(MCUCR,Pin0);
    1836:	a5 e5       	ldi	r26, 0x55	; 85
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e5 e5       	ldi	r30, 0x55	; 85
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	81 60       	ori	r24, 0x01	; 1
    1842:	8c 93       	st	X, r24
		Clr_Bit(MCUCR,Pin1);
    1844:	a5 e5       	ldi	r26, 0x55	; 85
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e5 e5       	ldi	r30, 0x55	; 85
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	8d 7f       	andi	r24, 0xFD	; 253
    1850:	8c 93       	st	X, r24
    1852:	23 c0       	rjmp	.+70     	; 0x189a <ExtINT_voidInit+0xba>
		break;

	case INT1:
		Set_Bit(GICR,Pin7);
    1854:	ab e5       	ldi	r26, 0x5B	; 91
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	eb e5       	ldi	r30, 0x5B	; 91
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	80 68       	ori	r24, 0x80	; 128
    1860:	8c 93       	st	X, r24
		Clr_Bit(GICR,Pin6);
    1862:	ab e5       	ldi	r26, 0x5B	; 91
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	eb e5       	ldi	r30, 0x5B	; 91
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8f 7b       	andi	r24, 0xBF	; 191
    186e:	8c 93       	st	X, r24
		Clr_Bit(GICR,Pin5);
    1870:	ab e5       	ldi	r26, 0x5B	; 91
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	eb e5       	ldi	r30, 0x5B	; 91
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	8f 7d       	andi	r24, 0xDF	; 223
    187c:	8c 93       	st	X, r24

		Set_Bit(MCUCR,Pin2);
    187e:	a5 e5       	ldi	r26, 0x55	; 85
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e5 e5       	ldi	r30, 0x55	; 85
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	84 60       	ori	r24, 0x04	; 4
    188a:	8c 93       	st	X, r24
		Clr_Bit(MCUCR,Pin3);
    188c:	a5 e5       	ldi	r26, 0x55	; 85
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e5 e5       	ldi	r30, 0x55	; 85
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	87 7f       	andi	r24, 0xF7	; 247
    1898:	8c 93       	st	X, r24
		break;

	}

}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <LED_Init>:

#include "LED.h"
#include "DIO.h"

void LED_Init(u8 u8LedNumber)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	0f 92       	push	r0
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	89 83       	std	Y+1, r24	; 0x01
	if(u8LedNumber)
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	88 23       	and	r24, r24
    18b6:	59 f0       	breq	.+22     	; 0x18ce <LED_Init+0x28>
	{
		DIO_voidSetDir(PortA,Pin5,Output); /* Set pin 5A as an output pin */
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	65 e0       	ldi	r22, 0x05	; 5
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	0e 94 02 0b 	call	0x1604	; 0x1604 <DIO_voidSetDir>
		DIO_voidWriteVal(PortA,Pin5,Zero_Volt); /* Set pin 5A to 0V */
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	65 e0       	ldi	r22, 0x05	; 5
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
    18cc:	0a c0       	rjmp	.+20     	; 0x18e2 <LED_Init+0x3c>
	}
	else
	{
		DIO_voidSetDir(PortA,Pin4,Output); /* Set pin 4A as an output pin */
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	64 e0       	ldi	r22, 0x04	; 4
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 02 0b 	call	0x1604	; 0x1604 <DIO_voidSetDir>
		DIO_voidWriteVal(PortA,Pin4,Zero_Volt); /* Set pin 4A to 0V */
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	64 e0       	ldi	r22, 0x04	; 4
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
	}
}
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <LED>:
void LED(u8 u8LedNumber, u8 u8State)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <LED+0x6>
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	6a 83       	std	Y+2, r22	; 0x02
	if(u8LedNumber)
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	88 23       	and	r24, r24
    18fc:	31 f0       	breq	.+12     	; 0x190a <LED+0x20>
		DIO_voidWriteVal(PortA,Pin5,u8State); /* Set pin 5A to StateV */
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	65 e0       	ldi	r22, 0x05	; 5
    1902:	4a 81       	ldd	r20, Y+2	; 0x02
    1904:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
    1908:	05 c0       	rjmp	.+10     	; 0x1914 <LED+0x2a>

	else
		DIO_voidWriteVal(PortA,Pin4,u8State); /* Set pin 4A to StateV */
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	64 e0       	ldi	r22, 0x04	; 4
    190e:	4a 81       	ldd	r20, Y+2	; 0x02
    1910:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
}
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <SS_Init>:
#include "Buzzer.h"
#include "LED.h"
#include <avr/delay.h>

void SS_Init()
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDir(PortB,Pin0,Output);
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 02 0b 	call	0x1604	; 0x1604 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin1,Output);
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 02 0b 	call	0x1604	; 0x1604 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin4,Output);
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	64 e0       	ldi	r22, 0x04	; 4
    193e:	41 e0       	ldi	r20, 0x01	; 1
    1940:	0e 94 02 0b 	call	0x1604	; 0x1604 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin5,Output);
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	65 e0       	ldi	r22, 0x05	; 5
    1948:	41 e0       	ldi	r20, 0x01	; 1
    194a:	0e 94 02 0b 	call	0x1604	; 0x1604 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin6,Output);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	66 e0       	ldi	r22, 0x06	; 6
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	0e 94 02 0b 	call	0x1604	; 0x1604 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin7,Output);
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	67 e0       	ldi	r22, 0x07	; 7
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 02 0b 	call	0x1604	; 0x1604 <DIO_voidSetDir>
}
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <SS_Write>:

void SS_Write(u8 u8Number, u8 u8channel)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <SS_Write+0x6>
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	6a 83       	std	Y+2, r22	; 0x02
	if(u8channel) /*1 for SS number 4(Most Sig)*/
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	88 23       	and	r24, r24
    197a:	59 f0       	breq	.+22     	; 0x1992 <SS_Write+0x2a>
	{
		DIO_voidWriteVal(PortB,Pin4,Zero_Volt);
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	64 e0       	ldi	r22, 0x04	; 4
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortB,Pin5,Five_Volt);
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	65 e0       	ldi	r22, 0x05	; 5
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
    1990:	0a c0       	rjmp	.+20     	; 0x19a6 <SS_Write+0x3e>
	}
	else /*0 for SS number 5(Lest Sig)*/
	{
		DIO_voidWriteVal(PortB,Pin4,Five_Volt);
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	64 e0       	ldi	r22, 0x04	; 4
    1996:	41 e0       	ldi	r20, 0x01	; 1
    1998:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortB,Pin5,Zero_Volt);
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	65 e0       	ldi	r22, 0x05	; 5
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
	}

	DIO_voidWriteVal(PortB,Pin0,Get_Bit(u8Number,0)); /*A*/
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	98 2f       	mov	r25, r24
    19aa:	91 70       	andi	r25, 0x01	; 1
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	49 2f       	mov	r20, r25
    19b2:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortB,Pin1,Get_Bit(u8Number,1)); /*B*/
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	82 70       	andi	r24, 0x02	; 2
    19be:	90 70       	andi	r25, 0x00	; 0
    19c0:	95 95       	asr	r25
    19c2:	87 95       	ror	r24
    19c4:	98 2f       	mov	r25, r24
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	49 2f       	mov	r20, r25
    19cc:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortB,Pin6,Get_Bit(u8Number,2)); /*C*/
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	84 70       	andi	r24, 0x04	; 4
    19d8:	90 70       	andi	r25, 0x00	; 0
    19da:	95 95       	asr	r25
    19dc:	87 95       	ror	r24
    19de:	95 95       	asr	r25
    19e0:	87 95       	ror	r24
    19e2:	98 2f       	mov	r25, r24
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	66 e0       	ldi	r22, 0x06	; 6
    19e8:	49 2f       	mov	r20, r25
    19ea:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortB,Pin7,Get_Bit(u8Number,3)); /*D*/
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	88 70       	andi	r24, 0x08	; 8
    19f6:	90 70       	andi	r25, 0x00	; 0
    19f8:	95 95       	asr	r25
    19fa:	87 95       	ror	r24
    19fc:	95 95       	asr	r25
    19fe:	87 95       	ror	r24
    1a00:	95 95       	asr	r25
    1a02:	87 95       	ror	r24
    1a04:	98 2f       	mov	r25, r24
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	67 e0       	ldi	r22, 0x07	; 7
    1a0a:	49 2f       	mov	r20, r25
    1a0c:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>

}
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <SS_Mode>:

void SS_Mode(u8 u8Number)
{
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	c9 55       	subi	r28, 0x59	; 89
    1a28:	d0 40       	sbci	r29, 0x00	; 0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	fe 01       	movw	r30, r28
    1a36:	e7 5a       	subi	r30, 0xA7	; 167
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	80 83       	st	Z, r24
	u8 number,number1,number2,number3;
/* Mode 1 (count-down)*/
 switch(u8Number)
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e7 5a       	subi	r30, 0xA7	; 167
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 81       	ld	r24, Z
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <SS_Mode+0x36>
    1a4e:	17 c4       	rjmp	.+2094   	; 0x227e <SS_Mode+0x864>
 {
 case 1:
	 	LED(0,ON);
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	61 e0       	ldi	r22, 0x01	; 1
    1a54:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LED>
	 	LED(1,OFF);
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LED>
	 	Buzzer(OFF);
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	0e 94 ac 05 	call	0xb58	; 0xb58 <Buzzer>

		for(number=60; number>0; number--)
    1a66:	fe 01       	movw	r30, r28
    1a68:	e8 5a       	subi	r30, 0xA8	; 168
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	8c e3       	ldi	r24, 0x3C	; 60
    1a6e:	80 83       	st	Z, r24
    1a70:	7d c1       	rjmp	.+762    	; 0x1d6c <SS_Mode+0x352>
		{
			number1=number/10;
    1a72:	de 01       	movw	r26, r28
    1a74:	a9 5a       	subi	r26, 0xA9	; 169
    1a76:	bf 4f       	sbci	r27, 0xFF	; 255
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e8 5a       	subi	r30, 0xA8	; 168
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 81       	ld	r24, Z
    1a80:	9a e0       	ldi	r25, 0x0A	; 10
    1a82:	69 2f       	mov	r22, r25
    1a84:	0e 94 65 13 	call	0x26ca	; 0x26ca <__udivmodqi4>
    1a88:	8c 93       	st	X, r24
			number2=number%10;
    1a8a:	de 01       	movw	r26, r28
    1a8c:	aa 5a       	subi	r26, 0xAA	; 170
    1a8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a90:	fe 01       	movw	r30, r28
    1a92:	e8 5a       	subi	r30, 0xA8	; 168
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	80 81       	ld	r24, Z
    1a98:	9a e0       	ldi	r25, 0x0A	; 10
    1a9a:	69 2f       	mov	r22, r25
    1a9c:	0e 94 65 13 	call	0x26ca	; 0x26ca <__udivmodqi4>
    1aa0:	89 2f       	mov	r24, r25
    1aa2:	8c 93       	st	X, r24

			for(number3=0;number3<100;number3++)
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	eb 5a       	subi	r30, 0xAB	; 171
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	10 82       	st	Z, r1
    1aac:	4f c1       	rjmp	.+670    	; 0x1d4c <SS_Mode+0x332>
			{
				/*Set Number 1 on 1st 7-segment*/
				SS_Write(number2, 0);
    1aae:	fe 01       	movw	r30, r28
    1ab0:	ea 5a       	subi	r30, 0xAA	; 170
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 81       	ld	r24, Z
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <SS_Write>
    1abc:	fe 01       	movw	r30, r28
    1abe:	ef 5a       	subi	r30, 0xAF	; 175
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e2       	ldi	r26, 0x20	; 32
    1ac8:	b1 e4       	ldi	r27, 0x41	; 65
    1aca:	80 83       	st	Z, r24
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	a2 83       	std	Z+2, r26	; 0x02
    1ad0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	8e 01       	movw	r16, r28
    1ad4:	03 5b       	subi	r16, 0xB3	; 179
    1ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad8:	fe 01       	movw	r30, r28
    1ada:	ef 5a       	subi	r30, 0xAF	; 175
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a e7       	ldi	r20, 0x7A	; 122
    1aec:	53 e4       	ldi	r21, 0x43	; 67
    1aee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	f8 01       	movw	r30, r16
    1af8:	80 83       	st	Z, r24
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	a2 83       	std	Z+2, r26	; 0x02
    1afe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b00:	fe 01       	movw	r30, r28
    1b02:	e3 5b       	subi	r30, 0xB3	; 179
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e8       	ldi	r20, 0x80	; 128
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b1a:	88 23       	and	r24, r24
    1b1c:	44 f4       	brge	.+16     	; 0x1b2e <SS_Mode+0x114>
		__ticks = 1;
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e5 5b       	subi	r30, 0xB5	; 181
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	80 83       	st	Z, r24
    1b2c:	64 c0       	rjmp	.+200    	; 0x1bf6 <SS_Mode+0x1dc>
	else if (__tmp > 65535)
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e3 5b       	subi	r30, 0xB3	; 179
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	60 81       	ld	r22, Z
    1b36:	71 81       	ldd	r23, Z+1	; 0x01
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	57 e4       	ldi	r21, 0x47	; 71
    1b44:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	0c f0       	brlt	.+2      	; 0x1b4e <SS_Mode+0x134>
    1b4c:	43 c0       	rjmp	.+134    	; 0x1bd4 <SS_Mode+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	fe 01       	movw	r30, r28
    1b50:	ef 5a       	subi	r30, 0xAF	; 175
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e2       	ldi	r20, 0x20	; 32
    1b62:	51 e4       	ldi	r21, 0x41	; 65
    1b64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8e 01       	movw	r16, r28
    1b6e:	05 5b       	subi	r16, 0xB5	; 181
    1b70:	1f 4f       	sbci	r17, 0xFF	; 255
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	f8 01       	movw	r30, r16
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	80 83       	st	Z, r24
    1b84:	1f c0       	rjmp	.+62     	; 0x1bc4 <SS_Mode+0x1aa>
    1b86:	fe 01       	movw	r30, r28
    1b88:	e7 5b       	subi	r30, 0xB7	; 183
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	89 e1       	ldi	r24, 0x19	; 25
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24
    1b94:	fe 01       	movw	r30, r28
    1b96:	e7 5b       	subi	r30, 0xB7	; 183
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <SS_Mode+0x184>
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e7 5b       	subi	r30, 0xB7	; 183
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bac:	de 01       	movw	r26, r28
    1bae:	a5 5b       	subi	r26, 0xB5	; 181
    1bb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e5 5b       	subi	r30, 0xB5	; 181
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	80 81       	ld	r24, Z
    1bba:	91 81       	ldd	r25, Z+1	; 0x01
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	11 96       	adiw	r26, 0x01	; 1
    1bc0:	9c 93       	st	X, r25
    1bc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e5 5b       	subi	r30, 0xB5	; 181
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 81       	ld	r24, Z
    1bcc:	91 81       	ldd	r25, Z+1	; 0x01
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	d1 f6       	brne	.-76     	; 0x1b86 <SS_Mode+0x16c>
    1bd2:	27 c0       	rjmp	.+78     	; 0x1c22 <SS_Mode+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd4:	8e 01       	movw	r16, r28
    1bd6:	05 5b       	subi	r16, 0xB5	; 181
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e3 5b       	subi	r30, 0xB3	; 179
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	60 81       	ld	r22, Z
    1be2:	71 81       	ldd	r23, Z+1	; 0x01
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
    1be6:	93 81       	ldd	r25, Z+3	; 0x03
    1be8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	80 83       	st	Z, r24
    1bf6:	de 01       	movw	r26, r28
    1bf8:	a9 5b       	subi	r26, 0xB9	; 185
    1bfa:	bf 4f       	sbci	r27, 0xFF	; 255
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e5 5b       	subi	r30, 0xB5	; 181
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 81       	ld	r24, Z
    1c04:	91 81       	ldd	r25, Z+1	; 0x01
    1c06:	8d 93       	st	X+, r24
    1c08:	9c 93       	st	X, r25
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e9 5b       	subi	r30, 0xB9	; 185
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 81       	ld	r24, Z
    1c12:	91 81       	ldd	r25, Z+1	; 0x01
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <SS_Mode+0x1fa>
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e9 5b       	subi	r30, 0xB9	; 185
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	80 83       	st	Z, r24

				_delay_ms(10);

				/*Set Number 2 on 2nd 7-segment*/
				SS_Write(number1, 1);
    1c22:	fe 01       	movw	r30, r28
    1c24:	e9 5a       	subi	r30, 0xA9	; 169
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	80 81       	ld	r24, Z
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <SS_Write>
    1c30:	fe 01       	movw	r30, r28
    1c32:	ed 5b       	subi	r30, 0xBD	; 189
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	a0 e2       	ldi	r26, 0x20	; 32
    1c3c:	b1 e4       	ldi	r27, 0x41	; 65
    1c3e:	80 83       	st	Z, r24
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	a2 83       	std	Z+2, r26	; 0x02
    1c44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c46:	8e 01       	movw	r16, r28
    1c48:	01 5c       	subi	r16, 0xC1	; 193
    1c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	ed 5b       	subi	r30, 0xBD	; 189
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a e7       	ldi	r20, 0x7A	; 122
    1c60:	53 e4       	ldi	r21, 0x43	; 67
    1c62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	80 83       	st	Z, r24
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	a2 83       	std	Z+2, r26	; 0x02
    1c72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c74:	fe 01       	movw	r30, r28
    1c76:	ff 96       	adiw	r30, 0x3f	; 63
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <SS_Mode+0x280>
		__ticks = 1;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9e af       	std	Y+62, r25	; 0x3e
    1c96:	8d af       	std	Y+61, r24	; 0x3d
    1c98:	46 c0       	rjmp	.+140    	; 0x1d26 <SS_Mode+0x30c>
	else if (__tmp > 65535)
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	ff 96       	adiw	r30, 0x3f	; 63
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	3f ef       	ldi	r19, 0xFF	; 255
    1caa:	4f e7       	ldi	r20, 0x7F	; 127
    1cac:	57 e4       	ldi	r21, 0x47	; 71
    1cae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	64 f5       	brge	.+88     	; 0x1d0e <SS_Mode+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	ed 5b       	subi	r30, 0xBD	; 189
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e af       	std	Y+62, r25	; 0x3e
    1ce2:	8d af       	std	Y+61, r24	; 0x3d
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <SS_Mode+0x2ea>
    1ce6:	89 e1       	ldi	r24, 0x19	; 25
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9c af       	std	Y+60, r25	; 0x3c
    1cec:	8b af       	std	Y+59, r24	; 0x3b
    1cee:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cf0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <SS_Mode+0x2d8>
    1cf6:	9c af       	std	Y+60, r25	; 0x3c
    1cf8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9e af       	std	Y+62, r25	; 0x3e
    1d02:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d06:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <SS_Mode+0x2cc>
    1d0c:	16 c0       	rjmp	.+44     	; 0x1d3a <SS_Mode+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	fe 01       	movw	r30, r28
    1d10:	ff 96       	adiw	r30, 0x3f	; 63
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9e af       	std	Y+62, r25	; 0x3e
    1d24:	8d af       	std	Y+61, r24	; 0x3d
    1d26:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d28:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d2a:	9a af       	std	Y+58, r25	; 0x3a
    1d2c:	89 af       	std	Y+57, r24	; 0x39
    1d2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d30:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <SS_Mode+0x318>
    1d36:	9a af       	std	Y+58, r25	; 0x3a
    1d38:	89 af       	std	Y+57, r24	; 0x39
		for(number=60; number>0; number--)
		{
			number1=number/10;
			number2=number%10;

			for(number3=0;number3<100;number3++)
    1d3a:	de 01       	movw	r26, r28
    1d3c:	ab 5a       	subi	r26, 0xAB	; 171
    1d3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d40:	fe 01       	movw	r30, r28
    1d42:	eb 5a       	subi	r30, 0xAB	; 171
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	8f 5f       	subi	r24, 0xFF	; 255
    1d4a:	8c 93       	st	X, r24
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	eb 5a       	subi	r30, 0xAB	; 171
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	84 36       	cpi	r24, 0x64	; 100
    1d56:	08 f4       	brcc	.+2      	; 0x1d5a <SS_Mode+0x340>
    1d58:	aa ce       	rjmp	.-684    	; 0x1aae <SS_Mode+0x94>
 case 1:
	 	LED(0,ON);
	 	LED(1,OFF);
	 	Buzzer(OFF);

		for(number=60; number>0; number--)
    1d5a:	de 01       	movw	r26, r28
    1d5c:	a8 5a       	subi	r26, 0xA8	; 168
    1d5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d60:	fe 01       	movw	r30, r28
    1d62:	e8 5a       	subi	r30, 0xA8	; 168
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	81 50       	subi	r24, 0x01	; 1
    1d6a:	8c 93       	st	X, r24
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e8 5a       	subi	r30, 0xA8	; 168
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	88 23       	and	r24, r24
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <SS_Mode+0x360>
    1d78:	7c ce       	rjmp	.-776    	; 0x1a72 <SS_Mode+0x58>
				_delay_ms(10);
			}
		}


	 	LED(0,OFF);
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LED>
	 	LED(1,OFF);
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LED>
	 	Buzzer(ON);
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	0e 94 ac 05 	call	0xb58	; 0xb58 <Buzzer>

		for(number=10; number>0; number--)
    1d90:	fe 01       	movw	r30, r28
    1d92:	e8 5a       	subi	r30, 0xA8	; 168
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	8a e0       	ldi	r24, 0x0A	; 10
    1d98:	80 83       	st	Z, r24
    1d9a:	29 c1       	rjmp	.+594    	; 0x1fee <SS_Mode+0x5d4>
		{
			number1=number/10;
    1d9c:	de 01       	movw	r26, r28
    1d9e:	a9 5a       	subi	r26, 0xA9	; 169
    1da0:	bf 4f       	sbci	r27, 0xFF	; 255
    1da2:	fe 01       	movw	r30, r28
    1da4:	e8 5a       	subi	r30, 0xA8	; 168
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 81       	ld	r24, Z
    1daa:	9a e0       	ldi	r25, 0x0A	; 10
    1dac:	69 2f       	mov	r22, r25
    1dae:	0e 94 65 13 	call	0x26ca	; 0x26ca <__udivmodqi4>
    1db2:	8c 93       	st	X, r24
			number2=number%10;
    1db4:	de 01       	movw	r26, r28
    1db6:	aa 5a       	subi	r26, 0xAA	; 170
    1db8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e8 5a       	subi	r30, 0xA8	; 168
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	9a e0       	ldi	r25, 0x0A	; 10
    1dc4:	69 2f       	mov	r22, r25
    1dc6:	0e 94 65 13 	call	0x26ca	; 0x26ca <__udivmodqi4>
    1dca:	89 2f       	mov	r24, r25
    1dcc:	8c 93       	st	X, r24
			for(number3=0;number3<100;number3++)
    1dce:	fe 01       	movw	r30, r28
    1dd0:	eb 5a       	subi	r30, 0xAB	; 171
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	10 82       	st	Z, r1
    1dd6:	fb c0       	rjmp	.+502    	; 0x1fce <SS_Mode+0x5b4>
			{
				/*Set Number 1 on 1st 7-segment*/
				SS_Write(number2, 0);
    1dd8:	fe 01       	movw	r30, r28
    1dda:	ea 5a       	subi	r30, 0xAA	; 170
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <SS_Write>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e2       	ldi	r26, 0x20	; 32
    1dec:	b1 e4       	ldi	r27, 0x41	; 65
    1dee:	8d ab       	std	Y+53, r24	; 0x35
    1df0:	9e ab       	std	Y+54, r25	; 0x36
    1df2:	af ab       	std	Y+55, r26	; 0x37
    1df4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	6d a9       	ldd	r22, Y+53	; 0x35
    1df8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dfa:	8f a9       	ldd	r24, Y+55	; 0x37
    1dfc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a e7       	ldi	r20, 0x7A	; 122
    1e04:	53 e4       	ldi	r21, 0x43	; 67
    1e06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	89 ab       	std	Y+49, r24	; 0x31
    1e10:	9a ab       	std	Y+50, r25	; 0x32
    1e12:	ab ab       	std	Y+51, r26	; 0x33
    1e14:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e16:	69 a9       	ldd	r22, Y+49	; 0x31
    1e18:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <SS_Mode+0x41e>
		__ticks = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	98 ab       	std	Y+48, r25	; 0x30
    1e34:	8f a7       	std	Y+47, r24	; 0x2f
    1e36:	3f c0       	rjmp	.+126    	; 0x1eb6 <SS_Mode+0x49c>
	else if (__tmp > 65535)
    1e38:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	4c f5       	brge	.+82     	; 0x1ea2 <SS_Mode+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	6d a9       	ldd	r22, Y+53	; 0x35
    1e52:	7e a9       	ldd	r23, Y+54	; 0x36
    1e54:	8f a9       	ldd	r24, Y+55	; 0x37
    1e56:	98 ad       	ldd	r25, Y+56	; 0x38
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	98 ab       	std	Y+48, r25	; 0x30
    1e76:	8f a7       	std	Y+47, r24	; 0x2f
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <SS_Mode+0x47e>
    1e7a:	89 e1       	ldi	r24, 0x19	; 25
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9e a7       	std	Y+46, r25	; 0x2e
    1e80:	8d a7       	std	Y+45, r24	; 0x2d
    1e82:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e84:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <SS_Mode+0x46c>
    1e8a:	9e a7       	std	Y+46, r25	; 0x2e
    1e8c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e90:	98 a9       	ldd	r25, Y+48	; 0x30
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	98 ab       	std	Y+48, r25	; 0x30
    1e96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	69 f7       	brne	.-38     	; 0x1e7a <SS_Mode+0x460>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <SS_Mode+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ea6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	98 ab       	std	Y+48, r25	; 0x30
    1eb4:	8f a7       	std	Y+47, r24	; 0x2f
    1eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eba:	9c a7       	std	Y+44, r25	; 0x2c
    1ebc:	8b a7       	std	Y+43, r24	; 0x2b
    1ebe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <SS_Mode+0x4a8>
    1ec6:	9c a7       	std	Y+44, r25	; 0x2c
    1ec8:	8b a7       	std	Y+43, r24	; 0x2b

				_delay_ms(10);

				/*Set Number 2 on 2nd 7-segment*/
				SS_Write(number1, 1);
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e9 5a       	subi	r30, 0xA9	; 169
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	61 e0       	ldi	r22, 0x01	; 1
    1ed4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <SS_Write>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	a0 e2       	ldi	r26, 0x20	; 32
    1ede:	b1 e4       	ldi	r27, 0x41	; 65
    1ee0:	8f a3       	std	Y+39, r24	; 0x27
    1ee2:	98 a7       	std	Y+40, r25	; 0x28
    1ee4:	a9 a7       	std	Y+41, r26	; 0x29
    1ee6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eea:	78 a5       	ldd	r23, Y+40	; 0x28
    1eec:	89 a5       	ldd	r24, Y+41	; 0x29
    1eee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	4a e7       	ldi	r20, 0x7A	; 122
    1ef6:	53 e4       	ldi	r21, 0x43	; 67
    1ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	8b a3       	std	Y+35, r24	; 0x23
    1f02:	9c a3       	std	Y+36, r25	; 0x24
    1f04:	ad a3       	std	Y+37, r26	; 0x25
    1f06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f08:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f1c:	88 23       	and	r24, r24
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <SS_Mode+0x510>
		__ticks = 1;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9a a3       	std	Y+34, r25	; 0x22
    1f26:	89 a3       	std	Y+33, r24	; 0x21
    1f28:	3f c0       	rjmp	.+126    	; 0x1fa8 <SS_Mode+0x58e>
	else if (__tmp > 65535)
    1f2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f30:	9e a1       	ldd	r25, Y+38	; 0x26
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	3f ef       	ldi	r19, 0xFF	; 255
    1f36:	4f e7       	ldi	r20, 0x7F	; 127
    1f38:	57 e4       	ldi	r21, 0x47	; 71
    1f3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	4c f5       	brge	.+82     	; 0x1f94 <SS_Mode+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f42:	6f a1       	ldd	r22, Y+39	; 0x27
    1f44:	78 a5       	ldd	r23, Y+40	; 0x28
    1f46:	89 a5       	ldd	r24, Y+41	; 0x29
    1f48:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9a a3       	std	Y+34, r25	; 0x22
    1f68:	89 a3       	std	Y+33, r24	; 0x21
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <SS_Mode+0x570>
    1f6c:	89 e1       	ldi	r24, 0x19	; 25
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	98 a3       	std	Y+32, r25	; 0x20
    1f72:	8f 8f       	std	Y+31, r24	; 0x1f
    1f74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f76:	98 a1       	ldd	r25, Y+32	; 0x20
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <SS_Mode+0x55e>
    1f7c:	98 a3       	std	Y+32, r25	; 0x20
    1f7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f80:	89 a1       	ldd	r24, Y+33	; 0x21
    1f82:	9a a1       	ldd	r25, Y+34	; 0x22
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	9a a3       	std	Y+34, r25	; 0x22
    1f88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <SS_Mode+0x552>
    1f92:	14 c0       	rjmp	.+40     	; 0x1fbc <SS_Mode+0x5a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f94:	6b a1       	ldd	r22, Y+35	; 0x23
    1f96:	7c a1       	ldd	r23, Y+36	; 0x24
    1f98:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9a a3       	std	Y+34, r25	; 0x22
    1fa6:	89 a3       	std	Y+33, r24	; 0x21
    1fa8:	89 a1       	ldd	r24, Y+33	; 0x21
    1faa:	9a a1       	ldd	r25, Y+34	; 0x22
    1fac:	9e 8f       	std	Y+30, r25	; 0x1e
    1fae:	8d 8f       	std	Y+29, r24	; 0x1d
    1fb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <SS_Mode+0x59a>
    1fb8:	9e 8f       	std	Y+30, r25	; 0x1e
    1fba:	8d 8f       	std	Y+29, r24	; 0x1d

		for(number=10; number>0; number--)
		{
			number1=number/10;
			number2=number%10;
			for(number3=0;number3<100;number3++)
    1fbc:	de 01       	movw	r26, r28
    1fbe:	ab 5a       	subi	r26, 0xAB	; 171
    1fc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	eb 5a       	subi	r30, 0xAB	; 171
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	80 81       	ld	r24, Z
    1fca:	8f 5f       	subi	r24, 0xFF	; 255
    1fcc:	8c 93       	st	X, r24
    1fce:	fe 01       	movw	r30, r28
    1fd0:	eb 5a       	subi	r30, 0xAB	; 171
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 81       	ld	r24, Z
    1fd6:	84 36       	cpi	r24, 0x64	; 100
    1fd8:	08 f4       	brcc	.+2      	; 0x1fdc <SS_Mode+0x5c2>
    1fda:	fe ce       	rjmp	.-516    	; 0x1dd8 <SS_Mode+0x3be>

	 	LED(0,OFF);
	 	LED(1,OFF);
	 	Buzzer(ON);

		for(number=10; number>0; number--)
    1fdc:	de 01       	movw	r26, r28
    1fde:	a8 5a       	subi	r26, 0xA8	; 168
    1fe0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e8 5a       	subi	r30, 0xA8	; 168
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	81 50       	subi	r24, 0x01	; 1
    1fec:	8c 93       	st	X, r24
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e8 5a       	subi	r30, 0xA8	; 168
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	88 23       	and	r24, r24
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <SS_Mode+0x5e2>
    1ffa:	d0 ce       	rjmp	.-608    	; 0x1d9c <SS_Mode+0x382>

				_delay_ms(10);
			}
		}

	 	LED(0,OFF);
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LED>
	 	LED(1,ON);
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	61 e0       	ldi	r22, 0x01	; 1
    2008:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LED>
	 	Buzzer(OFF);
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	0e 94 ac 05 	call	0xb58	; 0xb58 <Buzzer>

		for(number=60; number>0; number--)
    2012:	fe 01       	movw	r30, r28
    2014:	e8 5a       	subi	r30, 0xA8	; 168
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	8c e3       	ldi	r24, 0x3C	; 60
    201a:	80 83       	st	Z, r24
    201c:	29 c1       	rjmp	.+594    	; 0x2270 <SS_Mode+0x856>
			{
			number1=number/10;
    201e:	de 01       	movw	r26, r28
    2020:	a9 5a       	subi	r26, 0xA9	; 169
    2022:	bf 4f       	sbci	r27, 0xFF	; 255
    2024:	fe 01       	movw	r30, r28
    2026:	e8 5a       	subi	r30, 0xA8	; 168
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	80 81       	ld	r24, Z
    202c:	9a e0       	ldi	r25, 0x0A	; 10
    202e:	69 2f       	mov	r22, r25
    2030:	0e 94 65 13 	call	0x26ca	; 0x26ca <__udivmodqi4>
    2034:	8c 93       	st	X, r24
			number2=number%10;
    2036:	de 01       	movw	r26, r28
    2038:	aa 5a       	subi	r26, 0xAA	; 170
    203a:	bf 4f       	sbci	r27, 0xFF	; 255
    203c:	fe 01       	movw	r30, r28
    203e:	e8 5a       	subi	r30, 0xA8	; 168
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	9a e0       	ldi	r25, 0x0A	; 10
    2046:	69 2f       	mov	r22, r25
    2048:	0e 94 65 13 	call	0x26ca	; 0x26ca <__udivmodqi4>
    204c:	89 2f       	mov	r24, r25
    204e:	8c 93       	st	X, r24
			for(number3=0;number3<100;number3++)
    2050:	fe 01       	movw	r30, r28
    2052:	eb 5a       	subi	r30, 0xAB	; 171
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	10 82       	st	Z, r1
    2058:	fb c0       	rjmp	.+502    	; 0x2250 <SS_Mode+0x836>
				{
				/*Set Number 1 on 1st 7-segment*/
				SS_Write(number2, 0);
    205a:	fe 01       	movw	r30, r28
    205c:	ea 5a       	subi	r30, 0xAA	; 170
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	80 81       	ld	r24, Z
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	0e 94 b4 0c 	call	0x1968	; 0x1968 <SS_Write>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a0 e2       	ldi	r26, 0x20	; 32
    206e:	b1 e4       	ldi	r27, 0x41	; 65
    2070:	89 8f       	std	Y+25, r24	; 0x19
    2072:	9a 8f       	std	Y+26, r25	; 0x1a
    2074:	ab 8f       	std	Y+27, r26	; 0x1b
    2076:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	69 8d       	ldd	r22, Y+25	; 0x19
    207a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    207c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    207e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a e7       	ldi	r20, 0x7A	; 122
    2086:	53 e4       	ldi	r21, 0x43	; 67
    2088:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	8d 8b       	std	Y+21, r24	; 0x15
    2092:	9e 8b       	std	Y+22, r25	; 0x16
    2094:	af 8b       	std	Y+23, r26	; 0x17
    2096:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2098:	6d 89       	ldd	r22, Y+21	; 0x15
    209a:	7e 89       	ldd	r23, Y+22	; 0x16
    209c:	8f 89       	ldd	r24, Y+23	; 0x17
    209e:	98 8d       	ldd	r25, Y+24	; 0x18
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20ac:	88 23       	and	r24, r24
    20ae:	2c f4       	brge	.+10     	; 0x20ba <SS_Mode+0x6a0>
		__ticks = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9c 8b       	std	Y+20, r25	; 0x14
    20b6:	8b 8b       	std	Y+19, r24	; 0x13
    20b8:	3f c0       	rjmp	.+126    	; 0x2138 <SS_Mode+0x71e>
	else if (__tmp > 65535)
    20ba:	6d 89       	ldd	r22, Y+21	; 0x15
    20bc:	7e 89       	ldd	r23, Y+22	; 0x16
    20be:	8f 89       	ldd	r24, Y+23	; 0x17
    20c0:	98 8d       	ldd	r25, Y+24	; 0x18
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	57 e4       	ldi	r21, 0x47	; 71
    20ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20ce:	18 16       	cp	r1, r24
    20d0:	4c f5       	brge	.+82     	; 0x2124 <SS_Mode+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d2:	69 8d       	ldd	r22, Y+25	; 0x19
    20d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9c 8b       	std	Y+20, r25	; 0x14
    20f8:	8b 8b       	std	Y+19, r24	; 0x13
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <SS_Mode+0x700>
    20fc:	89 e1       	ldi	r24, 0x19	; 25
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9a 8b       	std	Y+18, r25	; 0x12
    2102:	89 8b       	std	Y+17, r24	; 0x11
    2104:	89 89       	ldd	r24, Y+17	; 0x11
    2106:	9a 89       	ldd	r25, Y+18	; 0x12
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <SS_Mode+0x6ee>
    210c:	9a 8b       	std	Y+18, r25	; 0x12
    210e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2110:	8b 89       	ldd	r24, Y+19	; 0x13
    2112:	9c 89       	ldd	r25, Y+20	; 0x14
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	9c 8b       	std	Y+20, r25	; 0x14
    2118:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	8b 89       	ldd	r24, Y+19	; 0x13
    211c:	9c 89       	ldd	r25, Y+20	; 0x14
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	69 f7       	brne	.-38     	; 0x20fc <SS_Mode+0x6e2>
    2122:	14 c0       	rjmp	.+40     	; 0x214c <SS_Mode+0x732>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2124:	6d 89       	ldd	r22, Y+21	; 0x15
    2126:	7e 89       	ldd	r23, Y+22	; 0x16
    2128:	8f 89       	ldd	r24, Y+23	; 0x17
    212a:	98 8d       	ldd	r25, Y+24	; 0x18
    212c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9c 8b       	std	Y+20, r25	; 0x14
    2136:	8b 8b       	std	Y+19, r24	; 0x13
    2138:	8b 89       	ldd	r24, Y+19	; 0x13
    213a:	9c 89       	ldd	r25, Y+20	; 0x14
    213c:	98 8b       	std	Y+16, r25	; 0x10
    213e:	8f 87       	std	Y+15, r24	; 0x0f
    2140:	8f 85       	ldd	r24, Y+15	; 0x0f
    2142:	98 89       	ldd	r25, Y+16	; 0x10
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <SS_Mode+0x72a>
    2148:	98 8b       	std	Y+16, r25	; 0x10
    214a:	8f 87       	std	Y+15, r24	; 0x0f

				_delay_ms(10);

				/*Set Number 2 on 2nd 7-segment*/
				SS_Write(number1, 1);
    214c:	fe 01       	movw	r30, r28
    214e:	e9 5a       	subi	r30, 0xA9	; 169
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 81       	ld	r24, Z
    2154:	61 e0       	ldi	r22, 0x01	; 1
    2156:	0e 94 b4 0c 	call	0x1968	; 0x1968 <SS_Write>
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a0 e2       	ldi	r26, 0x20	; 32
    2160:	b1 e4       	ldi	r27, 0x41	; 65
    2162:	8b 87       	std	Y+11, r24	; 0x0b
    2164:	9c 87       	std	Y+12, r25	; 0x0c
    2166:	ad 87       	std	Y+13, r26	; 0x0d
    2168:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216a:	6b 85       	ldd	r22, Y+11	; 0x0b
    216c:	7c 85       	ldd	r23, Y+12	; 0x0c
    216e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2170:	9e 85       	ldd	r25, Y+14	; 0x0e
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	4a e7       	ldi	r20, 0x7A	; 122
    2178:	53 e4       	ldi	r21, 0x43	; 67
    217a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	8f 83       	std	Y+7, r24	; 0x07
    2184:	98 87       	std	Y+8, r25	; 0x08
    2186:	a9 87       	std	Y+9, r26	; 0x09
    2188:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    218a:	6f 81       	ldd	r22, Y+7	; 0x07
    218c:	78 85       	ldd	r23, Y+8	; 0x08
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e8       	ldi	r20, 0x80	; 128
    2198:	5f e3       	ldi	r21, 0x3F	; 63
    219a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    219e:	88 23       	and	r24, r24
    21a0:	2c f4       	brge	.+10     	; 0x21ac <SS_Mode+0x792>
		__ticks = 1;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	3f c0       	rjmp	.+126    	; 0x222a <SS_Mode+0x810>
	else if (__tmp > 65535)
    21ac:	6f 81       	ldd	r22, Y+7	; 0x07
    21ae:	78 85       	ldd	r23, Y+8	; 0x08
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	4f e7       	ldi	r20, 0x7F	; 127
    21ba:	57 e4       	ldi	r21, 0x47	; 71
    21bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	4c f5       	brge	.+82     	; 0x2216 <SS_Mode+0x7fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e2       	ldi	r20, 0x20	; 32
    21d2:	51 e4       	ldi	r21, 0x41	; 65
    21d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9e 83       	std	Y+6, r25	; 0x06
    21ea:	8d 83       	std	Y+5, r24	; 0x05
    21ec:	0f c0       	rjmp	.+30     	; 0x220c <SS_Mode+0x7f2>
    21ee:	89 e1       	ldi	r24, 0x19	; 25
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9c 83       	std	Y+4, r25	; 0x04
    21f4:	8b 83       	std	Y+3, r24	; 0x03
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <SS_Mode+0x7e0>
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	69 f7       	brne	.-38     	; 0x21ee <SS_Mode+0x7d4>
    2214:	14 c0       	rjmp	.+40     	; 0x223e <SS_Mode+0x824>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <SS_Mode+0x81c>
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01

		for(number=60; number>0; number--)
			{
			number1=number/10;
			number2=number%10;
			for(number3=0;number3<100;number3++)
    223e:	de 01       	movw	r26, r28
    2240:	ab 5a       	subi	r26, 0xAB	; 171
    2242:	bf 4f       	sbci	r27, 0xFF	; 255
    2244:	fe 01       	movw	r30, r28
    2246:	eb 5a       	subi	r30, 0xAB	; 171
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	8f 5f       	subi	r24, 0xFF	; 255
    224e:	8c 93       	st	X, r24
    2250:	fe 01       	movw	r30, r28
    2252:	eb 5a       	subi	r30, 0xAB	; 171
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	84 36       	cpi	r24, 0x64	; 100
    225a:	08 f4       	brcc	.+2      	; 0x225e <SS_Mode+0x844>
    225c:	fe ce       	rjmp	.-516    	; 0x205a <SS_Mode+0x640>

	 	LED(0,OFF);
	 	LED(1,ON);
	 	Buzzer(OFF);

		for(number=60; number>0; number--)
    225e:	de 01       	movw	r26, r28
    2260:	a8 5a       	subi	r26, 0xA8	; 168
    2262:	bf 4f       	sbci	r27, 0xFF	; 255
    2264:	fe 01       	movw	r30, r28
    2266:	e8 5a       	subi	r30, 0xA8	; 168
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 81       	ld	r24, Z
    226c:	81 50       	subi	r24, 0x01	; 1
    226e:	8c 93       	st	X, r24
    2270:	fe 01       	movw	r30, r28
    2272:	e8 5a       	subi	r30, 0xA8	; 168
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 81       	ld	r24, Z
    2278:	88 23       	and	r24, r24
    227a:	09 f0       	breq	.+2      	; 0x227e <SS_Mode+0x864>
    227c:	d0 ce       	rjmp	.-608    	; 0x201e <SS_Mode+0x604>
				}
			}
		break;

 	 }
 }
    227e:	c7 5a       	subi	r28, 0xA7	; 167
    2280:	df 4f       	sbci	r29, 0xFF	; 255
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	08 95       	ret

00002296 <__vector_1>:

/*void __vector_1(void) __attribute__((signal,naked));*/
void __vector_2(void) __attribute__((signal,naked));

void __vector_1(void)
{
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	2e 97       	sbiw	r28, 0x0e	; 14
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	de bf       	out	0x3e, r29	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	cd bf       	out	0x3d, r28	; 61
	LED_Init(0);
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <LED_Init>
	LED(0,ON);
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	61 e0       	ldi	r22, 0x01	; 1
    22b4:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LED>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	aa e7       	ldi	r26, 0x7A	; 122
    22be:	b4 e4       	ldi	r27, 0x44	; 68
    22c0:	8b 87       	std	Y+11, r24	; 0x0b
    22c2:	9c 87       	std	Y+12, r25	; 0x0c
    22c4:	ad 87       	std	Y+13, r26	; 0x0d
    22c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    22cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	4a e7       	ldi	r20, 0x7A	; 122
    22d6:	53 e4       	ldi	r21, 0x43	; 67
    22d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	8f 83       	std	Y+7, r24	; 0x07
    22e2:	98 87       	std	Y+8, r25	; 0x08
    22e4:	a9 87       	std	Y+9, r26	; 0x09
    22e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22e8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ea:	78 85       	ldd	r23, Y+8	; 0x08
    22ec:	89 85       	ldd	r24, Y+9	; 0x09
    22ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e8       	ldi	r20, 0x80	; 128
    22f6:	5f e3       	ldi	r21, 0x3F	; 63
    22f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22fc:	88 23       	and	r24, r24
    22fe:	2c f4       	brge	.+10     	; 0x230a <__vector_1+0x74>
		__ticks = 1;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
    2308:	3f c0       	rjmp	.+126    	; 0x2388 <__vector_1+0xf2>
	else if (__tmp > 65535)
    230a:	6f 81       	ldd	r22, Y+7	; 0x07
    230c:	78 85       	ldd	r23, Y+8	; 0x08
    230e:	89 85       	ldd	r24, Y+9	; 0x09
    2310:	9a 85       	ldd	r25, Y+10	; 0x0a
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	3f ef       	ldi	r19, 0xFF	; 255
    2316:	4f e7       	ldi	r20, 0x7F	; 127
    2318:	57 e4       	ldi	r21, 0x47	; 71
    231a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    231e:	18 16       	cp	r1, r24
    2320:	4c f5       	brge	.+82     	; 0x2374 <__vector_1+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2322:	6b 85       	ldd	r22, Y+11	; 0x0b
    2324:	7c 85       	ldd	r23, Y+12	; 0x0c
    2326:	8d 85       	ldd	r24, Y+13	; 0x0d
    2328:	9e 85       	ldd	r25, Y+14	; 0x0e
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e2       	ldi	r20, 0x20	; 32
    2330:	51 e4       	ldi	r21, 0x41	; 65
    2332:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	bc 01       	movw	r22, r24
    233c:	cd 01       	movw	r24, r26
    233e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9e 83       	std	Y+6, r25	; 0x06
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	0f c0       	rjmp	.+30     	; 0x236a <__vector_1+0xd4>
    234c:	89 e1       	ldi	r24, 0x19	; 25
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9c 83       	std	Y+4, r25	; 0x04
    2352:	8b 83       	std	Y+3, r24	; 0x03
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <__vector_1+0xc2>
    235c:	9c 83       	std	Y+4, r25	; 0x04
    235e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	9e 83       	std	Y+6, r25	; 0x06
    2368:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	9e 81       	ldd	r25, Y+6	; 0x06
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	69 f7       	brne	.-38     	; 0x234c <__vector_1+0xb6>
    2372:	14 c0       	rjmp	.+40     	; 0x239c <__vector_1+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2374:	6f 81       	ldd	r22, Y+7	; 0x07
    2376:	78 85       	ldd	r23, Y+8	; 0x08
    2378:	89 85       	ldd	r24, Y+9	; 0x09
    237a:	9a 85       	ldd	r25, Y+10	; 0x0a
    237c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	8d 81       	ldd	r24, Y+5	; 0x05
    238a:	9e 81       	ldd	r25, Y+6	; 0x06
    238c:	9a 83       	std	Y+2, r25	; 0x02
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	9a 81       	ldd	r25, Y+2	; 0x02
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <__vector_1+0xfe>
    2398:	9a 83       	std	Y+2, r25	; 0x02
    239a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LED(0,OFF);
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LED>
}
    23a4:	2e 96       	adiw	r28, 0x0e	; 14
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <__vector_2>:
void __vector_2(void)
{
	LED_Init(1);
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <LED_Init>
	LED(1,ON);
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	61 e0       	ldi	r22, 0x01	; 1
    23c0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LED>
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	aa e7       	ldi	r26, 0x7A	; 122
    23ca:	b4 e4       	ldi	r27, 0x44	; 68
    23cc:	8b 87       	std	Y+11, r24	; 0x0b
    23ce:	9c 87       	std	Y+12, r25	; 0x0c
    23d0:	ad 87       	std	Y+13, r26	; 0x0d
    23d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23da:	9e 85       	ldd	r25, Y+14	; 0x0e
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	4a e7       	ldi	r20, 0x7A	; 122
    23e2:	53 e4       	ldi	r21, 0x43	; 67
    23e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	8f 83       	std	Y+7, r24	; 0x07
    23ee:	98 87       	std	Y+8, r25	; 0x08
    23f0:	a9 87       	std	Y+9, r26	; 0x09
    23f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23f4:	6f 81       	ldd	r22, Y+7	; 0x07
    23f6:	78 85       	ldd	r23, Y+8	; 0x08
    23f8:	89 85       	ldd	r24, Y+9	; 0x09
    23fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e8       	ldi	r20, 0x80	; 128
    2402:	5f e3       	ldi	r21, 0x3F	; 63
    2404:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2408:	88 23       	and	r24, r24
    240a:	2c f4       	brge	.+10     	; 0x2416 <__vector_2+0x60>
		__ticks = 1;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
    2414:	3f c0       	rjmp	.+126    	; 0x2494 <__vector_2+0xde>
	else if (__tmp > 65535)
    2416:	6f 81       	ldd	r22, Y+7	; 0x07
    2418:	78 85       	ldd	r23, Y+8	; 0x08
    241a:	89 85       	ldd	r24, Y+9	; 0x09
    241c:	9a 85       	ldd	r25, Y+10	; 0x0a
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	3f ef       	ldi	r19, 0xFF	; 255
    2422:	4f e7       	ldi	r20, 0x7F	; 127
    2424:	57 e4       	ldi	r21, 0x47	; 71
    2426:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    242a:	18 16       	cp	r1, r24
    242c:	4c f5       	brge	.+82     	; 0x2480 <__vector_2+0xca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2430:	7c 85       	ldd	r23, Y+12	; 0x0c
    2432:	8d 85       	ldd	r24, Y+13	; 0x0d
    2434:	9e 85       	ldd	r25, Y+14	; 0x0e
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e2       	ldi	r20, 0x20	; 32
    243c:	51 e4       	ldi	r21, 0x41	; 65
    243e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	bc 01       	movw	r22, r24
    2448:	cd 01       	movw	r24, r26
    244a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	0f c0       	rjmp	.+30     	; 0x2476 <__vector_2+0xc0>
    2458:	89 e1       	ldi	r24, 0x19	; 25
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	9c 83       	std	Y+4, r25	; 0x04
    245e:	8b 83       	std	Y+3, r24	; 0x03
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	9c 81       	ldd	r25, Y+4	; 0x04
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <__vector_2+0xae>
    2468:	9c 83       	std	Y+4, r25	; 0x04
    246a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246c:	8d 81       	ldd	r24, Y+5	; 0x05
    246e:	9e 81       	ldd	r25, Y+6	; 0x06
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	9e 83       	std	Y+6, r25	; 0x06
    2474:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	69 f7       	brne	.-38     	; 0x2458 <__vector_2+0xa2>
    247e:	14 c0       	rjmp	.+40     	; 0x24a8 <__vector_2+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2480:	6f 81       	ldd	r22, Y+7	; 0x07
    2482:	78 85       	ldd	r23, Y+8	; 0x08
    2484:	89 85       	ldd	r24, Y+9	; 0x09
    2486:	9a 85       	ldd	r25, Y+10	; 0x0a
    2488:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
    2494:	8d 81       	ldd	r24, Y+5	; 0x05
    2496:	9e 81       	ldd	r25, Y+6	; 0x06
    2498:	9a 83       	std	Y+2, r25	; 0x02
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <__vector_2+0xea>
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LED(1,OFF);
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	60 e0       	ldi	r22, 0x00	; 0
    24ac:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LED>

000024b0 <main>:
}

int main()
{
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	6c 97       	sbiw	r28, 0x1c	; 28
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
	Global_Interrupt_Enable();
    24c4:	af e5       	ldi	r26, 0x5F	; 95
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	ef e5       	ldi	r30, 0x5F	; 95
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	80 68       	ori	r24, 0x80	; 128
    24d0:	8c 93       	st	X, r24
	ExtINT_voidInit(INT1);
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ExtINT_voidInit>
	DIO_voidSetDir(PortA,Pin7,Output);
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	67 e0       	ldi	r22, 0x07	; 7
    24dc:	41 e0       	ldi	r20, 0x01	; 1
    24de:	0e 94 02 0b 	call	0x1604	; 0x1604 <DIO_voidSetDir>
	DIO_voidWriteVal(PortA,Pin7,Zero_Volt);
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	67 e0       	ldi	r22, 0x07	; 7
    24e6:	40 e0       	ldi	r20, 0x00	; 0
    24e8:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>

	while(1)
	{
		DIO_voidWriteVal(PortA,Pin7,Five_Volt);
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	67 e0       	ldi	r22, 0x07	; 7
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	aa e7       	ldi	r26, 0x7A	; 122
    24fc:	b4 e4       	ldi	r27, 0x44	; 68
    24fe:	89 8f       	std	Y+25, r24	; 0x19
    2500:	9a 8f       	std	Y+26, r25	; 0x1a
    2502:	ab 8f       	std	Y+27, r26	; 0x1b
    2504:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2506:	69 8d       	ldd	r22, Y+25	; 0x19
    2508:	7a 8d       	ldd	r23, Y+26	; 0x1a
    250a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    250c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	4a e7       	ldi	r20, 0x7A	; 122
    2514:	53 e4       	ldi	r21, 0x43	; 67
    2516:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	8d 8b       	std	Y+21, r24	; 0x15
    2520:	9e 8b       	std	Y+22, r25	; 0x16
    2522:	af 8b       	std	Y+23, r26	; 0x17
    2524:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2526:	6d 89       	ldd	r22, Y+21	; 0x15
    2528:	7e 89       	ldd	r23, Y+22	; 0x16
    252a:	8f 89       	ldd	r24, Y+23	; 0x17
    252c:	98 8d       	ldd	r25, Y+24	; 0x18
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	2c f4       	brge	.+10     	; 0x2548 <main+0x98>
		__ticks = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9c 8b       	std	Y+20, r25	; 0x14
    2544:	8b 8b       	std	Y+19, r24	; 0x13
    2546:	3f c0       	rjmp	.+126    	; 0x25c6 <main+0x116>
	else if (__tmp > 65535)
    2548:	6d 89       	ldd	r22, Y+21	; 0x15
    254a:	7e 89       	ldd	r23, Y+22	; 0x16
    254c:	8f 89       	ldd	r24, Y+23	; 0x17
    254e:	98 8d       	ldd	r25, Y+24	; 0x18
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3f ef       	ldi	r19, 0xFF	; 255
    2554:	4f e7       	ldi	r20, 0x7F	; 127
    2556:	57 e4       	ldi	r21, 0x47	; 71
    2558:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    255c:	18 16       	cp	r1, r24
    255e:	4c f5       	brge	.+82     	; 0x25b2 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	69 8d       	ldd	r22, Y+25	; 0x19
    2562:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2564:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2566:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e2       	ldi	r20, 0x20	; 32
    256e:	51 e4       	ldi	r21, 0x41	; 65
    2570:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9c 8b       	std	Y+20, r25	; 0x14
    2586:	8b 8b       	std	Y+19, r24	; 0x13
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <main+0xf8>
    258a:	89 e1       	ldi	r24, 0x19	; 25
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9a 8b       	std	Y+18, r25	; 0x12
    2590:	89 8b       	std	Y+17, r24	; 0x11
    2592:	89 89       	ldd	r24, Y+17	; 0x11
    2594:	9a 89       	ldd	r25, Y+18	; 0x12
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <main+0xe6>
    259a:	9a 8b       	std	Y+18, r25	; 0x12
    259c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259e:	8b 89       	ldd	r24, Y+19	; 0x13
    25a0:	9c 89       	ldd	r25, Y+20	; 0x14
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	9c 8b       	std	Y+20, r25	; 0x14
    25a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a8:	8b 89       	ldd	r24, Y+19	; 0x13
    25aa:	9c 89       	ldd	r25, Y+20	; 0x14
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	69 f7       	brne	.-38     	; 0x258a <main+0xda>
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b2:	6d 89       	ldd	r22, Y+21	; 0x15
    25b4:	7e 89       	ldd	r23, Y+22	; 0x16
    25b6:	8f 89       	ldd	r24, Y+23	; 0x17
    25b8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9c 8b       	std	Y+20, r25	; 0x14
    25c4:	8b 8b       	std	Y+19, r24	; 0x13
    25c6:	8b 89       	ldd	r24, Y+19	; 0x13
    25c8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ca:	98 8b       	std	Y+16, r25	; 0x10
    25cc:	8f 87       	std	Y+15, r24	; 0x0f
    25ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d0:	98 89       	ldd	r25, Y+16	; 0x10
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <main+0x122>
    25d6:	98 8b       	std	Y+16, r25	; 0x10
    25d8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		DIO_voidWriteVal(PortA,Pin7,Zero_Volt);
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	67 e0       	ldi	r22, 0x07	; 7
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	0e 94 14 0a 	call	0x1428	; 0x1428 <DIO_voidWriteVal>
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	aa e7       	ldi	r26, 0x7A	; 122
    25ea:	b4 e4       	ldi	r27, 0x44	; 68
    25ec:	8b 87       	std	Y+11, r24	; 0x0b
    25ee:	9c 87       	std	Y+12, r25	; 0x0c
    25f0:	ad 87       	std	Y+13, r26	; 0x0d
    25f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	4a e7       	ldi	r20, 0x7A	; 122
    2602:	53 e4       	ldi	r21, 0x43	; 67
    2604:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	8f 83       	std	Y+7, r24	; 0x07
    260e:	98 87       	std	Y+8, r25	; 0x08
    2610:	a9 87       	std	Y+9, r26	; 0x09
    2612:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2614:	6f 81       	ldd	r22, Y+7	; 0x07
    2616:	78 85       	ldd	r23, Y+8	; 0x08
    2618:	89 85       	ldd	r24, Y+9	; 0x09
    261a:	9a 85       	ldd	r25, Y+10	; 0x0a
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e8       	ldi	r20, 0x80	; 128
    2622:	5f e3       	ldi	r21, 0x3F	; 63
    2624:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2628:	88 23       	and	r24, r24
    262a:	2c f4       	brge	.+10     	; 0x2636 <main+0x186>
		__ticks = 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
    2634:	3f c0       	rjmp	.+126    	; 0x26b4 <main+0x204>
	else if (__tmp > 65535)
    2636:	6f 81       	ldd	r22, Y+7	; 0x07
    2638:	78 85       	ldd	r23, Y+8	; 0x08
    263a:	89 85       	ldd	r24, Y+9	; 0x09
    263c:	9a 85       	ldd	r25, Y+10	; 0x0a
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	3f ef       	ldi	r19, 0xFF	; 255
    2642:	4f e7       	ldi	r20, 0x7F	; 127
    2644:	57 e4       	ldi	r21, 0x47	; 71
    2646:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    264a:	18 16       	cp	r1, r24
    264c:	4c f5       	brge	.+82     	; 0x26a0 <main+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2650:	7c 85       	ldd	r23, Y+12	; 0x0c
    2652:	8d 85       	ldd	r24, Y+13	; 0x0d
    2654:	9e 85       	ldd	r25, Y+14	; 0x0e
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e2       	ldi	r20, 0x20	; 32
    265c:	51 e4       	ldi	r21, 0x41	; 65
    265e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	bc 01       	movw	r22, r24
    2668:	cd 01       	movw	r24, r26
    266a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
    2676:	0f c0       	rjmp	.+30     	; 0x2696 <main+0x1e6>
    2678:	89 e1       	ldi	r24, 0x19	; 25
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	9c 83       	std	Y+4, r25	; 0x04
    267e:	8b 83       	std	Y+3, r24	; 0x03
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	f1 f7       	brne	.-4      	; 0x2684 <main+0x1d4>
    2688:	9c 83       	std	Y+4, r25	; 0x04
    268a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268c:	8d 81       	ldd	r24, Y+5	; 0x05
    268e:	9e 81       	ldd	r25, Y+6	; 0x06
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2696:	8d 81       	ldd	r24, Y+5	; 0x05
    2698:	9e 81       	ldd	r25, Y+6	; 0x06
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	69 f7       	brne	.-38     	; 0x2678 <main+0x1c8>
    269e:	26 cf       	rjmp	.-436    	; 0x24ec <main+0x3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9e 83       	std	Y+6, r25	; 0x06
    26b2:	8d 83       	std	Y+5, r24	; 0x05
    26b4:	8d 81       	ldd	r24, Y+5	; 0x05
    26b6:	9e 81       	ldd	r25, Y+6	; 0x06
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	89 83       	std	Y+1, r24	; 0x01
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <main+0x210>
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	11 cf       	rjmp	.-478    	; 0x24ec <main+0x3c>

000026ca <__udivmodqi4>:
    26ca:	99 1b       	sub	r25, r25
    26cc:	79 e0       	ldi	r23, 0x09	; 9
    26ce:	04 c0       	rjmp	.+8      	; 0x26d8 <__udivmodqi4_ep>

000026d0 <__udivmodqi4_loop>:
    26d0:	99 1f       	adc	r25, r25
    26d2:	96 17       	cp	r25, r22
    26d4:	08 f0       	brcs	.+2      	; 0x26d8 <__udivmodqi4_ep>
    26d6:	96 1b       	sub	r25, r22

000026d8 <__udivmodqi4_ep>:
    26d8:	88 1f       	adc	r24, r24
    26da:	7a 95       	dec	r23
    26dc:	c9 f7       	brne	.-14     	; 0x26d0 <__udivmodqi4_loop>
    26de:	80 95       	com	r24
    26e0:	08 95       	ret

000026e2 <__prologue_saves__>:
    26e2:	2f 92       	push	r2
    26e4:	3f 92       	push	r3
    26e6:	4f 92       	push	r4
    26e8:	5f 92       	push	r5
    26ea:	6f 92       	push	r6
    26ec:	7f 92       	push	r7
    26ee:	8f 92       	push	r8
    26f0:	9f 92       	push	r9
    26f2:	af 92       	push	r10
    26f4:	bf 92       	push	r11
    26f6:	cf 92       	push	r12
    26f8:	df 92       	push	r13
    26fa:	ef 92       	push	r14
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	ca 1b       	sub	r28, r26
    270c:	db 0b       	sbc	r29, r27
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	09 94       	ijmp

0000271a <__epilogue_restores__>:
    271a:	2a 88       	ldd	r2, Y+18	; 0x12
    271c:	39 88       	ldd	r3, Y+17	; 0x11
    271e:	48 88       	ldd	r4, Y+16	; 0x10
    2720:	5f 84       	ldd	r5, Y+15	; 0x0f
    2722:	6e 84       	ldd	r6, Y+14	; 0x0e
    2724:	7d 84       	ldd	r7, Y+13	; 0x0d
    2726:	8c 84       	ldd	r8, Y+12	; 0x0c
    2728:	9b 84       	ldd	r9, Y+11	; 0x0b
    272a:	aa 84       	ldd	r10, Y+10	; 0x0a
    272c:	b9 84       	ldd	r11, Y+9	; 0x09
    272e:	c8 84       	ldd	r12, Y+8	; 0x08
    2730:	df 80       	ldd	r13, Y+7	; 0x07
    2732:	ee 80       	ldd	r14, Y+6	; 0x06
    2734:	fd 80       	ldd	r15, Y+5	; 0x05
    2736:	0c 81       	ldd	r16, Y+4	; 0x04
    2738:	1b 81       	ldd	r17, Y+3	; 0x03
    273a:	aa 81       	ldd	r26, Y+2	; 0x02
    273c:	b9 81       	ldd	r27, Y+1	; 0x01
    273e:	ce 0f       	add	r28, r30
    2740:	d1 1d       	adc	r29, r1
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	ed 01       	movw	r28, r26
    274e:	08 95       	ret

00002750 <_exit>:
    2750:	f8 94       	cli

00002752 <__stop_program>:
    2752:	ff cf       	rjmp	.-2      	; 0x2752 <__stop_program>
