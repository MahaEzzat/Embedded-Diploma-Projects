
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003efa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00003efa  00003f8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800070  00800070  00003f9e  2**0
                  ALLOC
  3 .stab         00003a74  00000000  00000000  00003fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000de9  00000000  00000000  00007a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000087fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000893d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a6f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b5e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c390  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c77d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__vector_1>
       8:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <__vector_18>
      4c:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <main>
      8a:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
#include "ADC.h"
#include "Utils.h"


void ADC_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Clock Devision Factor*/
	Set_Bit(ADCSRA,Pin0);
     b4e:	a6 e2       	ldi	r26, 0x26	; 38
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e6 e2       	ldi	r30, 0x26	; 38
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,Pin1);
     b5c:	a6 e2       	ldi	r26, 0x26	; 38
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e6 e2       	ldi	r30, 0x26	; 38
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,Pin2);
     b6a:	a6 e2       	ldi	r26, 0x26	; 38
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e6 e2       	ldi	r30, 0x26	; 38
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	84 60       	ori	r24, 0x04	; 4
     b76:	8c 93       	st	X, r24

	/*Left Adjustment*/
	Set_Bit(ADMUX,Pin5);
     b78:	a7 e2       	ldi	r26, 0x27	; 39
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e7 e2       	ldi	r30, 0x27	; 39
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 62       	ori	r24, 0x20	; 32
     b84:	8c 93       	st	X, r24

	/*Ref. Voltage*/
	Set_Bit(ADMUX,Pin6);
     b86:	a7 e2       	ldi	r26, 0x27	; 39
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e7 e2       	ldi	r30, 0x27	; 39
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 64       	ori	r24, 0x40	; 64
     b92:	8c 93       	st	X, r24
	Clr_Bit(ADMUX,Pin7);
     b94:	a7 e2       	ldi	r26, 0x27	; 39
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e7 e2       	ldi	r30, 0x27	; 39
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 77       	andi	r24, 0x7F	; 127
     ba0:	8c 93       	st	X, r24

	/*Enable ADC*/
	Set_Bit(ADCSRA,Pin7);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24

}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 u8Channel)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
	/*define channel*/
	Assign_Bit(ADMUX,Pin0,Get_Bit(u8Channel,Pin0));
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	81 70       	andi	r24, 0x01	; 1
     bca:	90 70       	andi	r25, 0x00	; 0
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	39 f4       	brne	.+14     	; 0xbde <ADC_voidStartConversion+0x28>
     bd0:	a7 e2       	ldi	r26, 0x27	; 39
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e7 e2       	ldi	r30, 0x27	; 39
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8e 7f       	andi	r24, 0xFE	; 254
     bdc:	8c 93       	st	X, r24
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	81 70       	andi	r24, 0x01	; 1
     be6:	90 70       	andi	r25, 0x00	; 0
     be8:	88 23       	and	r24, r24
     bea:	39 f0       	breq	.+14     	; 0xbfa <ADC_voidStartConversion+0x44>
     bec:	a7 e2       	ldi	r26, 0x27	; 39
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e7 e2       	ldi	r30, 0x27	; 39
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	81 60       	ori	r24, 0x01	; 1
     bf8:	8c 93       	st	X, r24
	Assign_Bit(ADMUX,Pin1,Get_Bit(u8Channel,Pin1));
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	82 70       	andi	r24, 0x02	; 2
     c02:	90 70       	andi	r25, 0x00	; 0
     c04:	95 95       	asr	r25
     c06:	87 95       	ror	r24
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	39 f4       	brne	.+14     	; 0xc1a <ADC_voidStartConversion+0x64>
     c0c:	a7 e2       	ldi	r26, 0x27	; 39
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e2       	ldi	r30, 0x27	; 39
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8d 7f       	andi	r24, 0xFD	; 253
     c18:	8c 93       	st	X, r24
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	82 70       	andi	r24, 0x02	; 2
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	95 95       	asr	r25
     c26:	87 95       	ror	r24
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	91 05       	cpc	r25, r1
     c2c:	39 f4       	brne	.+14     	; 0xc3c <ADC_voidStartConversion+0x86>
     c2e:	a7 e2       	ldi	r26, 0x27	; 39
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e7 e2       	ldi	r30, 0x27	; 39
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	82 60       	ori	r24, 0x02	; 2
     c3a:	8c 93       	st	X, r24
	Assign_Bit(ADMUX,Pin2,Get_Bit(u8Channel,Pin2));
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	88 2f       	mov	r24, r24
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	84 70       	andi	r24, 0x04	; 4
     c44:	90 70       	andi	r25, 0x00	; 0
     c46:	95 95       	asr	r25
     c48:	87 95       	ror	r24
     c4a:	95 95       	asr	r25
     c4c:	87 95       	ror	r24
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	39 f4       	brne	.+14     	; 0xc60 <ADC_voidStartConversion+0xaa>
     c52:	a7 e2       	ldi	r26, 0x27	; 39
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e7 e2       	ldi	r30, 0x27	; 39
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	8b 7f       	andi	r24, 0xFB	; 251
     c5e:	8c 93       	st	X, r24
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	84 70       	andi	r24, 0x04	; 4
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	95 95       	asr	r25
     c6c:	87 95       	ror	r24
     c6e:	95 95       	asr	r25
     c70:	87 95       	ror	r24
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	91 05       	cpc	r25, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <ADC_voidStartConversion+0xd0>
     c78:	a7 e2       	ldi	r26, 0x27	; 39
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e7 e2       	ldi	r30, 0x27	; 39
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	84 60       	ori	r24, 0x04	; 4
     c84:	8c 93       	st	X, r24
	Assign_Bit(ADMUX,Pin3,Get_Bit(u8Channel,Pin3));
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	88 70       	andi	r24, 0x08	; 8
     c8e:	90 70       	andi	r25, 0x00	; 0
     c90:	95 95       	asr	r25
     c92:	87 95       	ror	r24
     c94:	95 95       	asr	r25
     c96:	87 95       	ror	r24
     c98:	95 95       	asr	r25
     c9a:	87 95       	ror	r24
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	39 f4       	brne	.+14     	; 0xcae <ADC_voidStartConversion+0xf8>
     ca0:	a7 e2       	ldi	r26, 0x27	; 39
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e7 e2       	ldi	r30, 0x27	; 39
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	87 7f       	andi	r24, 0xF7	; 247
     cac:	8c 93       	st	X, r24
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	88 70       	andi	r24, 0x08	; 8
     cb6:	90 70       	andi	r25, 0x00	; 0
     cb8:	95 95       	asr	r25
     cba:	87 95       	ror	r24
     cbc:	95 95       	asr	r25
     cbe:	87 95       	ror	r24
     cc0:	95 95       	asr	r25
     cc2:	87 95       	ror	r24
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	91 05       	cpc	r25, r1
     cc8:	39 f4       	brne	.+14     	; 0xcd8 <ADC_voidStartConversion+0x122>
     cca:	a7 e2       	ldi	r26, 0x27	; 39
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e7 e2       	ldi	r30, 0x27	; 39
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	88 60       	ori	r24, 0x08	; 8
     cd6:	8c 93       	st	X, r24
	Assign_Bit(ADMUX,Pin4,Get_Bit(u8Channel,Pin4));
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	80 71       	andi	r24, 0x10	; 16
     ce0:	90 70       	andi	r25, 0x00	; 0
     ce2:	95 95       	asr	r25
     ce4:	87 95       	ror	r24
     ce6:	95 95       	asr	r25
     ce8:	87 95       	ror	r24
     cea:	95 95       	asr	r25
     cec:	87 95       	ror	r24
     cee:	95 95       	asr	r25
     cf0:	87 95       	ror	r24
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	39 f4       	brne	.+14     	; 0xd04 <ADC_voidStartConversion+0x14e>
     cf6:	a7 e2       	ldi	r26, 0x27	; 39
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e7 e2       	ldi	r30, 0x27	; 39
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	8f 7e       	andi	r24, 0xEF	; 239
     d02:	8c 93       	st	X, r24
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	88 2f       	mov	r24, r24
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	80 71       	andi	r24, 0x10	; 16
     d0c:	90 70       	andi	r25, 0x00	; 0
     d0e:	95 95       	asr	r25
     d10:	87 95       	ror	r24
     d12:	95 95       	asr	r25
     d14:	87 95       	ror	r24
     d16:	95 95       	asr	r25
     d18:	87 95       	ror	r24
     d1a:	95 95       	asr	r25
     d1c:	87 95       	ror	r24
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	39 f4       	brne	.+14     	; 0xd32 <ADC_voidStartConversion+0x17c>
     d24:	a7 e2       	ldi	r26, 0x27	; 39
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e7 e2       	ldi	r30, 0x27	; 39
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	80 61       	ori	r24, 0x10	; 16
     d30:	8c 93       	st	X, r24

	/*Start Conversion*/
	Set_Bit(ADCSRA,Pin6);
     d32:	a6 e2       	ldi	r26, 0x26	; 38
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e6 e2       	ldi	r30, 0x26	; 38
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 64       	ori	r24, 0x40	; 64
     d3e:	8c 93       	st	X, r24

}
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <ADC_u16GetVal>:

u16 ADC_u16GetVal()
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <ADC_u16GetVal+0x6>
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <ADC_u16GetVal+0x8>
     d50:	0f 92       	push	r0
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
	u16 u16ReturnReading,u16ReadingHigh;
	u8 u8ReadingLow;

	u8ReadingLow = (Get_Bit(ADCL,Pin6)) + (2*Get_Bit(ADCL,Pin7));
     d56:	e4 e2       	ldi	r30, 0x24	; 36
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	80 74       	andi	r24, 0x40	; 64
     d62:	90 70       	andi	r25, 0x00	; 0
     d64:	08 2e       	mov	r0, r24
     d66:	89 2f       	mov	r24, r25
     d68:	00 0c       	add	r0, r0
     d6a:	88 1f       	adc	r24, r24
     d6c:	99 0b       	sbc	r25, r25
     d6e:	00 0c       	add	r0, r0
     d70:	88 1f       	adc	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	28 2f       	mov	r18, r24
     d76:	e4 e2       	ldi	r30, 0x24	; 36
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	80 78       	andi	r24, 0x80	; 128
     d82:	90 70       	andi	r25, 0x00	; 0
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	89 2f       	mov	r24, r25
     d8c:	88 1f       	adc	r24, r24
     d8e:	99 0b       	sbc	r25, r25
     d90:	82 0f       	add	r24, r18
     d92:	89 83       	std	Y+1, r24	; 0x01
	u16ReadingHigh= ADCH;
     d94:	e5 e2       	ldi	r30, 0x25	; 37
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	9b 83       	std	Y+3, r25	; 0x03
     da0:	8a 83       	std	Y+2, r24	; 0x02
	u16ReturnReading = u8ReadingLow + (u16ReadingHigh<<2);
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	82 0f       	add	r24, r18
     db6:	93 1f       	adc	r25, r19
     db8:	9d 83       	std	Y+5, r25	; 0x05
     dba:	8c 83       	std	Y+4, r24	; 0x04

	return u16ReturnReading;
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	9d 81       	ldd	r25, Y+5	; 0x05
}
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <Buzzer_Init>:
#include "Buzzer.h"
#include "DIO.h"
#include "avr/delay.h"

void Buzzer_Init()
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDir(PortD,Pin7,Output); /* Set pin 7D as an output pin (buzzer)*/
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	67 e0       	ldi	r22, 0x07	; 7
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
	DIO_voidWriteVal(PortD,Pin7,Zero_Volt); /* Set pin 7D to 0V */
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	67 e0       	ldi	r22, 0x07	; 7
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
}
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <Buzzer>:
void Buzzer(u8 u8State)
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	0f 92       	push	r0
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidWriteVal(PortD,Pin7,u8State);
     dfe:	83 e0       	ldi	r24, 0x03	; 3
     e00:	67 e0       	ldi	r22, 0x07	; 7
     e02:	49 81       	ldd	r20, Y+1	; 0x01
     e04:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
}
     e08:	0f 90       	pop	r0
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <Buzzer_Toggle>:
void Buzzer_Toggle()
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	6c 97       	sbiw	r28, 0x1c	; 28
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
	DIO_voidWriteVal(PortD,Pin7,ON);
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	67 e0       	ldi	r22, 0x07	; 7
     e28:	41 e0       	ldi	r20, 0x01	; 1
     e2a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	aa e7       	ldi	r26, 0x7A	; 122
     e34:	b4 e4       	ldi	r27, 0x44	; 68
     e36:	89 8f       	std	Y+25, r24	; 0x19
     e38:	9a 8f       	std	Y+26, r25	; 0x1a
     e3a:	ab 8f       	std	Y+27, r26	; 0x1b
     e3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3e:	69 8d       	ldd	r22, Y+25	; 0x19
     e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	4a e7       	ldi	r20, 0x7A	; 122
     e4c:	53 e4       	ldi	r21, 0x43	; 67
     e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	8d 8b       	std	Y+21, r24	; 0x15
     e58:	9e 8b       	std	Y+22, r25	; 0x16
     e5a:	af 8b       	std	Y+23, r26	; 0x17
     e5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e5e:	6d 89       	ldd	r22, Y+21	; 0x15
     e60:	7e 89       	ldd	r23, Y+22	; 0x16
     e62:	8f 89       	ldd	r24, Y+23	; 0x17
     e64:	98 8d       	ldd	r25, Y+24	; 0x18
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e72:	88 23       	and	r24, r24
     e74:	2c f4       	brge	.+10     	; 0xe80 <Buzzer_Toggle+0x70>
		__ticks = 1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9c 8b       	std	Y+20, r25	; 0x14
     e7c:	8b 8b       	std	Y+19, r24	; 0x13
     e7e:	3f c0       	rjmp	.+126    	; 0xefe <Buzzer_Toggle+0xee>
	else if (__tmp > 65535)
     e80:	6d 89       	ldd	r22, Y+21	; 0x15
     e82:	7e 89       	ldd	r23, Y+22	; 0x16
     e84:	8f 89       	ldd	r24, Y+23	; 0x17
     e86:	98 8d       	ldd	r25, Y+24	; 0x18
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	3f ef       	ldi	r19, 0xFF	; 255
     e8c:	4f e7       	ldi	r20, 0x7F	; 127
     e8e:	57 e4       	ldi	r21, 0x47	; 71
     e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e94:	18 16       	cp	r1, r24
     e96:	4c f5       	brge	.+82     	; 0xeea <Buzzer_Toggle+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e98:	69 8d       	ldd	r22, Y+25	; 0x19
     e9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	51 e4       	ldi	r21, 0x41	; 65
     ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	9c 8b       	std	Y+20, r25	; 0x14
     ebe:	8b 8b       	std	Y+19, r24	; 0x13
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <Buzzer_Toggle+0xd0>
     ec2:	89 e1       	ldi	r24, 0x19	; 25
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9a 8b       	std	Y+18, r25	; 0x12
     ec8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eca:	89 89       	ldd	r24, Y+17	; 0x11
     ecc:	9a 89       	ldd	r25, Y+18	; 0x12
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <Buzzer_Toggle+0xbe>
     ed2:	9a 8b       	std	Y+18, r25	; 0x12
     ed4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	8b 89       	ldd	r24, Y+19	; 0x13
     ed8:	9c 89       	ldd	r25, Y+20	; 0x14
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	9c 8b       	std	Y+20, r25	; 0x14
     ede:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	8b 89       	ldd	r24, Y+19	; 0x13
     ee2:	9c 89       	ldd	r25, Y+20	; 0x14
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	69 f7       	brne	.-38     	; 0xec2 <Buzzer_Toggle+0xb2>
     ee8:	14 c0       	rjmp	.+40     	; 0xf12 <Buzzer_Toggle+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eea:	6d 89       	ldd	r22, Y+21	; 0x15
     eec:	7e 89       	ldd	r23, Y+22	; 0x16
     eee:	8f 89       	ldd	r24, Y+23	; 0x17
     ef0:	98 8d       	ldd	r25, Y+24	; 0x18
     ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9c 8b       	std	Y+20, r25	; 0x14
     efc:	8b 8b       	std	Y+19, r24	; 0x13
     efe:	8b 89       	ldd	r24, Y+19	; 0x13
     f00:	9c 89       	ldd	r25, Y+20	; 0x14
     f02:	98 8b       	std	Y+16, r25	; 0x10
     f04:	8f 87       	std	Y+15, r24	; 0x0f
     f06:	8f 85       	ldd	r24, Y+15	; 0x0f
     f08:	98 89       	ldd	r25, Y+16	; 0x10
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <Buzzer_Toggle+0xfa>
     f0e:	98 8b       	std	Y+16, r25	; 0x10
     f10:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	DIO_voidWriteVal(PortD,Pin7,OFF);
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	67 e0       	ldi	r22, 0x07	; 7
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	aa e7       	ldi	r26, 0x7A	; 122
     f22:	b4 e4       	ldi	r27, 0x44	; 68
     f24:	8b 87       	std	Y+11, r24	; 0x0b
     f26:	9c 87       	std	Y+12, r25	; 0x0c
     f28:	ad 87       	std	Y+13, r26	; 0x0d
     f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f30:	8d 85       	ldd	r24, Y+13	; 0x0d
     f32:	9e 85       	ldd	r25, Y+14	; 0x0e
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4a e7       	ldi	r20, 0x7A	; 122
     f3a:	53 e4       	ldi	r21, 0x43	; 67
     f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8f 83       	std	Y+7, r24	; 0x07
     f46:	98 87       	std	Y+8, r25	; 0x08
     f48:	a9 87       	std	Y+9, r26	; 0x09
     f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f4c:	6f 81       	ldd	r22, Y+7	; 0x07
     f4e:	78 85       	ldd	r23, Y+8	; 0x08
     f50:	89 85       	ldd	r24, Y+9	; 0x09
     f52:	9a 85       	ldd	r25, Y+10	; 0x0a
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f60:	88 23       	and	r24, r24
     f62:	2c f4       	brge	.+10     	; 0xf6e <Buzzer_Toggle+0x15e>
		__ticks = 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9e 83       	std	Y+6, r25	; 0x06
     f6a:	8d 83       	std	Y+5, r24	; 0x05
     f6c:	3f c0       	rjmp	.+126    	; 0xfec <Buzzer_Toggle+0x1dc>
	else if (__tmp > 65535)
     f6e:	6f 81       	ldd	r22, Y+7	; 0x07
     f70:	78 85       	ldd	r23, Y+8	; 0x08
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	9a 85       	ldd	r25, Y+10	; 0x0a
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	3f ef       	ldi	r19, 0xFF	; 255
     f7a:	4f e7       	ldi	r20, 0x7F	; 127
     f7c:	57 e4       	ldi	r21, 0x47	; 71
     f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f82:	18 16       	cp	r1, r24
     f84:	4c f5       	brge	.+82     	; 0xfd8 <Buzzer_Toggle+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f86:	6b 85       	ldd	r22, Y+11	; 0x0b
     f88:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e2       	ldi	r20, 0x20	; 32
     f94:	51 e4       	ldi	r21, 0x41	; 65
     f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	9e 83       	std	Y+6, r25	; 0x06
     fac:	8d 83       	std	Y+5, r24	; 0x05
     fae:	0f c0       	rjmp	.+30     	; 0xfce <Buzzer_Toggle+0x1be>
     fb0:	89 e1       	ldi	r24, 0x19	; 25
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	8b 83       	std	Y+3, r24	; 0x03
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <Buzzer_Toggle+0x1ac>
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	69 f7       	brne	.-38     	; 0xfb0 <Buzzer_Toggle+0x1a0>
     fd6:	14 c0       	rjmp	.+40     	; 0x1000 <Buzzer_Toggle+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd8:	6f 81       	ldd	r22, Y+7	; 0x07
     fda:	78 85       	ldd	r23, Y+8	; 0x08
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	8d 81       	ldd	r24, Y+5	; 0x05
     fee:	9e 81       	ldd	r25, Y+6	; 0x06
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <Buzzer_Toggle+0x1e8>
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    1000:	6c 96       	adiw	r28, 0x1c	; 28
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <DIO_voidInit>:

#include "DIO.h"
#include "Utils.h"

void DIO_voidInit()
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
	Clr_Nibble_High(DDRA);
    101a:	aa e3       	ldi	r26, 0x3A	; 58
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ea e3       	ldi	r30, 0x3A	; 58
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8f 70       	andi	r24, 0x0F	; 15
    1026:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRA);
    1028:	aa e3       	ldi	r26, 0x3A	; 58
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ea e3       	ldi	r30, 0x3A	; 58
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	80 7f       	andi	r24, 0xF0	; 240
    1034:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRB);
    1036:	a7 e3       	ldi	r26, 0x37	; 55
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e7 e3       	ldi	r30, 0x37	; 55
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8f 70       	andi	r24, 0x0F	; 15
    1042:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRB);
    1044:	a7 e3       	ldi	r26, 0x37	; 55
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e7 e3       	ldi	r30, 0x37	; 55
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 7f       	andi	r24, 0xF0	; 240
    1050:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRC);
    1052:	a4 e3       	ldi	r26, 0x34	; 52
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e4 e3       	ldi	r30, 0x34	; 52
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8f 70       	andi	r24, 0x0F	; 15
    105e:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRC);
    1060:	a4 e3       	ldi	r26, 0x34	; 52
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e4 e3       	ldi	r30, 0x34	; 52
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	80 7f       	andi	r24, 0xF0	; 240
    106c:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRD);
    106e:	a1 e3       	ldi	r26, 0x31	; 49
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e1 e3       	ldi	r30, 0x31	; 49
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	8f 70       	andi	r24, 0x0F	; 15
    107a:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRD);
    107c:	a1 e3       	ldi	r26, 0x31	; 49
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e1 e3       	ldi	r30, 0x31	; 49
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	80 7f       	andi	r24, 0xF0	; 240
    1088:	8c 93       	st	X, r24
}
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <DIO_u8GetVal>:

u8 DIO_u8GetVal(u8 u8Port, u8 u8Pin)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <DIO_u8GetVal+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <DIO_u8GetVal+0x8>
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	8a 83       	std	Y+2, r24	; 0x02
    10a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Return;
	switch (u8Port)
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	3d 83       	std	Y+5, r19	; 0x05
    10aa:	2c 83       	std	Y+4, r18	; 0x04
    10ac:	4c 81       	ldd	r20, Y+4	; 0x04
    10ae:	5d 81       	ldd	r21, Y+5	; 0x05
    10b0:	41 30       	cpi	r20, 0x01	; 1
    10b2:	51 05       	cpc	r21, r1
    10b4:	b1 f1       	breq	.+108    	; 0x1122 <DIO_u8GetVal+0x92>
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	91 05       	cpc	r25, r1
    10be:	34 f4       	brge	.+12     	; 0x10cc <DIO_u8GetVal+0x3c>
    10c0:	2c 81       	ldd	r18, Y+4	; 0x04
    10c2:	3d 81       	ldd	r19, Y+5	; 0x05
    10c4:	21 15       	cp	r18, r1
    10c6:	31 05       	cpc	r19, r1
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <DIO_u8GetVal+0x56>
    10ca:	84 c0       	rjmp	.+264    	; 0x11d4 <DIO_u8GetVal+0x144>
    10cc:	4c 81       	ldd	r20, Y+4	; 0x04
    10ce:	5d 81       	ldd	r21, Y+5	; 0x05
    10d0:	42 30       	cpi	r20, 0x02	; 2
    10d2:	51 05       	cpc	r21, r1
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <DIO_u8GetVal+0x48>
    10d6:	43 c0       	rjmp	.+134    	; 0x115e <DIO_u8GetVal+0xce>
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	9d 81       	ldd	r25, Y+5	; 0x05
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <DIO_u8GetVal+0x54>
    10e2:	5b c0       	rjmp	.+182    	; 0x119a <DIO_u8GetVal+0x10a>
    10e4:	77 c0       	rjmp	.+238    	; 0x11d4 <DIO_u8GetVal+0x144>
	{
	case 0:
		Local_u8Return=Get_Bit(PINA,u8Pin);
    10e6:	e9 e3       	ldi	r30, 0x39	; 57
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_u8GetVal+0x70>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	2a 95       	dec	r18
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_u8GetVal+0x6c>
    1104:	9a 01       	movw	r18, r20
    1106:	28 23       	and	r18, r24
    1108:	39 23       	and	r19, r25
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a9 01       	movw	r20, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_u8GetVal+0x88>
    1114:	55 95       	asr	r21
    1116:	47 95       	ror	r20
    1118:	8a 95       	dec	r24
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_u8GetVal+0x84>
    111c:	ca 01       	movw	r24, r20
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	59 c0       	rjmp	.+178    	; 0x11d4 <DIO_u8GetVal+0x144>
		break;
	case 1:
		Local_u8Return=Get_Bit(PINB,u8Pin);
    1122:	e6 e3       	ldi	r30, 0x36	; 54
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_u8GetVal+0xac>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	2a 95       	dec	r18
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_u8GetVal+0xa8>
    1140:	9a 01       	movw	r18, r20
    1142:	28 23       	and	r18, r24
    1144:	39 23       	and	r19, r25
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a9 01       	movw	r20, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8GetVal+0xc4>
    1150:	55 95       	asr	r21
    1152:	47 95       	ror	r20
    1154:	8a 95       	dec	r24
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_u8GetVal+0xc0>
    1158:	ca 01       	movw	r24, r20
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	3b c0       	rjmp	.+118    	; 0x11d4 <DIO_u8GetVal+0x144>
		break;
	case 2:
		Local_u8Return=Get_Bit(PINC,u8Pin);
    115e:	e3 e3       	ldi	r30, 0x33	; 51
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_u8GetVal+0xe8>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	2a 95       	dec	r18
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_u8GetVal+0xe4>
    117c:	9a 01       	movw	r18, r20
    117e:	28 23       	and	r18, r24
    1180:	39 23       	and	r19, r25
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_u8GetVal+0x100>
    118c:	55 95       	asr	r21
    118e:	47 95       	ror	r20
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_u8GetVal+0xfc>
    1194:	ca 01       	movw	r24, r20
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	1d c0       	rjmp	.+58     	; 0x11d4 <DIO_u8GetVal+0x144>
		break;
	case 3:
		Local_u8Return=Get_Bit(PIND,u8Pin);
    119a:	e0 e3       	ldi	r30, 0x30	; 48
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_u8GetVal+0x124>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	2a 95       	dec	r18
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <DIO_u8GetVal+0x120>
    11b8:	9a 01       	movw	r18, r20
    11ba:	28 23       	and	r18, r24
    11bc:	39 23       	and	r19, r25
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a9 01       	movw	r20, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_u8GetVal+0x13c>
    11c8:	55 95       	asr	r21
    11ca:	47 95       	ror	r20
    11cc:	8a 95       	dec	r24
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_u8GetVal+0x138>
    11d0:	ca 01       	movw	r24, r20
    11d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Return;
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <DIO_voidWriteVal>:

void DIO_voidWriteVal(u8 u8Port, u8 u8Pin, u8 u8Val)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <DIO_voidWriteVal+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <DIO_voidWriteVal+0x8>
    11ee:	0f 92       	push	r0
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	6a 83       	std	Y+2, r22	; 0x02
    11f8:	4b 83       	std	Y+3, r20	; 0x03
	switch (u8Port)
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3d 83       	std	Y+5, r19	; 0x05
    1202:	2c 83       	std	Y+4, r18	; 0x04
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <DIO_voidWriteVal+0x2a>
    120e:	46 c0       	rjmp	.+140    	; 0x129c <DIO_voidWriteVal+0xb6>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <DIO_voidWriteVal+0x3e>
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	71 f0       	breq	.+28     	; 0x123e <DIO_voidWriteVal+0x58>
    1222:	c7 c0       	rjmp	.+398    	; 0x13b2 <DIO_voidWriteVal+0x1cc>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <DIO_voidWriteVal+0x4a>
    122e:	65 c0       	rjmp	.+202    	; 0x12fa <DIO_voidWriteVal+0x114>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <DIO_voidWriteVal+0x56>
    123a:	8e c0       	rjmp	.+284    	; 0x1358 <DIO_voidWriteVal+0x172>
    123c:	ba c0       	rjmp	.+372    	; 0x13b2 <DIO_voidWriteVal+0x1cc>
		{
		case 0:
			Assign_Bit(PORTA,u8Pin,u8Val);
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	88 23       	and	r24, r24
    1242:	a1 f4       	brne	.+40     	; 0x126c <DIO_voidWriteVal+0x86>
    1244:	ab e3       	ldi	r26, 0x3B	; 59
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	eb e3       	ldi	r30, 0x3B	; 59
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_voidWriteVal+0x7c>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_voidWriteVal+0x78>
    1266:	80 95       	com	r24
    1268:	84 23       	and	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	09 f0       	breq	.+2      	; 0x1274 <DIO_voidWriteVal+0x8e>
    1272:	9f c0       	rjmp	.+318    	; 0x13b2 <DIO_voidWriteVal+0x1cc>
    1274:	ab e3       	ldi	r26, 0x3B	; 59
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	eb e3       	ldi	r30, 0x3B	; 59
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_voidWriteVal+0xac>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_voidWriteVal+0xa8>
    1296:	84 2b       	or	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	8b c0       	rjmp	.+278    	; 0x13b2 <DIO_voidWriteVal+0x1cc>
			break;
		case 1:
			Assign_Bit(PORTB,u8Pin,u8Val);
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	88 23       	and	r24, r24
    12a0:	a1 f4       	brne	.+40     	; 0x12ca <DIO_voidWriteVal+0xe4>
    12a2:	a8 e3       	ldi	r26, 0x38	; 56
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e8 e3       	ldi	r30, 0x38	; 56
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_voidWriteVal+0xda>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_voidWriteVal+0xd6>
    12c4:	80 95       	com	r24
    12c6:	84 23       	and	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <DIO_voidWriteVal+0xec>
    12d0:	70 c0       	rjmp	.+224    	; 0x13b2 <DIO_voidWriteVal+0x1cc>
    12d2:	a8 e3       	ldi	r26, 0x38	; 56
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e8 e3       	ldi	r30, 0x38	; 56
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_voidWriteVal+0x10a>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_voidWriteVal+0x106>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	5c c0       	rjmp	.+184    	; 0x13b2 <DIO_voidWriteVal+0x1cc>
			break;
		case 2:
			Assign_Bit(PORTC,u8Pin,u8Val);
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 23       	and	r24, r24
    12fe:	a1 f4       	brne	.+40     	; 0x1328 <DIO_voidWriteVal+0x142>
    1300:	a5 e3       	ldi	r26, 0x35	; 53
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e3       	ldi	r30, 0x35	; 53
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_voidWriteVal+0x138>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <DIO_voidWriteVal+0x134>
    1322:	80 95       	com	r24
    1324:	84 23       	and	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	09 f0       	breq	.+2      	; 0x1330 <DIO_voidWriteVal+0x14a>
    132e:	41 c0       	rjmp	.+130    	; 0x13b2 <DIO_voidWriteVal+0x1cc>
    1330:	a5 e3       	ldi	r26, 0x35	; 53
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e5 e3       	ldi	r30, 0x35	; 53
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_voidWriteVal+0x168>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_voidWriteVal+0x164>
    1352:	84 2b       	or	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	2d c0       	rjmp	.+90     	; 0x13b2 <DIO_voidWriteVal+0x1cc>
			break;
		case 3:
			Assign_Bit(PORTD,u8Pin,u8Val);
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	88 23       	and	r24, r24
    135c:	a1 f4       	brne	.+40     	; 0x1386 <DIO_voidWriteVal+0x1a0>
    135e:	a2 e3       	ldi	r26, 0x32	; 50
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e2 e3       	ldi	r30, 0x32	; 50
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_voidWriteVal+0x196>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_voidWriteVal+0x192>
    1380:	80 95       	com	r24
    1382:	84 23       	and	r24, r20
    1384:	8c 93       	st	X, r24
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	99 f4       	brne	.+38     	; 0x13b2 <DIO_voidWriteVal+0x1cc>
    138c:	a2 e3       	ldi	r26, 0x32	; 50
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e2 e3       	ldi	r30, 0x32	; 50
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_voidWriteVal+0x1c4>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <DIO_voidWriteVal+0x1c0>
    13ae:	84 2b       	or	r24, r20
    13b0:	8c 93       	st	X, r24
		}

}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <DIO_voidSetDir>:

void DIO_voidSetDir(u8 u8Port, u8 u8Pin, u8 u8Dir)
{
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <DIO_voidSetDir+0x6>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <DIO_voidSetDir+0x8>
    13ca:	0f 92       	push	r0
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	6a 83       	std	Y+2, r22	; 0x02
    13d4:	4b 83       	std	Y+3, r20	; 0x03
	switch (u8Port)
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3d 83       	std	Y+5, r19	; 0x05
    13de:	2c 83       	std	Y+4, r18	; 0x04
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	9d 81       	ldd	r25, Y+5	; 0x05
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	91 05       	cpc	r25, r1
    13e8:	09 f4       	brne	.+2      	; 0x13ec <DIO_voidSetDir+0x2a>
    13ea:	46 c0       	rjmp	.+140    	; 0x1478 <DIO_voidSetDir+0xb6>
    13ec:	2c 81       	ldd	r18, Y+4	; 0x04
    13ee:	3d 81       	ldd	r19, Y+5	; 0x05
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	2c f4       	brge	.+10     	; 0x1400 <DIO_voidSetDir+0x3e>
    13f6:	8c 81       	ldd	r24, Y+4	; 0x04
    13f8:	9d 81       	ldd	r25, Y+5	; 0x05
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	71 f0       	breq	.+28     	; 0x141a <DIO_voidSetDir+0x58>
    13fe:	c7 c0       	rjmp	.+398    	; 0x158e <DIO_voidSetDir+0x1cc>
    1400:	2c 81       	ldd	r18, Y+4	; 0x04
    1402:	3d 81       	ldd	r19, Y+5	; 0x05
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	31 05       	cpc	r19, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <DIO_voidSetDir+0x4a>
    140a:	65 c0       	rjmp	.+202    	; 0x14d6 <DIO_voidSetDir+0x114>
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	83 30       	cpi	r24, 0x03	; 3
    1412:	91 05       	cpc	r25, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <DIO_voidSetDir+0x56>
    1416:	8e c0       	rjmp	.+284    	; 0x1534 <DIO_voidSetDir+0x172>
    1418:	ba c0       	rjmp	.+372    	; 0x158e <DIO_voidSetDir+0x1cc>
		{
		case 0:
			Assign_Bit(DDRA,u8Pin,u8Dir);
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	88 23       	and	r24, r24
    141e:	a1 f4       	brne	.+40     	; 0x1448 <DIO_voidSetDir+0x86>
    1420:	aa e3       	ldi	r26, 0x3A	; 58
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ea e3       	ldi	r30, 0x3A	; 58
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_voidSetDir+0x7c>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_voidSetDir+0x78>
    1442:	80 95       	com	r24
    1444:	84 23       	and	r24, r20
    1446:	8c 93       	st	X, r24
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	09 f0       	breq	.+2      	; 0x1450 <DIO_voidSetDir+0x8e>
    144e:	9f c0       	rjmp	.+318    	; 0x158e <DIO_voidSetDir+0x1cc>
    1450:	aa e3       	ldi	r26, 0x3A	; 58
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	ea e3       	ldi	r30, 0x3A	; 58
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_voidSetDir+0xac>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_voidSetDir+0xa8>
    1472:	84 2b       	or	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	8b c0       	rjmp	.+278    	; 0x158e <DIO_voidSetDir+0x1cc>
			break;
		case 1:
			Assign_Bit(DDRB,u8Pin,u8Dir);
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	88 23       	and	r24, r24
    147c:	a1 f4       	brne	.+40     	; 0x14a6 <DIO_voidSetDir+0xe4>
    147e:	a7 e3       	ldi	r26, 0x37	; 55
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e7 e3       	ldi	r30, 0x37	; 55
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_voidSetDir+0xda>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_voidSetDir+0xd6>
    14a0:	80 95       	com	r24
    14a2:	84 23       	and	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	09 f0       	breq	.+2      	; 0x14ae <DIO_voidSetDir+0xec>
    14ac:	70 c0       	rjmp	.+224    	; 0x158e <DIO_voidSetDir+0x1cc>
    14ae:	a7 e3       	ldi	r26, 0x37	; 55
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e7 e3       	ldi	r30, 0x37	; 55
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <DIO_voidSetDir+0x10a>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <DIO_voidSetDir+0x106>
    14d0:	84 2b       	or	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	5c c0       	rjmp	.+184    	; 0x158e <DIO_voidSetDir+0x1cc>
			break;
		case 2:
			Assign_Bit(DDRC,u8Pin,u8Dir);
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	88 23       	and	r24, r24
    14da:	a1 f4       	brne	.+40     	; 0x1504 <DIO_voidSetDir+0x142>
    14dc:	a4 e3       	ldi	r26, 0x34	; 52
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e4 e3       	ldi	r30, 0x34	; 52
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <DIO_voidSetDir+0x138>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <DIO_voidSetDir+0x134>
    14fe:	80 95       	com	r24
    1500:	84 23       	and	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	09 f0       	breq	.+2      	; 0x150c <DIO_voidSetDir+0x14a>
    150a:	41 c0       	rjmp	.+130    	; 0x158e <DIO_voidSetDir+0x1cc>
    150c:	a4 e3       	ldi	r26, 0x34	; 52
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e4 e3       	ldi	r30, 0x34	; 52
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_voidSetDir+0x168>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_voidSetDir+0x164>
    152e:	84 2b       	or	r24, r20
    1530:	8c 93       	st	X, r24
    1532:	2d c0       	rjmp	.+90     	; 0x158e <DIO_voidSetDir+0x1cc>
			break;
		case 3:
			Assign_Bit(DDRD,u8Pin,u8Dir);
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	88 23       	and	r24, r24
    1538:	a1 f4       	brne	.+40     	; 0x1562 <DIO_voidSetDir+0x1a0>
    153a:	a1 e3       	ldi	r26, 0x31	; 49
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e1 e3       	ldi	r30, 0x31	; 49
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_voidSetDir+0x196>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_voidSetDir+0x192>
    155c:	80 95       	com	r24
    155e:	84 23       	and	r24, r20
    1560:	8c 93       	st	X, r24
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	99 f4       	brne	.+38     	; 0x158e <DIO_voidSetDir+0x1cc>
    1568:	a1 e3       	ldi	r26, 0x31	; 49
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e1 e3       	ldi	r30, 0x31	; 49
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_voidSetDir+0x1c4>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_voidSetDir+0x1c0>
    158a:	84 2b       	or	r24, r20
    158c:	8c 93       	st	X, r24
		}

}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <ExtINT_voidInit>:
#include "ADC.h"
#include <avr/delay.h>

void ExtINT_voidInit(u8 u8Number)

{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <ExtINT_voidInit+0x6>
    15a4:	0f 92       	push	r0
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	89 83       	std	Y+1, r24	; 0x01
	switch (u8Number)
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	3b 83       	std	Y+3, r19	; 0x03
    15b4:	2a 83       	std	Y+2, r18	; 0x02
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	91 05       	cpc	r25, r1
    15be:	59 f1       	breq	.+86     	; 0x1616 <ExtINT_voidInit+0x78>
    15c0:	2a 81       	ldd	r18, Y+2	; 0x02
    15c2:	3b 81       	ldd	r19, Y+3	; 0x03
    15c4:	22 30       	cpi	r18, 0x02	; 2
    15c6:	31 05       	cpc	r19, r1
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <ExtINT_voidInit+0x36>
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	9b 81       	ldd	r25, Y+3	; 0x03
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	61 f0       	breq	.+24     	; 0x15ea <ExtINT_voidInit+0x4c>
    15d2:	62 c0       	rjmp	.+196    	; 0x1698 <ExtINT_voidInit+0xfa>
    15d4:	2a 81       	ldd	r18, Y+2	; 0x02
    15d6:	3b 81       	ldd	r19, Y+3	; 0x03
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	91 f1       	breq	.+100    	; 0x1642 <ExtINT_voidInit+0xa4>
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	9b 81       	ldd	r25, Y+3	; 0x03
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	91 05       	cpc	r25, r1
    15e6:	e1 f1       	breq	.+120    	; 0x1660 <ExtINT_voidInit+0xc2>
    15e8:	57 c0       	rjmp	.+174    	; 0x1698 <ExtINT_voidInit+0xfa>
	{

	case INT0:
		/*Interrupt Configuration*/
		Set_Bit(MCUCR,Pin0);
    15ea:	a5 e5       	ldi	r26, 0x55	; 85
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e5 e5       	ldi	r30, 0x55	; 85
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	81 60       	ori	r24, 0x01	; 1
    15f6:	8c 93       	st	X, r24
		Clr_Bit(MCUCR,Pin1);
    15f8:	a5 e5       	ldi	r26, 0x55	; 85
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e5 e5       	ldi	r30, 0x55	; 85
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8d 7f       	andi	r24, 0xFD	; 253
    1604:	8c 93       	st	X, r24

		/*Enable INT0*/
		Set_Bit(GICR,Pin6);
    1606:	ab e5       	ldi	r26, 0x5B	; 91
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	eb e5       	ldi	r30, 0x5B	; 91
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	80 64       	ori	r24, 0x40	; 64
    1612:	8c 93       	st	X, r24
    1614:	41 c0       	rjmp	.+130    	; 0x1698 <ExtINT_voidInit+0xfa>
		break;

	case INT1:
		Set_Bit(GICR,Pin7);
    1616:	ab e5       	ldi	r26, 0x5B	; 91
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	eb e5       	ldi	r30, 0x5B	; 91
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 68       	ori	r24, 0x80	; 128
    1622:	8c 93       	st	X, r24

		Set_Bit(MCUCR,Pin2);
    1624:	a5 e5       	ldi	r26, 0x55	; 85
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e5       	ldi	r30, 0x55	; 85
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	84 60       	ori	r24, 0x04	; 4
    1630:	8c 93       	st	X, r24
		Clr_Bit(MCUCR,Pin3);
    1632:	a5 e5       	ldi	r26, 0x55	; 85
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e5 e5       	ldi	r30, 0x55	; 85
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	87 7f       	andi	r24, 0xF7	; 247
    163e:	8c 93       	st	X, r24
    1640:	2b c0       	rjmp	.+86     	; 0x1698 <ExtINT_voidInit+0xfa>
		break;

	case INT2:
		Set_Bit(GICR,Pin5);
    1642:	ab e5       	ldi	r26, 0x5B	; 91
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	eb e5       	ldi	r30, 0x5B	; 91
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 62       	ori	r24, 0x20	; 32
    164e:	8c 93       	st	X, r24


		Set_Bit(MCUCSR,Pin6); /*Raising edge*/
    1650:	a4 e5       	ldi	r26, 0x54	; 84
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e4 e5       	ldi	r30, 0x54	; 84
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	80 64       	ori	r24, 0x40	; 64
    165c:	8c 93       	st	X, r24
    165e:	1c c0       	rjmp	.+56     	; 0x1698 <ExtINT_voidInit+0xfa>
		break;

	case ADC:
		Set_Bit(ADCSRA,Pin3);
    1660:	a6 e2       	ldi	r26, 0x26	; 38
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e6 e2       	ldi	r30, 0x26	; 38
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	88 60       	ori	r24, 0x08	; 8
    166c:	8c 93       	st	X, r24

		Clr_Bit(GICR,Pin7);
    166e:	ab e5       	ldi	r26, 0x5B	; 91
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	eb e5       	ldi	r30, 0x5B	; 91
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8f 77       	andi	r24, 0x7F	; 127
    167a:	8c 93       	st	X, r24
		Clr_Bit(GICR,Pin6);
    167c:	ab e5       	ldi	r26, 0x5B	; 91
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	eb e5       	ldi	r30, 0x5B	; 91
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8f 7b       	andi	r24, 0xBF	; 191
    1688:	8c 93       	st	X, r24
		Clr_Bit(GICR,Pin5);
    168a:	ab e5       	ldi	r26, 0x5B	; 91
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	eb e5       	ldi	r30, 0x5B	; 91
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	8f 7d       	andi	r24, 0xDF	; 223
    1696:	8c 93       	st	X, r24
		break;
	}

}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <LCD_WriteCommand>:
static u8 charact_number=0;
static u8 current_charact=0;
static u8 English_Char=0;

void LCD_WriteCommand(u8 com)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	6d 97       	sbiw	r28, 0x1d	; 29
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_voidWriteVal(PortD,Pin0,Zero_Volt); /*RS=0*/
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_High(com)));
    16c4:	a5 e3       	ldi	r26, 0x35	; 53
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e5 e3       	ldi	r30, 0x35	; 53
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	28 2f       	mov	r18, r24
    16d0:	2f 70       	andi	r18, 0x0F	; 15
    16d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16d4:	82 95       	swap	r24
    16d6:	8f 70       	andi	r24, 0x0F	; 15
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	90 70       	andi	r25, 0x00	; 0
    16de:	82 95       	swap	r24
    16e0:	92 95       	swap	r25
    16e2:	90 7f       	andi	r25, 0xF0	; 240
    16e4:	98 27       	eor	r25, r24
    16e6:	80 7f       	andi	r24, 0xF0	; 240
    16e8:	98 27       	eor	r25, r24
    16ea:	82 2b       	or	r24, r18
    16ec:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	41 e0       	ldi	r20, 0x01	; 1
    16f4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e4       	ldi	r27, 0x40	; 64
    1700:	89 8f       	std	Y+25, r24	; 0x19
    1702:	9a 8f       	std	Y+26, r25	; 0x1a
    1704:	ab 8f       	std	Y+27, r26	; 0x1b
    1706:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	69 8d       	ldd	r22, Y+25	; 0x19
    170a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    170c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a e7       	ldi	r20, 0x7A	; 122
    1716:	53 e4       	ldi	r21, 0x43	; 67
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	8d 8b       	std	Y+21, r24	; 0x15
    1722:	9e 8b       	std	Y+22, r25	; 0x16
    1724:	af 8b       	std	Y+23, r26	; 0x17
    1726:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1728:	6d 89       	ldd	r22, Y+21	; 0x15
    172a:	7e 89       	ldd	r23, Y+22	; 0x16
    172c:	8f 89       	ldd	r24, Y+23	; 0x17
    172e:	98 8d       	ldd	r25, Y+24	; 0x18
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    173c:	88 23       	and	r24, r24
    173e:	2c f4       	brge	.+10     	; 0x174a <LCD_WriteCommand+0xa6>
		__ticks = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9c 8b       	std	Y+20, r25	; 0x14
    1746:	8b 8b       	std	Y+19, r24	; 0x13
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <LCD_WriteCommand+0x124>
	else if (__tmp > 65535)
    174a:	6d 89       	ldd	r22, Y+21	; 0x15
    174c:	7e 89       	ldd	r23, Y+22	; 0x16
    174e:	8f 89       	ldd	r24, Y+23	; 0x17
    1750:	98 8d       	ldd	r25, Y+24	; 0x18
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	57 e4       	ldi	r21, 0x47	; 71
    175a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	4c f5       	brge	.+82     	; 0x17b4 <LCD_WriteCommand+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1762:	69 8d       	ldd	r22, Y+25	; 0x19
    1764:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1766:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1768:	9c 8d       	ldd	r25, Y+28	; 0x1c
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9c 8b       	std	Y+20, r25	; 0x14
    1788:	8b 8b       	std	Y+19, r24	; 0x13
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <LCD_WriteCommand+0x106>
    178c:	89 e1       	ldi	r24, 0x19	; 25
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9a 8b       	std	Y+18, r25	; 0x12
    1792:	89 8b       	std	Y+17, r24	; 0x11
    1794:	89 89       	ldd	r24, Y+17	; 0x11
    1796:	9a 89       	ldd	r25, Y+18	; 0x12
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <LCD_WriteCommand+0xf4>
    179c:	9a 8b       	std	Y+18, r25	; 0x12
    179e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a0:	8b 89       	ldd	r24, Y+19	; 0x13
    17a2:	9c 89       	ldd	r25, Y+20	; 0x14
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	9c 8b       	std	Y+20, r25	; 0x14
    17a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	8b 89       	ldd	r24, Y+19	; 0x13
    17ac:	9c 89       	ldd	r25, Y+20	; 0x14
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	69 f7       	brne	.-38     	; 0x178c <LCD_WriteCommand+0xe8>
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <LCD_WriteCommand+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b4:	6d 89       	ldd	r22, Y+21	; 0x15
    17b6:	7e 89       	ldd	r23, Y+22	; 0x16
    17b8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ba:	98 8d       	ldd	r25, Y+24	; 0x18
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9c 8b       	std	Y+20, r25	; 0x14
    17c6:	8b 8b       	std	Y+19, r24	; 0x13
    17c8:	8b 89       	ldd	r24, Y+19	; 0x13
    17ca:	9c 89       	ldd	r25, Y+20	; 0x14
    17cc:	98 8b       	std	Y+16, r25	; 0x10
    17ce:	8f 87       	std	Y+15, r24	; 0x0f
    17d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d2:	98 89       	ldd	r25, Y+16	; 0x10
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <LCD_WriteCommand+0x130>
    17d8:	98 8b       	std	Y+16, r25	; 0x10
    17da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    17dc:	83 e0       	ldi	r24, 0x03	; 3
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_Low(com)));
    17e6:	a5 e3       	ldi	r26, 0x35	; 53
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e5 e3       	ldi	r30, 0x35	; 53
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	28 2f       	mov	r18, r24
    17f2:	2f 70       	andi	r18, 0x0F	; 15
    17f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	8f 70       	andi	r24, 0x0F	; 15
    17fc:	90 70       	andi	r25, 0x00	; 0
    17fe:	82 95       	swap	r24
    1800:	92 95       	swap	r25
    1802:	90 7f       	andi	r25, 0xF0	; 240
    1804:	98 27       	eor	r25, r24
    1806:	80 7f       	andi	r24, 0xF0	; 240
    1808:	98 27       	eor	r25, r24
    180a:	82 2b       	or	r24, r18
    180c:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    180e:	83 e0       	ldi	r24, 0x03	; 3
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a0 e0       	ldi	r26, 0x00	; 0
    181e:	b0 e4       	ldi	r27, 0x40	; 64
    1820:	8b 87       	std	Y+11, r24	; 0x0b
    1822:	9c 87       	std	Y+12, r25	; 0x0c
    1824:	ad 87       	std	Y+13, r26	; 0x0d
    1826:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1828:	6b 85       	ldd	r22, Y+11	; 0x0b
    182a:	7c 85       	ldd	r23, Y+12	; 0x0c
    182c:	8d 85       	ldd	r24, Y+13	; 0x0d
    182e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4a e7       	ldi	r20, 0x7A	; 122
    1836:	53 e4       	ldi	r21, 0x43	; 67
    1838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8f 83       	std	Y+7, r24	; 0x07
    1842:	98 87       	std	Y+8, r25	; 0x08
    1844:	a9 87       	std	Y+9, r26	; 0x09
    1846:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    185c:	88 23       	and	r24, r24
    185e:	2c f4       	brge	.+10     	; 0x186a <LCD_WriteCommand+0x1c6>
		__ticks = 1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	3f c0       	rjmp	.+126    	; 0x18e8 <LCD_WriteCommand+0x244>
	else if (__tmp > 65535)
    186a:	6f 81       	ldd	r22, Y+7	; 0x07
    186c:	78 85       	ldd	r23, Y+8	; 0x08
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	4c f5       	brge	.+82     	; 0x18d4 <LCD_WriteCommand+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	6b 85       	ldd	r22, Y+11	; 0x0b
    1884:	7c 85       	ldd	r23, Y+12	; 0x0c
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	9e 85       	ldd	r25, Y+14	; 0x0e
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e2       	ldi	r20, 0x20	; 32
    1890:	51 e4       	ldi	r21, 0x41	; 65
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <LCD_WriteCommand+0x226>
    18ac:	89 e1       	ldi	r24, 0x19	; 25
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9c 83       	std	Y+4, r25	; 0x04
    18b2:	8b 83       	std	Y+3, r24	; 0x03
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <LCD_WriteCommand+0x214>
    18bc:	9c 83       	std	Y+4, r25	; 0x04
    18be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	69 f7       	brne	.-38     	; 0x18ac <LCD_WriteCommand+0x208>
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <LCD_WriteCommand+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d4:	6f 81       	ldd	r22, Y+7	; 0x07
    18d6:	78 85       	ldd	r23, Y+8	; 0x08
    18d8:	89 85       	ldd	r24, Y+9	; 0x09
    18da:	9a 85       	ldd	r25, Y+10	; 0x0a
    18dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	9e 81       	ldd	r25, Y+6	; 0x06
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <LCD_WriteCommand+0x250>
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>

}
    1906:	6d 96       	adiw	r28, 0x1d	; 29
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <LCD_Init>:

void LCD_Init(void)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	aa 97       	sbiw	r28, 0x2a	; 42
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetDir(PortD,Pin0,Output); /*RS(DDRD,0) output*/
    192c:	83 e0       	ldi	r24, 0x03	; 3
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
	DIO_voidSetDir(PortD,Pin1,Output); /*E(DDRD,1) output*/
    1936:	83 e0       	ldi	r24, 0x03	; 3
    1938:	61 e0       	ldi	r22, 0x01	; 1
    193a:	41 e0       	ldi	r20, 0x01	; 1
    193c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
	/*LCD Data Bus as output */
	DIO_voidSetDir(PortC,Pin4,Output);
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	64 e0       	ldi	r22, 0x04	; 4
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin5,Output);
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	65 e0       	ldi	r22, 0x05	; 5
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin6,Output);
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	66 e0       	ldi	r22, 0x06	; 6
    1958:	41 e0       	ldi	r20, 0x01	; 1
    195a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin7,Output);
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	67 e0       	ldi	r22, 0x07	; 7
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a8 e4       	ldi	r26, 0x48	; 72
    196e:	b2 e4       	ldi	r27, 0x42	; 66
    1970:	8f a3       	std	Y+39, r24	; 0x27
    1972:	98 a7       	std	Y+40, r25	; 0x28
    1974:	a9 a7       	std	Y+41, r26	; 0x29
    1976:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1978:	6f a1       	ldd	r22, Y+39	; 0x27
    197a:	78 a5       	ldd	r23, Y+40	; 0x28
    197c:	89 a5       	ldd	r24, Y+41	; 0x29
    197e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	4a e7       	ldi	r20, 0x7A	; 122
    1986:	53 e4       	ldi	r21, 0x43	; 67
    1988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	8b a3       	std	Y+35, r24	; 0x23
    1992:	9c a3       	std	Y+36, r25	; 0x24
    1994:	ad a3       	std	Y+37, r26	; 0x25
    1996:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1998:	6b a1       	ldd	r22, Y+35	; 0x23
    199a:	7c a1       	ldd	r23, Y+36	; 0x24
    199c:	8d a1       	ldd	r24, Y+37	; 0x25
    199e:	9e a1       	ldd	r25, Y+38	; 0x26
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e8       	ldi	r20, 0x80	; 128
    19a6:	5f e3       	ldi	r21, 0x3F	; 63
    19a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ac:	88 23       	and	r24, r24
    19ae:	2c f4       	brge	.+10     	; 0x19ba <LCD_Init+0xa2>
		__ticks = 1;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9a a3       	std	Y+34, r25	; 0x22
    19b6:	89 a3       	std	Y+33, r24	; 0x21
    19b8:	3f c0       	rjmp	.+126    	; 0x1a38 <LCD_Init+0x120>
	else if (__tmp > 65535)
    19ba:	6b a1       	ldd	r22, Y+35	; 0x23
    19bc:	7c a1       	ldd	r23, Y+36	; 0x24
    19be:	8d a1       	ldd	r24, Y+37	; 0x25
    19c0:	9e a1       	ldd	r25, Y+38	; 0x26
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	3f ef       	ldi	r19, 0xFF	; 255
    19c6:	4f e7       	ldi	r20, 0x7F	; 127
    19c8:	57 e4       	ldi	r21, 0x47	; 71
    19ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ce:	18 16       	cp	r1, r24
    19d0:	4c f5       	brge	.+82     	; 0x1a24 <LCD_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d2:	6f a1       	ldd	r22, Y+39	; 0x27
    19d4:	78 a5       	ldd	r23, Y+40	; 0x28
    19d6:	89 a5       	ldd	r24, Y+41	; 0x29
    19d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e2       	ldi	r20, 0x20	; 32
    19e0:	51 e4       	ldi	r21, 0x41	; 65
    19e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	9a a3       	std	Y+34, r25	; 0x22
    19f8:	89 a3       	std	Y+33, r24	; 0x21
    19fa:	0f c0       	rjmp	.+30     	; 0x1a1a <LCD_Init+0x102>
    19fc:	89 e1       	ldi	r24, 0x19	; 25
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	98 a3       	std	Y+32, r25	; 0x20
    1a02:	8f 8f       	std	Y+31, r24	; 0x1f
    1a04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a06:	98 a1       	ldd	r25, Y+32	; 0x20
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <LCD_Init+0xf0>
    1a0c:	98 a3       	std	Y+32, r25	; 0x20
    1a0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a10:	89 a1       	ldd	r24, Y+33	; 0x21
    1a12:	9a a1       	ldd	r25, Y+34	; 0x22
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	9a a3       	std	Y+34, r25	; 0x22
    1a18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	69 f7       	brne	.-38     	; 0x19fc <LCD_Init+0xe4>
    1a22:	14 c0       	rjmp	.+40     	; 0x1a4c <LCD_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a24:	6b a1       	ldd	r22, Y+35	; 0x23
    1a26:	7c a1       	ldd	r23, Y+36	; 0x24
    1a28:	8d a1       	ldd	r24, Y+37	; 0x25
    1a2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9a a3       	std	Y+34, r25	; 0x22
    1a36:	89 a3       	std	Y+33, r24	; 0x21
    1a38:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <LCD_Init+0x12c>
    1a48:	9e 8f       	std	Y+30, r25	; 0x1e
    1a4a:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(50);
	LCD_WriteCommand(0x02);
    1a4c:	82 e0       	ldi	r24, 0x02	; 2
    1a4e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_WriteCommand>

	/*LCD_WriteCommand(0x20); for 1 line*/
	LCD_WriteCommand(0x28); /*for 2 lines*/
    1a52:	88 e2       	ldi	r24, 0x28	; 40
    1a54:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_WriteCommand>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e2       	ldi	r26, 0x20	; 32
    1a5e:	b1 e4       	ldi	r27, 0x41	; 65
    1a60:	89 8f       	std	Y+25, r24	; 0x19
    1a62:	9a 8f       	std	Y+26, r25	; 0x1a
    1a64:	ab 8f       	std	Y+27, r26	; 0x1b
    1a66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a68:	69 8d       	ldd	r22, Y+25	; 0x19
    1a6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	4a e7       	ldi	r20, 0x7A	; 122
    1a76:	53 e4       	ldi	r21, 0x43	; 67
    1a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	8d 8b       	std	Y+21, r24	; 0x15
    1a82:	9e 8b       	std	Y+22, r25	; 0x16
    1a84:	af 8b       	std	Y+23, r26	; 0x17
    1a86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a88:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e8       	ldi	r20, 0x80	; 128
    1a96:	5f e3       	ldi	r21, 0x3F	; 63
    1a98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	2c f4       	brge	.+10     	; 0x1aaa <LCD_Init+0x192>
		__ticks = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9c 8b       	std	Y+20, r25	; 0x14
    1aa6:	8b 8b       	std	Y+19, r24	; 0x13
    1aa8:	3f c0       	rjmp	.+126    	; 0x1b28 <LCD_Init+0x210>
	else if (__tmp > 65535)
    1aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    1aac:	7e 89       	ldd	r23, Y+22	; 0x16
    1aae:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	3f ef       	ldi	r19, 0xFF	; 255
    1ab6:	4f e7       	ldi	r20, 0x7F	; 127
    1ab8:	57 e4       	ldi	r21, 0x47	; 71
    1aba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abe:	18 16       	cp	r1, r24
    1ac0:	4c f5       	brge	.+82     	; 0x1b14 <LCD_Init+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e2       	ldi	r20, 0x20	; 32
    1ad0:	51 e4       	ldi	r21, 0x41	; 65
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9c 8b       	std	Y+20, r25	; 0x14
    1ae8:	8b 8b       	std	Y+19, r24	; 0x13
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <LCD_Init+0x1f2>
    1aec:	89 e1       	ldi	r24, 0x19	; 25
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9a 8b       	std	Y+18, r25	; 0x12
    1af2:	89 8b       	std	Y+17, r24	; 0x11
    1af4:	89 89       	ldd	r24, Y+17	; 0x11
    1af6:	9a 89       	ldd	r25, Y+18	; 0x12
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <LCD_Init+0x1e0>
    1afc:	9a 8b       	std	Y+18, r25	; 0x12
    1afe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b00:	8b 89       	ldd	r24, Y+19	; 0x13
    1b02:	9c 89       	ldd	r25, Y+20	; 0x14
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	9c 8b       	std	Y+20, r25	; 0x14
    1b08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	69 f7       	brne	.-38     	; 0x1aec <LCD_Init+0x1d4>
    1b12:	14 c0       	rjmp	.+40     	; 0x1b3c <LCD_Init+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	6d 89       	ldd	r22, Y+21	; 0x15
    1b16:	7e 89       	ldd	r23, Y+22	; 0x16
    1b18:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9c 8b       	std	Y+20, r25	; 0x14
    1b26:	8b 8b       	std	Y+19, r24	; 0x13
    1b28:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2c:	98 8b       	std	Y+16, r25	; 0x10
    1b2e:	8f 87       	std	Y+15, r24	; 0x0f
    1b30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b32:	98 89       	ldd	r25, Y+16	; 0x10
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <LCD_Init+0x21c>
    1b38:	98 8b       	std	Y+16, r25	; 0x10
    1b3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_WriteCommand(0x0c);
    1b3c:	8c e0       	ldi	r24, 0x0C	; 12
    1b3e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_WriteCommand>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a0 e2       	ldi	r26, 0x20	; 32
    1b48:	b1 e4       	ldi	r27, 0x41	; 65
    1b4a:	8b 87       	std	Y+11, r24	; 0x0b
    1b4c:	9c 87       	std	Y+12, r25	; 0x0c
    1b4e:	ad 87       	std	Y+13, r26	; 0x0d
    1b50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	4a e7       	ldi	r20, 0x7A	; 122
    1b60:	53 e4       	ldi	r21, 0x43	; 67
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	8f 83       	std	Y+7, r24	; 0x07
    1b6c:	98 87       	std	Y+8, r25	; 0x08
    1b6e:	a9 87       	std	Y+9, r26	; 0x09
    1b70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b72:	6f 81       	ldd	r22, Y+7	; 0x07
    1b74:	78 85       	ldd	r23, Y+8	; 0x08
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e8       	ldi	r20, 0x80	; 128
    1b80:	5f e3       	ldi	r21, 0x3F	; 63
    1b82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b86:	88 23       	and	r24, r24
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <LCD_Init+0x27c>
		__ticks = 1;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9e 83       	std	Y+6, r25	; 0x06
    1b90:	8d 83       	std	Y+5, r24	; 0x05
    1b92:	3f c0       	rjmp	.+126    	; 0x1c12 <LCD_Init+0x2fa>
	else if (__tmp > 65535)
    1b94:	6f 81       	ldd	r22, Y+7	; 0x07
    1b96:	78 85       	ldd	r23, Y+8	; 0x08
    1b98:	89 85       	ldd	r24, Y+9	; 0x09
    1b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ba0:	4f e7       	ldi	r20, 0x7F	; 127
    1ba2:	57 e4       	ldi	r21, 0x47	; 71
    1ba4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba8:	18 16       	cp	r1, r24
    1baa:	4c f5       	brge	.+82     	; 0x1bfe <LCD_Init+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e2       	ldi	r20, 0x20	; 32
    1bba:	51 e4       	ldi	r21, 0x41	; 65
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <LCD_Init+0x2dc>
    1bd6:	89 e1       	ldi	r24, 0x19	; 25
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9c 83       	std	Y+4, r25	; 0x04
    1bdc:	8b 83       	std	Y+3, r24	; 0x03
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <LCD_Init+0x2ca>
    1be6:	9c 83       	std	Y+4, r25	; 0x04
    1be8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <LCD_Init+0x2be>
    1bfc:	14 c0       	rjmp	.+40     	; 0x1c26 <LCD_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1c00:	78 85       	ldd	r23, Y+8	; 0x08
    1c02:	89 85       	ldd	r24, Y+9	; 0x09
    1c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	9a 83       	std	Y+2, r25	; 0x02
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_Init+0x306>
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	LCD_CLear();
    1c26:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_CLear>
	LCD_Set_Entry_Mode(1);
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <LCD_Set_Entry_Mode>

}
    1c30:	aa 96       	adiw	r28, 0x2a	; 42
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <LCD_WriteData>:

void LCD_WriteData(u8 com)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	6d 97       	sbiw	r28, 0x1d	; 29
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	8d 8f       	std	Y+29, r24	; 0x1d

	Set_Bit(PORTD,0); /*RS*/
    1c58:	a2 e3       	ldi	r26, 0x32	; 50
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e2 e3       	ldi	r30, 0x32	; 50
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	81 60       	ori	r24, 0x01	; 1
    1c64:	8c 93       	st	X, r24

	Assign_Nibble_High(PORTC,(Get_Nibble_High(com)));
    1c66:	a5 e3       	ldi	r26, 0x35	; 53
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e5 e3       	ldi	r30, 0x35	; 53
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	28 2f       	mov	r18, r24
    1c72:	2f 70       	andi	r18, 0x0F	; 15
    1c74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c76:	82 95       	swap	r24
    1c78:	8f 70       	andi	r24, 0x0F	; 15
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	90 70       	andi	r25, 0x00	; 0
    1c80:	82 95       	swap	r24
    1c82:	92 95       	swap	r25
    1c84:	90 7f       	andi	r25, 0xF0	; 240
    1c86:	98 27       	eor	r25, r24
    1c88:	80 7f       	andi	r24, 0xF0	; 240
    1c8a:	98 27       	eor	r25, r24
    1c8c:	82 2b       	or	r24, r18
    1c8e:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    1c90:	83 e0       	ldi	r24, 0x03	; 3
    1c92:	61 e0       	ldi	r22, 0x01	; 1
    1c94:	41 e0       	ldi	r20, 0x01	; 1
    1c96:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a0 ea       	ldi	r26, 0xA0	; 160
    1ca0:	b1 e4       	ldi	r27, 0x41	; 65
    1ca2:	89 8f       	std	Y+25, r24	; 0x19
    1ca4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ca6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ca8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1caa:	69 8d       	ldd	r22, Y+25	; 0x19
    1cac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	4a e7       	ldi	r20, 0x7A	; 122
    1cb8:	53 e4       	ldi	r21, 0x43	; 67
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	8d 8b       	std	Y+21, r24	; 0x15
    1cc4:	9e 8b       	std	Y+22, r25	; 0x16
    1cc6:	af 8b       	std	Y+23, r26	; 0x17
    1cc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cce:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	5f e3       	ldi	r21, 0x3F	; 63
    1cda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cde:	88 23       	and	r24, r24
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <LCD_WriteData+0xaa>
		__ticks = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9c 8b       	std	Y+20, r25	; 0x14
    1ce8:	8b 8b       	std	Y+19, r24	; 0x13
    1cea:	3f c0       	rjmp	.+126    	; 0x1d6a <LCD_WriteData+0x128>
	else if (__tmp > 65535)
    1cec:	6d 89       	ldd	r22, Y+21	; 0x15
    1cee:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	3f ef       	ldi	r19, 0xFF	; 255
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	57 e4       	ldi	r21, 0x47	; 71
    1cfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	4c f5       	brge	.+82     	; 0x1d56 <LCD_WriteData+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	69 8d       	ldd	r22, Y+25	; 0x19
    1d06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e2       	ldi	r20, 0x20	; 32
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9c 8b       	std	Y+20, r25	; 0x14
    1d2a:	8b 8b       	std	Y+19, r24	; 0x13
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <LCD_WriteData+0x10a>
    1d2e:	89 e1       	ldi	r24, 0x19	; 25
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9a 8b       	std	Y+18, r25	; 0x12
    1d34:	89 8b       	std	Y+17, r24	; 0x11
    1d36:	89 89       	ldd	r24, Y+17	; 0x11
    1d38:	9a 89       	ldd	r25, Y+18	; 0x12
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <LCD_WriteData+0xf8>
    1d3e:	9a 8b       	std	Y+18, r25	; 0x12
    1d40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d42:	8b 89       	ldd	r24, Y+19	; 0x13
    1d44:	9c 89       	ldd	r25, Y+20	; 0x14
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	9c 8b       	std	Y+20, r25	; 0x14
    1d4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	69 f7       	brne	.-38     	; 0x1d2e <LCD_WriteData+0xec>
    1d54:	14 c0       	rjmp	.+40     	; 0x1d7e <LCD_WriteData+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d56:	6d 89       	ldd	r22, Y+21	; 0x15
    1d58:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9c 8b       	std	Y+20, r25	; 0x14
    1d68:	8b 8b       	std	Y+19, r24	; 0x13
    1d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6e:	98 8b       	std	Y+16, r25	; 0x10
    1d70:	8f 87       	std	Y+15, r24	; 0x0f
    1d72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d74:	98 89       	ldd	r25, Y+16	; 0x10
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_WriteData+0x134>
    1d7a:	98 8b       	std	Y+16, r25	; 0x10
    1d7c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	61 e0       	ldi	r22, 0x01	; 1
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_Low(com)));
    1d88:	a5 e3       	ldi	r26, 0x35	; 53
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e5 e3       	ldi	r30, 0x35	; 53
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	28 2f       	mov	r18, r24
    1d94:	2f 70       	andi	r18, 0x0F	; 15
    1d96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	8f 70       	andi	r24, 0x0F	; 15
    1d9e:	90 70       	andi	r25, 0x00	; 0
    1da0:	82 95       	swap	r24
    1da2:	92 95       	swap	r25
    1da4:	90 7f       	andi	r25, 0xF0	; 240
    1da6:	98 27       	eor	r25, r24
    1da8:	80 7f       	andi	r24, 0xF0	; 240
    1daa:	98 27       	eor	r25, r24
    1dac:	82 2b       	or	r24, r18
    1dae:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    1db0:	83 e0       	ldi	r24, 0x03	; 3
    1db2:	61 e0       	ldi	r22, 0x01	; 1
    1db4:	41 e0       	ldi	r20, 0x01	; 1
    1db6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a0 ea       	ldi	r26, 0xA0	; 160
    1dc0:	b1 e4       	ldi	r27, 0x41	; 65
    1dc2:	8b 87       	std	Y+11, r24	; 0x0b
    1dc4:	9c 87       	std	Y+12, r25	; 0x0c
    1dc6:	ad 87       	std	Y+13, r26	; 0x0d
    1dc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4a e7       	ldi	r20, 0x7A	; 122
    1dd8:	53 e4       	ldi	r21, 0x43	; 67
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	8f 83       	std	Y+7, r24	; 0x07
    1de4:	98 87       	std	Y+8, r25	; 0x08
    1de6:	a9 87       	std	Y+9, r26	; 0x09
    1de8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <LCD_WriteData+0x1ca>
		__ticks = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
    1e0a:	3f c0       	rjmp	.+126    	; 0x1e8a <LCD_WriteData+0x248>
	else if (__tmp > 65535)
    1e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0e:	78 85       	ldd	r23, Y+8	; 0x08
    1e10:	89 85       	ldd	r24, Y+9	; 0x09
    1e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	3f ef       	ldi	r19, 0xFF	; 255
    1e18:	4f e7       	ldi	r20, 0x7F	; 127
    1e1a:	57 e4       	ldi	r21, 0x47	; 71
    1e1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e20:	18 16       	cp	r1, r24
    1e22:	4c f5       	brge	.+82     	; 0x1e76 <LCD_WriteData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e2       	ldi	r20, 0x20	; 32
    1e32:	51 e4       	ldi	r21, 0x41	; 65
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	0f c0       	rjmp	.+30     	; 0x1e6c <LCD_WriteData+0x22a>
    1e4e:	89 e1       	ldi	r24, 0x19	; 25
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	8b 83       	std	Y+3, r24	; 0x03
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_WriteData+0x218>
    1e5e:	9c 83       	std	Y+4, r25	; 0x04
    1e60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	9e 83       	std	Y+6, r25	; 0x06
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	69 f7       	brne	.-38     	; 0x1e4e <LCD_WriteData+0x20c>
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <LCD_WriteData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	6f 81       	ldd	r22, Y+7	; 0x07
    1e78:	78 85       	ldd	r23, Y+8	; 0x08
    1e7a:	89 85       	ldd	r24, Y+9	; 0x09
    1e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	9a 81       	ldd	r25, Y+2	; 0x02
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_WriteData+0x254>
    1e9a:	9a 83       	std	Y+2, r25	; 0x02
    1e9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    1e9e:	83 e0       	ldi	r24, 0x03	; 3
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
	English_Char++;
    1ea8:	80 91 72 00 	lds	r24, 0x0072
    1eac:	8f 5f       	subi	r24, 0xFF	; 255
    1eae:	80 93 72 00 	sts	0x0072, r24

}
    1eb2:	6d 96       	adiw	r28, 0x1d	; 29
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <LCD_CLear>:

void LCD_CLear()
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	2e 97       	sbiw	r28, 0x0e	; 14
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x01);
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_WriteCommand>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	a0 ea       	ldi	r26, 0xA0	; 160
    1ee4:	b1 e4       	ldi	r27, 0x41	; 65
    1ee6:	8b 87       	std	Y+11, r24	; 0x0b
    1ee8:	9c 87       	std	Y+12, r25	; 0x0c
    1eea:	ad 87       	std	Y+13, r26	; 0x0d
    1eec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	4a e7       	ldi	r20, 0x7A	; 122
    1efc:	53 e4       	ldi	r21, 0x43	; 67
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	8f 83       	std	Y+7, r24	; 0x07
    1f08:	98 87       	std	Y+8, r25	; 0x08
    1f0a:	a9 87       	std	Y+9, r26	; 0x09
    1f0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f10:	78 85       	ldd	r23, Y+8	; 0x08
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e8       	ldi	r20, 0x80	; 128
    1f1c:	5f e3       	ldi	r21, 0x3F	; 63
    1f1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f22:	88 23       	and	r24, r24
    1f24:	2c f4       	brge	.+10     	; 0x1f30 <LCD_CLear+0x6c>
		__ticks = 1;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
    1f2e:	3f c0       	rjmp	.+126    	; 0x1fae <LCD_CLear+0xea>
	else if (__tmp > 65535)
    1f30:	6f 81       	ldd	r22, Y+7	; 0x07
    1f32:	78 85       	ldd	r23, Y+8	; 0x08
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	3f ef       	ldi	r19, 0xFF	; 255
    1f3c:	4f e7       	ldi	r20, 0x7F	; 127
    1f3e:	57 e4       	ldi	r21, 0x47	; 71
    1f40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f44:	18 16       	cp	r1, r24
    1f46:	4c f5       	brge	.+82     	; 0x1f9a <LCD_CLear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e2       	ldi	r20, 0x20	; 32
    1f56:	51 e4       	ldi	r21, 0x41	; 65
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	bc 01       	movw	r22, r24
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9e 83       	std	Y+6, r25	; 0x06
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
    1f70:	0f c0       	rjmp	.+30     	; 0x1f90 <LCD_CLear+0xcc>
    1f72:	89 e1       	ldi	r24, 0x19	; 25
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9c 83       	std	Y+4, r25	; 0x04
    1f78:	8b 83       	std	Y+3, r24	; 0x03
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LCD_CLear+0xba>
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f86:	8d 81       	ldd	r24, Y+5	; 0x05
    1f88:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	9e 81       	ldd	r25, Y+6	; 0x06
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	69 f7       	brne	.-38     	; 0x1f72 <LCD_CLear+0xae>
    1f98:	14 c0       	rjmp	.+40     	; 0x1fc2 <LCD_CLear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9c:	78 85       	ldd	r23, Y+8	; 0x08
    1f9e:	89 85       	ldd	r24, Y+9	; 0x09
    1fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb2:	9a 83       	std	Y+2, r25	; 0x02
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_CLear+0xf6>
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	charact_number=0;
    1fc2:	10 92 70 00 	sts	0x0070, r1
}
    1fc6:	2e 96       	adiw	r28, 0x0e	; 14
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <LCD_GoTo>:

void LCD_GoTo(u8 x, u8 y)
{
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <LCD_GoTo+0x6>
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	6a 83       	std	Y+2, r22	; 0x02
	if(y)
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	88 23       	and	r24, r24
    1fea:	29 f0       	breq	.+10     	; 0x1ff6 <LCD_GoTo+0x1e>
		English_Char=4*16+x;
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	80 5c       	subi	r24, 0xC0	; 192
    1ff0:	80 93 72 00 	sts	0x0072, r24
    1ff4:	03 c0       	rjmp	.+6      	; 0x1ffc <LCD_GoTo+0x24>
	else
		English_Char=x;
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	80 93 72 00 	sts	0x0072, r24

	LCD_Set_DD_Add(English_Char);
    1ffc:	80 91 72 00 	lds	r24, 0x0072
    2000:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <LCD_Set_DD_Add>

}
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <LCD_WrtireString>:


u8 LCD_WrtireString(u8* str)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <LCD_WrtireString+0x6>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <LCD_WrtireString+0x8>
    2016:	0f 92       	push	r0
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
	u8 count=0;
    2020:	1a 82       	std	Y+2, r1	; 0x02
	u8 size=0;
    2022:	19 82       	std	Y+1, r1	; 0x01
    2024:	06 c0       	rjmp	.+12     	; 0x2032 <LCD_WrtireString+0x24>

	while( (!((*(str+count))=='\0')) && size<=16)
	{
		count++;
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	8f 5f       	subi	r24, 0xFF	; 255
    202a:	8a 83       	std	Y+2, r24	; 0x02
		size++;
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	8f 5f       	subi	r24, 0xFF	; 255
    2030:	89 83       	std	Y+1, r24	; 0x01
u8 LCD_WrtireString(u8* str)
{
	u8 count=0;
	u8 size=0;

	while( (!((*(str+count))=='\0')) && size<=16)
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	9c 81       	ldd	r25, Y+4	; 0x04
    203c:	fc 01       	movw	r30, r24
    203e:	e2 0f       	add	r30, r18
    2040:	f3 1f       	adc	r31, r19
    2042:	80 81       	ld	r24, Z
    2044:	88 23       	and	r24, r24
    2046:	19 f0       	breq	.+6      	; 0x204e <LCD_WrtireString+0x40>
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	81 31       	cpi	r24, 0x11	; 17
    204c:	60 f3       	brcs	.-40     	; 0x2026 <LCD_WrtireString+0x18>
	{
		count++;
		size++;
	}

	if(size<=16)
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	81 31       	cpi	r24, 0x11	; 17
    2052:	b8 f4       	brcc	.+46     	; 0x2082 <LCD_WrtireString+0x74>
	{
		for(count=0;count<size;count++)
    2054:	1a 82       	std	Y+2, r1	; 0x02
    2056:	0e c0       	rjmp	.+28     	; 0x2074 <LCD_WrtireString+0x66>
			LCD_WriteData(*(str+count));
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	fc 01       	movw	r30, r24
    2064:	e2 0f       	add	r30, r18
    2066:	f3 1f       	adc	r31, r19
    2068:	80 81       	ld	r24, Z
    206a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
		size++;
	}

	if(size<=16)
	{
		for(count=0;count<size;count++)
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	8f 5f       	subi	r24, 0xFF	; 255
    2072:	8a 83       	std	Y+2, r24	; 0x02
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	98 17       	cp	r25, r24
    207a:	70 f3       	brcs	.-36     	; 0x2058 <LCD_WrtireString+0x4a>
			LCD_WriteData(*(str+count));
		return 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <LCD_WrtireString+0x76>
	}
	else
		return 0;
    2082:	1d 82       	std	Y+5, r1	; 0x05
    2084:	8d 81       	ldd	r24, Y+5	; 0x05

}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <LCD_Set_CG_Add>:


void LCD_Set_CG_Add(u8 add)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	2f 97       	sbiw	r28, 0x0f	; 15
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	de bf       	out	0x3e, r29	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_WriteCommand(add);
    20ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ae:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_WriteCommand>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	a0 e2       	ldi	r26, 0x20	; 32
    20b8:	b1 e4       	ldi	r27, 0x41	; 65
    20ba:	8b 87       	std	Y+11, r24	; 0x0b
    20bc:	9c 87       	std	Y+12, r25	; 0x0c
    20be:	ad 87       	std	Y+13, r26	; 0x0d
    20c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	4a e7       	ldi	r20, 0x7A	; 122
    20d0:	53 e4       	ldi	r21, 0x43	; 67
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	8f 83       	std	Y+7, r24	; 0x07
    20dc:	98 87       	std	Y+8, r25	; 0x08
    20de:	a9 87       	std	Y+9, r26	; 0x09
    20e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e2:	6f 81       	ldd	r22, Y+7	; 0x07
    20e4:	78 85       	ldd	r23, Y+8	; 0x08
    20e6:	89 85       	ldd	r24, Y+9	; 0x09
    20e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e8       	ldi	r20, 0x80	; 128
    20f0:	5f e3       	ldi	r21, 0x3F	; 63
    20f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f6:	88 23       	and	r24, r24
    20f8:	2c f4       	brge	.+10     	; 0x2104 <LCD_Set_CG_Add+0x6e>
		__ticks = 1;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	3f c0       	rjmp	.+126    	; 0x2182 <LCD_Set_CG_Add+0xec>
	else if (__tmp > 65535)
    2104:	6f 81       	ldd	r22, Y+7	; 0x07
    2106:	78 85       	ldd	r23, Y+8	; 0x08
    2108:	89 85       	ldd	r24, Y+9	; 0x09
    210a:	9a 85       	ldd	r25, Y+10	; 0x0a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	3f ef       	ldi	r19, 0xFF	; 255
    2110:	4f e7       	ldi	r20, 0x7F	; 127
    2112:	57 e4       	ldi	r21, 0x47	; 71
    2114:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2118:	18 16       	cp	r1, r24
    211a:	4c f5       	brge	.+82     	; 0x216e <LCD_Set_CG_Add+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211c:	6b 85       	ldd	r22, Y+11	; 0x0b
    211e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2120:	8d 85       	ldd	r24, Y+13	; 0x0d
    2122:	9e 85       	ldd	r25, Y+14	; 0x0e
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e2       	ldi	r20, 0x20	; 32
    212a:	51 e4       	ldi	r21, 0x41	; 65
    212c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	bc 01       	movw	r22, r24
    2136:	cd 01       	movw	r24, r26
    2138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
    2144:	0f c0       	rjmp	.+30     	; 0x2164 <LCD_Set_CG_Add+0xce>
    2146:	89 e1       	ldi	r24, 0x19	; 25
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9c 83       	std	Y+4, r25	; 0x04
    214c:	8b 83       	std	Y+3, r24	; 0x03
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <LCD_Set_CG_Add+0xbc>
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215a:	8d 81       	ldd	r24, Y+5	; 0x05
    215c:	9e 81       	ldd	r25, Y+6	; 0x06
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	69 f7       	brne	.-38     	; 0x2146 <LCD_Set_CG_Add+0xb0>
    216c:	14 c0       	rjmp	.+40     	; 0x2196 <LCD_Set_CG_Add+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216e:	6f 81       	ldd	r22, Y+7	; 0x07
    2170:	78 85       	ldd	r23, Y+8	; 0x08
    2172:	89 85       	ldd	r24, Y+9	; 0x09
    2174:	9a 85       	ldd	r25, Y+10	; 0x0a
    2176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <LCD_Set_CG_Add+0xf8>
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    2196:	2f 96       	adiw	r28, 0x0f	; 15
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <LCD_Shift>:

void LCD_Shift()
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	2e 97       	sbiw	r28, 0x0e	; 14
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x1c);
    21bc:	8c e1       	ldi	r24, 0x1C	; 28
    21be:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_WriteCommand>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a0 e2       	ldi	r26, 0x20	; 32
    21c8:	b1 e4       	ldi	r27, 0x41	; 65
    21ca:	8b 87       	std	Y+11, r24	; 0x0b
    21cc:	9c 87       	std	Y+12, r25	; 0x0c
    21ce:	ad 87       	std	Y+13, r26	; 0x0d
    21d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	4a e7       	ldi	r20, 0x7A	; 122
    21e0:	53 e4       	ldi	r21, 0x43	; 67
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	8f 83       	std	Y+7, r24	; 0x07
    21ec:	98 87       	std	Y+8, r25	; 0x08
    21ee:	a9 87       	std	Y+9, r26	; 0x09
    21f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f2:	6f 81       	ldd	r22, Y+7	; 0x07
    21f4:	78 85       	ldd	r23, Y+8	; 0x08
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e8       	ldi	r20, 0x80	; 128
    2200:	5f e3       	ldi	r21, 0x3F	; 63
    2202:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2206:	88 23       	and	r24, r24
    2208:	2c f4       	brge	.+10     	; 0x2214 <LCD_Shift+0x6c>
		__ticks = 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	3f c0       	rjmp	.+126    	; 0x2292 <LCD_Shift+0xea>
	else if (__tmp > 65535)
    2214:	6f 81       	ldd	r22, Y+7	; 0x07
    2216:	78 85       	ldd	r23, Y+8	; 0x08
    2218:	89 85       	ldd	r24, Y+9	; 0x09
    221a:	9a 85       	ldd	r25, Y+10	; 0x0a
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	3f ef       	ldi	r19, 0xFF	; 255
    2220:	4f e7       	ldi	r20, 0x7F	; 127
    2222:	57 e4       	ldi	r21, 0x47	; 71
    2224:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2228:	18 16       	cp	r1, r24
    222a:	4c f5       	brge	.+82     	; 0x227e <LCD_Shift+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222c:	6b 85       	ldd	r22, Y+11	; 0x0b
    222e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	9e 85       	ldd	r25, Y+14	; 0x0e
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e2       	ldi	r20, 0x20	; 32
    223a:	51 e4       	ldi	r21, 0x41	; 65
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
    2254:	0f c0       	rjmp	.+30     	; 0x2274 <LCD_Shift+0xcc>
    2256:	89 e1       	ldi	r24, 0x19	; 25
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9c 83       	std	Y+4, r25	; 0x04
    225c:	8b 83       	std	Y+3, r24	; 0x03
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <LCD_Shift+0xba>
    2266:	9c 83       	std	Y+4, r25	; 0x04
    2268:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	9e 81       	ldd	r25, Y+6	; 0x06
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	69 f7       	brne	.-38     	; 0x2256 <LCD_Shift+0xae>
    227c:	14 c0       	rjmp	.+40     	; 0x22a6 <LCD_Shift+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227e:	6f 81       	ldd	r22, Y+7	; 0x07
    2280:	78 85       	ldd	r23, Y+8	; 0x08
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_Shift+0xf6>
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    22a6:	2e 96       	adiw	r28, 0x0e	; 14
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <LCD_Set_Entry_Mode>:
void LCD_Set_Entry_Mode(u8 I_D)
{
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	2f 97       	sbiw	r28, 0x0f	; 15
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	8f 87       	std	Y+15, r24	; 0x0f
	if(I_D)
    22ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d0:	88 23       	and	r24, r24
    22d2:	21 f0       	breq	.+8      	; 0x22dc <LCD_Set_Entry_Mode+0x24>
		LCD_WriteCommand(0x06);
    22d4:	86 e0       	ldi	r24, 0x06	; 6
    22d6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_WriteCommand>
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <LCD_Set_Entry_Mode+0x2a>
	else
		LCD_WriteCommand(0x07);
    22dc:	87 e0       	ldi	r24, 0x07	; 7
    22de:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_WriteCommand>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	a0 e2       	ldi	r26, 0x20	; 32
    22e8:	b1 e4       	ldi	r27, 0x41	; 65
    22ea:	8b 87       	std	Y+11, r24	; 0x0b
    22ec:	9c 87       	std	Y+12, r25	; 0x0c
    22ee:	ad 87       	std	Y+13, r26	; 0x0d
    22f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	4a e7       	ldi	r20, 0x7A	; 122
    2300:	53 e4       	ldi	r21, 0x43	; 67
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	8f 83       	std	Y+7, r24	; 0x07
    230c:	98 87       	std	Y+8, r25	; 0x08
    230e:	a9 87       	std	Y+9, r26	; 0x09
    2310:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2312:	6f 81       	ldd	r22, Y+7	; 0x07
    2314:	78 85       	ldd	r23, Y+8	; 0x08
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e8       	ldi	r20, 0x80	; 128
    2320:	5f e3       	ldi	r21, 0x3F	; 63
    2322:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2326:	88 23       	and	r24, r24
    2328:	2c f4       	brge	.+10     	; 0x2334 <LCD_Set_Entry_Mode+0x7c>
		__ticks = 1;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	9e 83       	std	Y+6, r25	; 0x06
    2330:	8d 83       	std	Y+5, r24	; 0x05
    2332:	3f c0       	rjmp	.+126    	; 0x23b2 <LCD_Set_Entry_Mode+0xfa>
	else if (__tmp > 65535)
    2334:	6f 81       	ldd	r22, Y+7	; 0x07
    2336:	78 85       	ldd	r23, Y+8	; 0x08
    2338:	89 85       	ldd	r24, Y+9	; 0x09
    233a:	9a 85       	ldd	r25, Y+10	; 0x0a
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	3f ef       	ldi	r19, 0xFF	; 255
    2340:	4f e7       	ldi	r20, 0x7F	; 127
    2342:	57 e4       	ldi	r21, 0x47	; 71
    2344:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2348:	18 16       	cp	r1, r24
    234a:	4c f5       	brge	.+82     	; 0x239e <LCD_Set_Entry_Mode+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234c:	6b 85       	ldd	r22, Y+11	; 0x0b
    234e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2350:	8d 85       	ldd	r24, Y+13	; 0x0d
    2352:	9e 85       	ldd	r25, Y+14	; 0x0e
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e2       	ldi	r20, 0x20	; 32
    235a:	51 e4       	ldi	r21, 0x41	; 65
    235c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	0f c0       	rjmp	.+30     	; 0x2394 <LCD_Set_Entry_Mode+0xdc>
    2376:	89 e1       	ldi	r24, 0x19	; 25
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9c 83       	std	Y+4, r25	; 0x04
    237c:	8b 83       	std	Y+3, r24	; 0x03
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_Set_Entry_Mode+0xca>
    2386:	9c 83       	std	Y+4, r25	; 0x04
    2388:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	9e 83       	std	Y+6, r25	; 0x06
    2392:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	9e 81       	ldd	r25, Y+6	; 0x06
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	69 f7       	brne	.-38     	; 0x2376 <LCD_Set_Entry_Mode+0xbe>
    239c:	14 c0       	rjmp	.+40     	; 0x23c6 <LCD_Set_Entry_Mode+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239e:	6f 81       	ldd	r22, Y+7	; 0x07
    23a0:	78 85       	ldd	r23, Y+8	; 0x08
    23a2:	89 85       	ldd	r24, Y+9	; 0x09
    23a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	9e 81       	ldd	r25, Y+6	; 0x06
    23b6:	9a 83       	std	Y+2, r25	; 0x02
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	9a 81       	ldd	r25, Y+2	; 0x02
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_Set_Entry_Mode+0x106>
    23c2:	9a 83       	std	Y+2, r25	; 0x02
    23c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    23c6:	2f 96       	adiw	r28, 0x0f	; 15
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	f8 94       	cli
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <LCD_Set_DD_Add>:

void LCD_Set_DD_Add(u8 add)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	2f 97       	sbiw	r28, 0x0f	; 15
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_WriteCommand(add);
    23ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_WriteCommand>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a0 e2       	ldi	r26, 0x20	; 32
    23fa:	b1 e4       	ldi	r27, 0x41	; 65
    23fc:	8b 87       	std	Y+11, r24	; 0x0b
    23fe:	9c 87       	std	Y+12, r25	; 0x0c
    2400:	ad 87       	std	Y+13, r26	; 0x0d
    2402:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2404:	6b 85       	ldd	r22, Y+11	; 0x0b
    2406:	7c 85       	ldd	r23, Y+12	; 0x0c
    2408:	8d 85       	ldd	r24, Y+13	; 0x0d
    240a:	9e 85       	ldd	r25, Y+14	; 0x0e
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	4a e7       	ldi	r20, 0x7A	; 122
    2412:	53 e4       	ldi	r21, 0x43	; 67
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	8f 83       	std	Y+7, r24	; 0x07
    241e:	98 87       	std	Y+8, r25	; 0x08
    2420:	a9 87       	std	Y+9, r26	; 0x09
    2422:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2424:	6f 81       	ldd	r22, Y+7	; 0x07
    2426:	78 85       	ldd	r23, Y+8	; 0x08
    2428:	89 85       	ldd	r24, Y+9	; 0x09
    242a:	9a 85       	ldd	r25, Y+10	; 0x0a
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e8       	ldi	r20, 0x80	; 128
    2432:	5f e3       	ldi	r21, 0x3F	; 63
    2434:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2438:	88 23       	and	r24, r24
    243a:	2c f4       	brge	.+10     	; 0x2446 <LCD_Set_DD_Add+0x6e>
		__ticks = 1;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	3f c0       	rjmp	.+126    	; 0x24c4 <LCD_Set_DD_Add+0xec>
	else if (__tmp > 65535)
    2446:	6f 81       	ldd	r22, Y+7	; 0x07
    2448:	78 85       	ldd	r23, Y+8	; 0x08
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	9a 85       	ldd	r25, Y+10	; 0x0a
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	3f ef       	ldi	r19, 0xFF	; 255
    2452:	4f e7       	ldi	r20, 0x7F	; 127
    2454:	57 e4       	ldi	r21, 0x47	; 71
    2456:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    245a:	18 16       	cp	r1, r24
    245c:	4c f5       	brge	.+82     	; 0x24b0 <LCD_Set_DD_Add+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2460:	7c 85       	ldd	r23, Y+12	; 0x0c
    2462:	8d 85       	ldd	r24, Y+13	; 0x0d
    2464:	9e 85       	ldd	r25, Y+14	; 0x0e
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e2       	ldi	r20, 0x20	; 32
    246c:	51 e4       	ldi	r21, 0x41	; 65
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <LCD_Set_DD_Add+0xce>
    2488:	89 e1       	ldi	r24, 0x19	; 25
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	8b 83       	std	Y+3, r24	; 0x03
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_Set_DD_Add+0xbc>
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	69 f7       	brne	.-38     	; 0x2488 <LCD_Set_DD_Add+0xb0>
    24ae:	14 c0       	rjmp	.+40     	; 0x24d8 <LCD_Set_DD_Add+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	9a 81       	ldd	r25, Y+2	; 0x02
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <LCD_Set_DD_Add+0xf8>
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    24d8:	2f 96       	adiw	r28, 0x0f	; 15
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <LCD_Arabic_Dict>:


void LCD_Arabic_Dict(u8 charact)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <LCD_Arabic_Dict+0x6>
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <LCD_Arabic_Dict+0x8>
    24f2:	0f 92       	push	r0
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	8b 83       	std	Y+3, r24	; 0x03
	LCD_Set_CG_Add(0x40+8*charact_number);
    24fa:	80 91 70 00 	lds	r24, 0x0070
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	08 96       	adiw	r24, 0x08	; 8
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_Set_CG_Add>
	switch (charact)
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	3d 83       	std	Y+5, r19	; 0x05
    251c:	2c 83       	std	Y+4, r18	; 0x04
    251e:	8c 81       	ldd	r24, Y+4	; 0x04
    2520:	9d 81       	ldd	r25, Y+5	; 0x05
    2522:	8e 30       	cpi	r24, 0x0E	; 14
    2524:	91 05       	cpc	r25, r1
    2526:	09 f4       	brne	.+2      	; 0x252a <LCD_Arabic_Dict+0x40>
    2528:	fc c1       	rjmp	.+1016   	; 0x2922 <LCD_Arabic_Dict+0x438>
    252a:	2c 81       	ldd	r18, Y+4	; 0x04
    252c:	3d 81       	ldd	r19, Y+5	; 0x05
    252e:	2f 30       	cpi	r18, 0x0F	; 15
    2530:	31 05       	cpc	r19, r1
    2532:	0c f0       	brlt	.+2      	; 0x2536 <LCD_Arabic_Dict+0x4c>
    2534:	55 c0       	rjmp	.+170    	; 0x25e0 <LCD_Arabic_Dict+0xf6>
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	9d 81       	ldd	r25, Y+5	; 0x05
    253a:	87 30       	cpi	r24, 0x07	; 7
    253c:	91 05       	cpc	r25, r1
    253e:	09 f4       	brne	.+2      	; 0x2542 <LCD_Arabic_Dict+0x58>
    2540:	41 c1       	rjmp	.+642    	; 0x27c4 <LCD_Arabic_Dict+0x2da>
    2542:	2c 81       	ldd	r18, Y+4	; 0x04
    2544:	3d 81       	ldd	r19, Y+5	; 0x05
    2546:	28 30       	cpi	r18, 0x08	; 8
    2548:	31 05       	cpc	r19, r1
    254a:	2c f5       	brge	.+74     	; 0x2596 <LCD_Arabic_Dict+0xac>
    254c:	8c 81       	ldd	r24, Y+4	; 0x04
    254e:	9d 81       	ldd	r25, Y+5	; 0x05
    2550:	83 30       	cpi	r24, 0x03	; 3
    2552:	91 05       	cpc	r25, r1
    2554:	09 f4       	brne	.+2      	; 0x2558 <LCD_Arabic_Dict+0x6e>
    2556:	d2 c0       	rjmp	.+420    	; 0x26fc <LCD_Arabic_Dict+0x212>
    2558:	2c 81       	ldd	r18, Y+4	; 0x04
    255a:	3d 81       	ldd	r19, Y+5	; 0x05
    255c:	24 30       	cpi	r18, 0x04	; 4
    255e:	31 05       	cpc	r19, r1
    2560:	6c f4       	brge	.+26     	; 0x257c <LCD_Arabic_Dict+0x92>
    2562:	8c 81       	ldd	r24, Y+4	; 0x04
    2564:	9d 81       	ldd	r25, Y+5	; 0x05
    2566:	81 30       	cpi	r24, 0x01	; 1
    2568:	91 05       	cpc	r25, r1
    256a:	09 f4       	brne	.+2      	; 0x256e <LCD_Arabic_Dict+0x84>
    256c:	94 c0       	rjmp	.+296    	; 0x2696 <LCD_Arabic_Dict+0x1ac>
    256e:	2c 81       	ldd	r18, Y+4	; 0x04
    2570:	3d 81       	ldd	r19, Y+5	; 0x05
    2572:	22 30       	cpi	r18, 0x02	; 2
    2574:	31 05       	cpc	r19, r1
    2576:	09 f4       	brne	.+2      	; 0x257a <LCD_Arabic_Dict+0x90>
    2578:	a8 c0       	rjmp	.+336    	; 0x26ca <LCD_Arabic_Dict+0x1e0>
    257a:	49 c3       	rjmp	.+1682   	; 0x2c0e <LCD_Arabic_Dict+0x724>
    257c:	8c 81       	ldd	r24, Y+4	; 0x04
    257e:	9d 81       	ldd	r25, Y+5	; 0x05
    2580:	85 30       	cpi	r24, 0x05	; 5
    2582:	91 05       	cpc	r25, r1
    2584:	09 f4       	brne	.+2      	; 0x2588 <LCD_Arabic_Dict+0x9e>
    2586:	ec c0       	rjmp	.+472    	; 0x2760 <LCD_Arabic_Dict+0x276>
    2588:	2c 81       	ldd	r18, Y+4	; 0x04
    258a:	3d 81       	ldd	r19, Y+5	; 0x05
    258c:	26 30       	cpi	r18, 0x06	; 6
    258e:	31 05       	cpc	r19, r1
    2590:	0c f0       	brlt	.+2      	; 0x2594 <LCD_Arabic_Dict+0xaa>
    2592:	ff c0       	rjmp	.+510    	; 0x2792 <LCD_Arabic_Dict+0x2a8>
    2594:	cc c0       	rjmp	.+408    	; 0x272e <LCD_Arabic_Dict+0x244>
    2596:	8c 81       	ldd	r24, Y+4	; 0x04
    2598:	9d 81       	ldd	r25, Y+5	; 0x05
    259a:	8a 30       	cpi	r24, 0x0A	; 10
    259c:	91 05       	cpc	r25, r1
    259e:	09 f4       	brne	.+2      	; 0x25a2 <LCD_Arabic_Dict+0xb8>
    25a0:	5c c1       	rjmp	.+696    	; 0x285a <LCD_Arabic_Dict+0x370>
    25a2:	2c 81       	ldd	r18, Y+4	; 0x04
    25a4:	3d 81       	ldd	r19, Y+5	; 0x05
    25a6:	2b 30       	cpi	r18, 0x0B	; 11
    25a8:	31 05       	cpc	r19, r1
    25aa:	6c f4       	brge	.+26     	; 0x25c6 <LCD_Arabic_Dict+0xdc>
    25ac:	8c 81       	ldd	r24, Y+4	; 0x04
    25ae:	9d 81       	ldd	r25, Y+5	; 0x05
    25b0:	88 30       	cpi	r24, 0x08	; 8
    25b2:	91 05       	cpc	r25, r1
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <LCD_Arabic_Dict+0xce>
    25b6:	1f c1       	rjmp	.+574    	; 0x27f6 <LCD_Arabic_Dict+0x30c>
    25b8:	2c 81       	ldd	r18, Y+4	; 0x04
    25ba:	3d 81       	ldd	r19, Y+5	; 0x05
    25bc:	29 30       	cpi	r18, 0x09	; 9
    25be:	31 05       	cpc	r19, r1
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <LCD_Arabic_Dict+0xda>
    25c2:	32 c1       	rjmp	.+612    	; 0x2828 <LCD_Arabic_Dict+0x33e>
    25c4:	24 c3       	rjmp	.+1608   	; 0x2c0e <LCD_Arabic_Dict+0x724>
    25c6:	8c 81       	ldd	r24, Y+4	; 0x04
    25c8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ca:	8c 30       	cpi	r24, 0x0C	; 12
    25cc:	91 05       	cpc	r25, r1
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <LCD_Arabic_Dict+0xe8>
    25d0:	76 c1       	rjmp	.+748    	; 0x28be <LCD_Arabic_Dict+0x3d4>
    25d2:	2c 81       	ldd	r18, Y+4	; 0x04
    25d4:	3d 81       	ldd	r19, Y+5	; 0x05
    25d6:	2d 30       	cpi	r18, 0x0D	; 13
    25d8:	31 05       	cpc	r19, r1
    25da:	0c f0       	brlt	.+2      	; 0x25de <LCD_Arabic_Dict+0xf4>
    25dc:	89 c1       	rjmp	.+786    	; 0x28f0 <LCD_Arabic_Dict+0x406>
    25de:	56 c1       	rjmp	.+684    	; 0x288c <LCD_Arabic_Dict+0x3a2>
    25e0:	8c 81       	ldd	r24, Y+4	; 0x04
    25e2:	9d 81       	ldd	r25, Y+5	; 0x05
    25e4:	85 31       	cpi	r24, 0x15	; 21
    25e6:	91 05       	cpc	r25, r1
    25e8:	09 f4       	brne	.+2      	; 0x25ec <LCD_Arabic_Dict+0x102>
    25ea:	4a c2       	rjmp	.+1172   	; 0x2a80 <LCD_Arabic_Dict+0x596>
    25ec:	2c 81       	ldd	r18, Y+4	; 0x04
    25ee:	3d 81       	ldd	r19, Y+5	; 0x05
    25f0:	26 31       	cpi	r18, 0x16	; 22
    25f2:	31 05       	cpc	r19, r1
    25f4:	2c f5       	brge	.+74     	; 0x2640 <LCD_Arabic_Dict+0x156>
    25f6:	8c 81       	ldd	r24, Y+4	; 0x04
    25f8:	9d 81       	ldd	r25, Y+5	; 0x05
    25fa:	81 31       	cpi	r24, 0x11	; 17
    25fc:	91 05       	cpc	r25, r1
    25fe:	09 f4       	brne	.+2      	; 0x2602 <LCD_Arabic_Dict+0x118>
    2600:	db c1       	rjmp	.+950    	; 0x29b8 <LCD_Arabic_Dict+0x4ce>
    2602:	2c 81       	ldd	r18, Y+4	; 0x04
    2604:	3d 81       	ldd	r19, Y+5	; 0x05
    2606:	22 31       	cpi	r18, 0x12	; 18
    2608:	31 05       	cpc	r19, r1
    260a:	6c f4       	brge	.+26     	; 0x2626 <LCD_Arabic_Dict+0x13c>
    260c:	8c 81       	ldd	r24, Y+4	; 0x04
    260e:	9d 81       	ldd	r25, Y+5	; 0x05
    2610:	8f 30       	cpi	r24, 0x0F	; 15
    2612:	91 05       	cpc	r25, r1
    2614:	09 f4       	brne	.+2      	; 0x2618 <LCD_Arabic_Dict+0x12e>
    2616:	9e c1       	rjmp	.+828    	; 0x2954 <LCD_Arabic_Dict+0x46a>
    2618:	2c 81       	ldd	r18, Y+4	; 0x04
    261a:	3d 81       	ldd	r19, Y+5	; 0x05
    261c:	20 31       	cpi	r18, 0x10	; 16
    261e:	31 05       	cpc	r19, r1
    2620:	09 f4       	brne	.+2      	; 0x2624 <LCD_Arabic_Dict+0x13a>
    2622:	b1 c1       	rjmp	.+866    	; 0x2986 <LCD_Arabic_Dict+0x49c>
    2624:	f4 c2       	rjmp	.+1512   	; 0x2c0e <LCD_Arabic_Dict+0x724>
    2626:	8c 81       	ldd	r24, Y+4	; 0x04
    2628:	9d 81       	ldd	r25, Y+5	; 0x05
    262a:	83 31       	cpi	r24, 0x13	; 19
    262c:	91 05       	cpc	r25, r1
    262e:	09 f4       	brne	.+2      	; 0x2632 <LCD_Arabic_Dict+0x148>
    2630:	f5 c1       	rjmp	.+1002   	; 0x2a1c <LCD_Arabic_Dict+0x532>
    2632:	2c 81       	ldd	r18, Y+4	; 0x04
    2634:	3d 81       	ldd	r19, Y+5	; 0x05
    2636:	24 31       	cpi	r18, 0x14	; 20
    2638:	31 05       	cpc	r19, r1
    263a:	0c f0       	brlt	.+2      	; 0x263e <LCD_Arabic_Dict+0x154>
    263c:	08 c2       	rjmp	.+1040   	; 0x2a4e <LCD_Arabic_Dict+0x564>
    263e:	d5 c1       	rjmp	.+938    	; 0x29ea <LCD_Arabic_Dict+0x500>
    2640:	8c 81       	ldd	r24, Y+4	; 0x04
    2642:	9d 81       	ldd	r25, Y+5	; 0x05
    2644:	89 31       	cpi	r24, 0x19	; 25
    2646:	91 05       	cpc	r25, r1
    2648:	09 f4       	brne	.+2      	; 0x264c <LCD_Arabic_Dict+0x162>
    264a:	7e c2       	rjmp	.+1276   	; 0x2b48 <LCD_Arabic_Dict+0x65e>
    264c:	2c 81       	ldd	r18, Y+4	; 0x04
    264e:	3d 81       	ldd	r19, Y+5	; 0x05
    2650:	2a 31       	cpi	r18, 0x1A	; 26
    2652:	31 05       	cpc	r19, r1
    2654:	6c f4       	brge	.+26     	; 0x2670 <LCD_Arabic_Dict+0x186>
    2656:	8c 81       	ldd	r24, Y+4	; 0x04
    2658:	9d 81       	ldd	r25, Y+5	; 0x05
    265a:	87 31       	cpi	r24, 0x17	; 23
    265c:	91 05       	cpc	r25, r1
    265e:	09 f4       	brne	.+2      	; 0x2662 <LCD_Arabic_Dict+0x178>
    2660:	41 c2       	rjmp	.+1154   	; 0x2ae4 <LCD_Arabic_Dict+0x5fa>
    2662:	2c 81       	ldd	r18, Y+4	; 0x04
    2664:	3d 81       	ldd	r19, Y+5	; 0x05
    2666:	28 31       	cpi	r18, 0x18	; 24
    2668:	31 05       	cpc	r19, r1
    266a:	0c f0       	brlt	.+2      	; 0x266e <LCD_Arabic_Dict+0x184>
    266c:	54 c2       	rjmp	.+1192   	; 0x2b16 <LCD_Arabic_Dict+0x62c>
    266e:	21 c2       	rjmp	.+1090   	; 0x2ab2 <LCD_Arabic_Dict+0x5c8>
    2670:	8c 81       	ldd	r24, Y+4	; 0x04
    2672:	9d 81       	ldd	r25, Y+5	; 0x05
    2674:	8b 31       	cpi	r24, 0x1B	; 27
    2676:	91 05       	cpc	r25, r1
    2678:	09 f4       	brne	.+2      	; 0x267c <LCD_Arabic_Dict+0x192>
    267a:	98 c2       	rjmp	.+1328   	; 0x2bac <LCD_Arabic_Dict+0x6c2>
    267c:	2c 81       	ldd	r18, Y+4	; 0x04
    267e:	3d 81       	ldd	r19, Y+5	; 0x05
    2680:	2b 31       	cpi	r18, 0x1B	; 27
    2682:	31 05       	cpc	r19, r1
    2684:	0c f4       	brge	.+2      	; 0x2688 <LCD_Arabic_Dict+0x19e>
    2686:	79 c2       	rjmp	.+1266   	; 0x2b7a <LCD_Arabic_Dict+0x690>
    2688:	8c 81       	ldd	r24, Y+4	; 0x04
    268a:	9d 81       	ldd	r25, Y+5	; 0x05
    268c:	8c 31       	cpi	r24, 0x1C	; 28
    268e:	91 05       	cpc	r25, r1
    2690:	09 f4       	brne	.+2      	; 0x2694 <LCD_Arabic_Dict+0x1aa>
    2692:	a5 c2       	rjmp	.+1354   	; 0x2bde <LCD_Arabic_Dict+0x6f4>
    2694:	bc c2       	rjmp	.+1400   	; 0x2c0e <LCD_Arabic_Dict+0x724>
	{
	int count;
	case 1:
		/* alf */
	    for(count=0;count<5;count++)
    2696:	1a 82       	std	Y+2, r1	; 0x02
    2698:	19 82       	std	Y+1, r1	; 0x01
    269a:	08 c0       	rjmp	.+16     	; 0x26ac <LCD_Arabic_Dict+0x1c2>
	    	LCD_WriteData(0x04);
    269c:	84 e0       	ldi	r24, 0x04	; 4
    269e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	switch (charact)
	{
	int count;
	case 1:
		/* alf */
	    for(count=0;count<5;count++)
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	9a 81       	ldd	r25, Y+2	; 0x02
    26a6:	01 96       	adiw	r24, 0x01	; 1
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	85 30       	cpi	r24, 0x05	; 5
    26b2:	91 05       	cpc	r25, r1
    26b4:	9c f3       	brlt	.-26     	; 0x269c <LCD_Arabic_Dict+0x1b2>
	    	LCD_WriteData(0x04);
	    LCD_WriteData(0x07);
    26b6:	87 e0       	ldi	r24, 0x07	; 7
    26b8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    26c8:	a2 c2       	rjmp	.+1348   	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 2:
		/* ba2 */
	    LCD_WriteData(0x00);
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0xff);
    26e8:	8f ef       	ldi	r24, 0xFF	; 255
    26ea:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    26fa:	89 c2       	rjmp	.+1298   	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 3:
		/* ta2 */
	    LCD_WriteData(0x00);
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0xf5);
    270e:	85 ef       	ldi	r24, 0xF5	; 245
    2710:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0xff);
    271a:	8f ef       	ldi	r24, 0xFF	; 255
    271c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    272c:	70 c2       	rjmp	.+1248   	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 4:
		/* tha2 */
	    LCD_WriteData(0x00);
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x08);
    273a:	88 e0       	ldi	r24, 0x08	; 8
    273c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0xf5);
    2740:	85 ef       	ldi	r24, 0xF5	; 245
    2742:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0xff);
    274c:	8f ef       	ldi	r24, 0xFF	; 255
    274e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    275e:	57 c2       	rjmp	.+1198   	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 5:
		/* gem */
	    LCD_WriteData(0x00);
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x0c);
    276c:	8c e0       	ldi	r24, 0x0C	; 12
    276e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0xf2);
    2772:	82 ef       	ldi	r24, 0xF2	; 242
    2774:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0xff);
    277e:	8f ef       	ldi	r24, 0xFF	; 255
    2780:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2790:	3e c2       	rjmp	.+1148   	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 6:
		/* 7a2 */
	    LCD_WriteData(0x00);
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x0c);
    279e:	8c e0       	ldi	r24, 0x0C	; 12
    27a0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0xf2);
    27a4:	82 ef       	ldi	r24, 0xF2	; 242
    27a6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0xff);
    27b0:	8f ef       	ldi	r24, 0xFF	; 255
    27b2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    27c2:	25 c2       	rjmp	.+1098   	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 7:
		/* kha2 */
	    LCD_WriteData(0x04);
    27c4:	84 e0       	ldi	r24, 0x04	; 4
    27c6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x0c);
    27d0:	8c e0       	ldi	r24, 0x0C	; 12
    27d2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0xf2);
    27d6:	82 ef       	ldi	r24, 0xF2	; 242
    27d8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0xff);
    27e2:	8f ef       	ldi	r24, 0xFF	; 255
    27e4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    27f4:	0c c2       	rjmp	.+1048   	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 8:
		/* dal */
	    LCD_WriteData(0x00);
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x0f);
    2814:	8f e0       	ldi	r24, 0x0F	; 15
    2816:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2826:	f3 c1       	rjmp	.+998    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 9:
		/* zal */
	    LCD_WriteData(0x00);
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x0f);
    2846:	8f e0       	ldi	r24, 0x0F	; 15
    2848:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2858:	da c1       	rjmp	.+948    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 10:
		/* ra2 */
	    LCD_WriteData(0x00);
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2878:	83 e0       	ldi	r24, 0x03	; 3
    287a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x02);
    287e:	82 e0       	ldi	r24, 0x02	; 2
    2880:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x04);
    2884:	84 e0       	ldi	r24, 0x04	; 4
    2886:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    288a:	c1 c1       	rjmp	.+898    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 11:
		/* zan */
	    LCD_WriteData(0x00);
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x02);
    289e:	82 e0       	ldi	r24, 0x02	; 2
    28a0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x03);
    28aa:	83 e0       	ldi	r24, 0x03	; 3
    28ac:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x02);
    28b0:	82 e0       	ldi	r24, 0x02	; 2
    28b2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x04);
    28b6:	84 e0       	ldi	r24, 0x04	; 4
    28b8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    28bc:	a8 c1       	rjmp	.+848    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 12:
		/* seen */
	    LCD_WriteData(0x00);
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x15);
    28d0:	85 e1       	ldi	r24, 0x15	; 21
    28d2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x15);
    28d6:	85 e1       	ldi	r24, 0x15	; 21
    28d8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    28dc:	8f e1       	ldi	r24, 0x1F	; 31
    28de:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    28ee:	8f c1       	rjmp	.+798    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 13:
		/* sheen */
	    LCD_WriteData(0x04);
    28f0:	84 e0       	ldi	r24, 0x04	; 4
    28f2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x0a);
    28f6:	8a e0       	ldi	r24, 0x0A	; 10
    28f8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x15);
    2902:	85 e1       	ldi	r24, 0x15	; 21
    2904:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x15);
    2908:	85 e1       	ldi	r24, 0x15	; 21
    290a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    290e:	8f e1       	ldi	r24, 0x1F	; 31
    2910:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2920:	76 c1       	rjmp	.+748    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 14:
		/* saad */
	    LCD_WriteData(0x00);
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x06);
    2934:	86 e0       	ldi	r24, 0x06	; 6
    2936:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x09);
    293a:	89 e0       	ldi	r24, 0x09	; 9
    293c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2940:	8f e1       	ldi	r24, 0x1F	; 31
    2942:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2952:	5d c1       	rjmp	.+698    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 15:
		/* daad */
	    LCD_WriteData(0x00);
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x04);
    295a:	84 e0       	ldi	r24, 0x04	; 4
    295c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x06);
    2966:	86 e0       	ldi	r24, 0x06	; 6
    2968:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x09);
    296c:	89 e0       	ldi	r24, 0x09	; 9
    296e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2972:	8f e1       	ldi	r24, 0x1F	; 31
    2974:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2984:	44 c1       	rjmp	.+648    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 16:
		/* taah */
	    LCD_WriteData(0x00);
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x08);
    298c:	88 e0       	ldi	r24, 0x08	; 8
    298e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2992:	88 e0       	ldi	r24, 0x08	; 8
    2994:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x0e);
    2998:	8e e0       	ldi	r24, 0x0E	; 14
    299a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x09);
    299e:	89 e0       	ldi	r24, 0x09	; 9
    29a0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    29a4:	8f e1       	ldi	r24, 0x1F	; 31
    29a6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    29b6:	2b c1       	rjmp	.+598    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 17:
	    /* zaah */
	    LCD_WriteData(0x00);
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x0a);
    29be:	8a e0       	ldi	r24, 0x0A	; 10
    29c0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x08);
    29c4:	88 e0       	ldi	r24, 0x08	; 8
    29c6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x0e);
    29ca:	8e e0       	ldi	r24, 0x0E	; 14
    29cc:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x09);
    29d0:	89 e0       	ldi	r24, 0x09	; 9
    29d2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    29d6:	8f e1       	ldi	r24, 0x1F	; 31
    29d8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    29e8:	12 c1       	rjmp	.+548    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 18:
		/* 3een */
	    LCD_WriteData(0x00);
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x07);
    29f6:	87 e0       	ldi	r24, 0x07	; 7
    29f8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x08);
    29fc:	88 e0       	ldi	r24, 0x08	; 8
    29fe:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2a02:	88 e0       	ldi	r24, 0x08	; 8
    2a04:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2a08:	8f e1       	ldi	r24, 0x1F	; 31
    2a0a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2a1a:	f9 c0       	rjmp	.+498    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 19:
		/* 3'een */
	    LCD_WriteData(0x04);
    2a1c:	84 e0       	ldi	r24, 0x04	; 4
    2a1e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x07);
    2a28:	87 e0       	ldi	r24, 0x07	; 7
    2a2a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2a2e:	88 e0       	ldi	r24, 0x08	; 8
    2a30:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2a34:	88 e0       	ldi	r24, 0x08	; 8
    2a36:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2a3a:	8f e1       	ldi	r24, 0x1F	; 31
    2a3c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2a4c:	e0 c0       	rjmp	.+448    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 20:
		/* faa2 */
	    LCD_WriteData(0x02);
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2a5a:	83 e0       	ldi	r24, 0x03	; 3
    2a5c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2a60:	83 e0       	ldi	r24, 0x03	; 3
    2a62:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2a6c:	8f e1       	ldi	r24, 0x1F	; 31
    2a6e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2a7e:	c7 c0       	rjmp	.+398    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 21:
		/* k'aaf */
	    LCD_WriteData(0x03);
    2a80:	83 e0       	ldi	r24, 0x03	; 3
    2a82:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2a8c:	83 e0       	ldi	r24, 0x03	; 3
    2a8e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2a92:	83 e0       	ldi	r24, 0x03	; 3
    2a94:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2a9e:	8f e1       	ldi	r24, 0x1F	; 31
    2aa0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2ab0:	ae c0       	rjmp	.+348    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 22:
		/* kaaf */
	    LCD_WriteData(0x00);
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x0f);
    2ab8:	8f e0       	ldi	r24, 0x0F	; 15
    2aba:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x04);
    2abe:	84 e0       	ldi	r24, 0x04	; 4
    2ac0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x02);
    2ac4:	82 e0       	ldi	r24, 0x02	; 2
    2ac6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2ad0:	8f e1       	ldi	r24, 0x1F	; 31
    2ad2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2ae2:	95 c0       	rjmp	.+298    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 23:
		/* laam */
	    LCD_WriteData(0x00);
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2b02:	8f e1       	ldi	r24, 0x1F	; 31
    2b04:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2b14:	7c c0       	rjmp	.+248    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 24:
		/* meem */
	    LCD_WriteData(0x00);
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2b2e:	83 e0       	ldi	r24, 0x03	; 3
    2b30:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2b34:	8f e1       	ldi	r24, 0x1F	; 31
    2b36:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2b3a:	83 e0       	ldi	r24, 0x03	; 3
    2b3c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2b46:	63 c0       	rjmp	.+198    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 25:
		/* noon */
	    LCD_WriteData(0x00);
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x05);
    2b5a:	85 e0       	ldi	r24, 0x05	; 5
    2b5c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2b66:	8f e1       	ldi	r24, 0x1F	; 31
    2b68:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2b78:	4a c0       	rjmp	.+148    	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 26:
		/* heeh */
	    LCD_WriteData(0x00);
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x06);
    2b92:	86 e0       	ldi	r24, 0x06	; 6
    2b94:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2b98:	8f e1       	ldi	r24, 0x1F	; 31
    2b9a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x06);
    2b9e:	86 e0       	ldi	r24, 0x06	; 6
    2ba0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2baa:	31 c0       	rjmp	.+98     	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 27:
		/* waaw */
	    LCD_WriteData(0x00);
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2bc4:	83 e0       	ldi	r24, 0x03	; 3
    2bc6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2bca:	83 e0       	ldi	r24, 0x03	; 3
    2bcc:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x02);
    2bd6:	82 e0       	ldi	r24, 0x02	; 2
    2bd8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
    2bdc:	18 c0       	rjmp	.+48     	; 0x2c0e <LCD_Arabic_Dict+0x724>
	    break;

	case 28:
		/* yaah */
	    LCD_WriteData(0x00);
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2bfc:	8f e1       	ldi	r24, 0x1F	; 31
    2bfe:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    LCD_WriteData(0x0a);
    2c08:	8a e0       	ldi	r24, 0x0A	; 10
    2c0a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	}
	English_Char-=8;
    2c0e:	80 91 72 00 	lds	r24, 0x0072
    2c12:	88 50       	subi	r24, 0x08	; 8
    2c14:	80 93 72 00 	sts	0x0072, r24
	LCD_Set_DD_Add(0x80+charact_number+English_Char);
    2c18:	90 91 70 00 	lds	r25, 0x0070
    2c1c:	80 91 72 00 	lds	r24, 0x0072
    2c20:	89 0f       	add	r24, r25
    2c22:	80 58       	subi	r24, 0x80	; 128
    2c24:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <LCD_Set_DD_Add>

}
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	08 95       	ret

00002c38 <LCD_WriteArabicData>:
void LCD_WriteArabicData(u8 data)
{
    2c38:	df 93       	push	r29
    2c3a:	cf 93       	push	r28
    2c3c:	0f 92       	push	r0
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
    2c42:	89 83       	std	Y+1, r24	; 0x01
	if(!(IS_WRITTEN(data)))
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <IS_WRITTEN>
    2c4a:	88 23       	and	r24, r24
    2c4c:	99 f4       	brne	.+38     	; 0x2c74 <LCD_WriteArabicData+0x3c>
	{
		LCD_Arabic_Dict(data);
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	0e 94 75 12 	call	0x24ea	; 0x24ea <LCD_Arabic_Dict>
		LCD_WriteData(charact_number);
    2c54:	80 91 70 00 	lds	r24, 0x0070
    2c58:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	    charact_number++;
    2c5c:	80 91 70 00 	lds	r24, 0x0070
    2c60:	8f 5f       	subi	r24, 0xFF	; 255
    2c62:	80 93 70 00 	sts	0x0070, r24
	    if(charact_number>7)
    2c66:	80 91 70 00 	lds	r24, 0x0070
    2c6a:	88 30       	cpi	r24, 0x08	; 8
    2c6c:	38 f0       	brcs	.+14     	; 0x2c7c <LCD_WriteArabicData+0x44>
	    	charact_number=0;
    2c6e:	10 92 70 00 	sts	0x0070, r1
    2c72:	04 c0       	rjmp	.+8      	; 0x2c7c <LCD_WriteArabicData+0x44>
	}
	else
		LCD_WriteData(current_charact);
    2c74:	80 91 71 00 	lds	r24, 0x0071
    2c78:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	English_Char--;
    2c7c:	80 91 72 00 	lds	r24, 0x0072
    2c80:	81 50       	subi	r24, 0x01	; 1
    2c82:	80 93 72 00 	sts	0x0072, r24

}
    2c86:	0f 90       	pop	r0
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <IS_WRITTEN>:

u8 IS_WRITTEN(u8 data)
{
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <IS_WRITTEN+0x6>
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <IS_WRITTEN+0x8>
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	8b 83       	std	Y+3, r24	; 0x03
	int count;
	for(count=0;count<8;count++)
    2c9c:	1a 82       	std	Y+2, r1	; 0x02
    2c9e:	19 82       	std	Y+1, r1	; 0x01
    2ca0:	14 c0       	rjmp	.+40     	; 0x2cca <IS_WRITTEN+0x3c>
		if(charact_prev[count]==data)
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	e8 59       	subi	r30, 0x98	; 152
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	90 81       	ld	r25, Z
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	98 17       	cp	r25, r24
    2cb2:	31 f4       	brne	.+12     	; 0x2cc0 <IS_WRITTEN+0x32>
		{
			current_charact=count;
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	80 93 71 00 	sts	0x0071, r24
			return 1;
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	8c 83       	std	Y+4, r24	; 0x04
    2cbe:	14 c0       	rjmp	.+40     	; 0x2ce8 <IS_WRITTEN+0x5a>
}

u8 IS_WRITTEN(u8 data)
{
	int count;
	for(count=0;count<8;count++)
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc4:	01 96       	adiw	r24, 0x01	; 1
    2cc6:	9a 83       	std	Y+2, r25	; 0x02
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cce:	88 30       	cpi	r24, 0x08	; 8
    2cd0:	91 05       	cpc	r25, r1
    2cd2:	3c f3       	brlt	.-50     	; 0x2ca2 <IS_WRITTEN+0x14>
		if(charact_prev[count]==data)
		{
			current_charact=count;
			return 1;
		}
	charact_prev[charact_number]=data;
    2cd4:	80 91 70 00 	lds	r24, 0x0070
    2cd8:	88 2f       	mov	r24, r24
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	fc 01       	movw	r30, r24
    2cde:	e8 59       	subi	r30, 0x98	; 152
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce4:	80 83       	st	Z, r24

	return 0;
    2ce6:	1c 82       	std	Y+4, r1	; 0x04
    2ce8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <LCD_WrtireString_Arabic>:

u8 LCD_WrtireString_Arabic(u8* str)
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <LCD_WrtireString_Arabic+0x6>
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <LCD_WrtireString_Arabic+0x8>
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <LCD_WrtireString_Arabic+0xa>
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	9d 83       	std	Y+5, r25	; 0x05
    2d08:	8c 83       	std	Y+4, r24	; 0x04
	if(English_Char>6*16+7)
    2d0a:	80 91 72 00 	lds	r24, 0x0072
    2d0e:	88 36       	cpi	r24, 0x68	; 104
    2d10:	10 f0       	brcs	.+4      	; 0x2d16 <LCD_WrtireString_Arabic+0x1e>
		English_Char=0;
    2d12:	10 92 72 00 	sts	0x0072, r1

	int count=0;
    2d16:	1b 82       	std	Y+3, r1	; 0x03
    2d18:	1a 82       	std	Y+2, r1	; 0x02
	u8 size=0;
    2d1a:	19 82       	std	Y+1, r1	; 0x01
    2d1c:	08 c0       	rjmp	.+16     	; 0x2d2e <LCD_WrtireString_Arabic+0x36>

	while( (!((*(str+count))=='\0')) && size<=16)
	{
		count++;
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	9b 81       	ldd	r25, Y+3	; 0x03
    2d22:	01 96       	adiw	r24, 0x01	; 1
    2d24:	9b 83       	std	Y+3, r25	; 0x03
    2d26:	8a 83       	std	Y+2, r24	; 0x02
		size++;
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	8f 5f       	subi	r24, 0xFF	; 255
    2d2c:	89 83       	std	Y+1, r24	; 0x01
		English_Char=0;

	int count=0;
	u8 size=0;

	while( (!((*(str+count))=='\0')) && size<=16)
    2d2e:	2a 81       	ldd	r18, Y+2	; 0x02
    2d30:	3b 81       	ldd	r19, Y+3	; 0x03
    2d32:	8c 81       	ldd	r24, Y+4	; 0x04
    2d34:	9d 81       	ldd	r25, Y+5	; 0x05
    2d36:	fc 01       	movw	r30, r24
    2d38:	e2 0f       	add	r30, r18
    2d3a:	f3 1f       	adc	r31, r19
    2d3c:	80 81       	ld	r24, Z
    2d3e:	88 23       	and	r24, r24
    2d40:	19 f0       	breq	.+6      	; 0x2d48 <LCD_WrtireString_Arabic+0x50>
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	81 31       	cpi	r24, 0x11	; 17
    2d46:	58 f3       	brcs	.-42     	; 0x2d1e <LCD_WrtireString_Arabic+0x26>
	{
		count++;
		size++;
	}

		if(size<=16)
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	81 31       	cpi	r24, 0x11	; 17
    2d4c:	90 f5       	brcc	.+100    	; 0x2db2 <LCD_WrtireString_Arabic+0xba>
		{
			for(count=size-1;count>=0;count--)
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	88 2f       	mov	r24, r24
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	9b 83       	std	Y+3, r25	; 0x03
    2d58:	8a 83       	std	Y+2, r24	; 0x02
    2d5a:	24 c0       	rjmp	.+72     	; 0x2da4 <LCD_WrtireString_Arabic+0xac>
			{
				if((*(str+count))<=28)
    2d5c:	2a 81       	ldd	r18, Y+2	; 0x02
    2d5e:	3b 81       	ldd	r19, Y+3	; 0x03
    2d60:	8c 81       	ldd	r24, Y+4	; 0x04
    2d62:	9d 81       	ldd	r25, Y+5	; 0x05
    2d64:	fc 01       	movw	r30, r24
    2d66:	e2 0f       	add	r30, r18
    2d68:	f3 1f       	adc	r31, r19
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8d 31       	cpi	r24, 0x1D	; 29
    2d6e:	58 f4       	brcc	.+22     	; 0x2d86 <LCD_WrtireString_Arabic+0x8e>
					LCD_WriteArabicData(*(str+count));
    2d70:	2a 81       	ldd	r18, Y+2	; 0x02
    2d72:	3b 81       	ldd	r19, Y+3	; 0x03
    2d74:	8c 81       	ldd	r24, Y+4	; 0x04
    2d76:	9d 81       	ldd	r25, Y+5	; 0x05
    2d78:	fc 01       	movw	r30, r24
    2d7a:	e2 0f       	add	r30, r18
    2d7c:	f3 1f       	adc	r31, r19
    2d7e:	80 81       	ld	r24, Z
    2d80:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <LCD_WriteArabicData>
    2d84:	0a c0       	rjmp	.+20     	; 0x2d9a <LCD_WrtireString_Arabic+0xa2>
				else
					LCD_WriteData(*(str+count));
    2d86:	2a 81       	ldd	r18, Y+2	; 0x02
    2d88:	3b 81       	ldd	r19, Y+3	; 0x03
    2d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8e:	fc 01       	movw	r30, r24
    2d90:	e2 0f       	add	r30, r18
    2d92:	f3 1f       	adc	r31, r19
    2d94:	80 81       	ld	r24, Z
    2d96:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
		size++;
	}

		if(size<=16)
		{
			for(count=size-1;count>=0;count--)
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	9b 83       	std	Y+3, r25	; 0x03
    2da2:	8a 83       	std	Y+2, r24	; 0x02
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	9b 81       	ldd	r25, Y+3	; 0x03
    2da8:	99 23       	and	r25, r25
    2daa:	c4 f6       	brge	.-80     	; 0x2d5c <LCD_WrtireString_Arabic+0x64>
				if((*(str+count))<=28)
					LCD_WriteArabicData(*(str+count));
				else
					LCD_WriteData(*(str+count));
			}
			return 1;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	8e 83       	std	Y+6, r24	; 0x06
    2db0:	01 c0       	rjmp	.+2      	; 0x2db4 <LCD_WrtireString_Arabic+0xbc>
		}
		else
			return 0;
    2db2:	1e 82       	std	Y+6, r1	; 0x06
    2db4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2db6:	26 96       	adiw	r28, 0x06	; 6
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	cf 91       	pop	r28
    2dc4:	df 91       	pop	r29
    2dc6:	08 95       	ret

00002dc8 <LED_Init>:
#include "DIO.h"
#include "Utils.h"
#include "avr/delay.h"

void LED_Init(u8 u8LedNumber)
{
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	0f 92       	push	r0
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	89 83       	std	Y+1, r24	; 0x01
	if(u8LedNumber)
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	88 23       	and	r24, r24
    2dd8:	59 f0       	breq	.+22     	; 0x2df0 <LED_Init+0x28>
	{
		DIO_voidSetDir(PortA,Pin5,Output); /* Set pin 5A as an output pin */
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	65 e0       	ldi	r22, 0x05	; 5
    2dde:	41 e0       	ldi	r20, 0x01	; 1
    2de0:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
		DIO_voidWriteVal(PortA,Pin5,Zero_Volt); /* Set pin 5A to 0V */
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	65 e0       	ldi	r22, 0x05	; 5
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
    2dee:	0a c0       	rjmp	.+20     	; 0x2e04 <LED_Init+0x3c>
	}
	else
	{
		DIO_voidSetDir(PortA,Pin4,Output); /* Set pin 4A as an output pin */
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	64 e0       	ldi	r22, 0x04	; 4
    2df4:	41 e0       	ldi	r20, 0x01	; 1
    2df6:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
		DIO_voidWriteVal(PortA,Pin4,Zero_Volt); /* Set pin 4A to 0V */
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	64 e0       	ldi	r22, 0x04	; 4
    2dfe:	40 e0       	ldi	r20, 0x00	; 0
    2e00:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
	}
}
    2e04:	0f 90       	pop	r0
    2e06:	cf 91       	pop	r28
    2e08:	df 91       	pop	r29
    2e0a:	08 95       	ret

00002e0c <LED>:
void LED(u8 u8LedNumber, u8 u8State)
{
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	00 d0       	rcall	.+0      	; 0x2e12 <LED+0x6>
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	89 83       	std	Y+1, r24	; 0x01
    2e18:	6a 83       	std	Y+2, r22	; 0x02
	if(u8LedNumber)
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	88 23       	and	r24, r24
    2e1e:	31 f0       	breq	.+12     	; 0x2e2c <LED+0x20>
		DIO_voidWriteVal(PortA,Pin5,u8State); /* Set pin 5A to StateV */
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	65 e0       	ldi	r22, 0x05	; 5
    2e24:	4a 81       	ldd	r20, Y+2	; 0x02
    2e26:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
    2e2a:	05 c0       	rjmp	.+10     	; 0x2e36 <LED+0x2a>

	else
		DIO_voidWriteVal(PortA,Pin4,u8State); /* Set pin 4A to StateV */
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	64 e0       	ldi	r22, 0x04	; 4
    2e30:	4a 81       	ldd	r20, Y+2	; 0x02
    2e32:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
}
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <ToggleLED>:
void ToggleLED(u8 u8LedNumber)
{
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    2e48:	e9 97       	sbiw	r28, 0x39	; 57
    2e4a:	0f b6       	in	r0, 0x3f	; 63
    2e4c:	f8 94       	cli
    2e4e:	de bf       	out	0x3e, r29	; 62
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	cd bf       	out	0x3d, r28	; 61
    2e54:	89 af       	std	Y+57, r24	; 0x39
	if(u8LedNumber)
    2e56:	89 ad       	ldd	r24, Y+57	; 0x39
    2e58:	88 23       	and	r24, r24
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <ToggleLED+0x1e>
    2e5c:	ed c0       	rjmp	.+474    	; 0x3038 <ToggleLED+0x1f8>
	{
		LED(1,ON);
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	61 e0       	ldi	r22, 0x01	; 1
    2e62:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LED>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	aa e7       	ldi	r26, 0x7A	; 122
    2e6c:	b4 e4       	ldi	r27, 0x44	; 68
    2e6e:	8d ab       	std	Y+53, r24	; 0x35
    2e70:	9e ab       	std	Y+54, r25	; 0x36
    2e72:	af ab       	std	Y+55, r26	; 0x37
    2e74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e76:	6d a9       	ldd	r22, Y+53	; 0x35
    2e78:	7e a9       	ldd	r23, Y+54	; 0x36
    2e7a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e7c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	4a e7       	ldi	r20, 0x7A	; 122
    2e84:	53 e4       	ldi	r21, 0x43	; 67
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	89 ab       	std	Y+49, r24	; 0x31
    2e90:	9a ab       	std	Y+50, r25	; 0x32
    2e92:	ab ab       	std	Y+51, r26	; 0x33
    2e94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e96:	69 a9       	ldd	r22, Y+49	; 0x31
    2e98:	7a a9       	ldd	r23, Y+50	; 0x32
    2e9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e8       	ldi	r20, 0x80	; 128
    2ea4:	5f e3       	ldi	r21, 0x3F	; 63
    2ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eaa:	88 23       	and	r24, r24
    2eac:	2c f4       	brge	.+10     	; 0x2eb8 <ToggleLED+0x78>
		__ticks = 1;
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	98 ab       	std	Y+48, r25	; 0x30
    2eb4:	8f a7       	std	Y+47, r24	; 0x2f
    2eb6:	3f c0       	rjmp	.+126    	; 0x2f36 <ToggleLED+0xf6>
	else if (__tmp > 65535)
    2eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eba:	7a a9       	ldd	r23, Y+50	; 0x32
    2ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	3f ef       	ldi	r19, 0xFF	; 255
    2ec4:	4f e7       	ldi	r20, 0x7F	; 127
    2ec6:	57 e4       	ldi	r21, 0x47	; 71
    2ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ecc:	18 16       	cp	r1, r24
    2ece:	4c f5       	brge	.+82     	; 0x2f22 <ToggleLED+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ed2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ed4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ed6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e2       	ldi	r20, 0x20	; 32
    2ede:	51 e4       	ldi	r21, 0x41	; 65
    2ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	bc 01       	movw	r22, r24
    2eea:	cd 01       	movw	r24, r26
    2eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	98 ab       	std	Y+48, r25	; 0x30
    2ef6:	8f a7       	std	Y+47, r24	; 0x2f
    2ef8:	0f c0       	rjmp	.+30     	; 0x2f18 <ToggleLED+0xd8>
    2efa:	89 e1       	ldi	r24, 0x19	; 25
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	9e a7       	std	Y+46, r25	; 0x2e
    2f00:	8d a7       	std	Y+45, r24	; 0x2d
    2f02:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f04:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <ToggleLED+0xc6>
    2f0a:	9e a7       	std	Y+46, r25	; 0x2e
    2f0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f10:	98 a9       	ldd	r25, Y+48	; 0x30
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	98 ab       	std	Y+48, r25	; 0x30
    2f16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	69 f7       	brne	.-38     	; 0x2efa <ToggleLED+0xba>
    2f20:	14 c0       	rjmp	.+40     	; 0x2f4a <ToggleLED+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f22:	69 a9       	ldd	r22, Y+49	; 0x31
    2f24:	7a a9       	ldd	r23, Y+50	; 0x32
    2f26:	8b a9       	ldd	r24, Y+51	; 0x33
    2f28:	9c a9       	ldd	r25, Y+52	; 0x34
    2f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	98 ab       	std	Y+48, r25	; 0x30
    2f34:	8f a7       	std	Y+47, r24	; 0x2f
    2f36:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f38:	98 a9       	ldd	r25, Y+48	; 0x30
    2f3a:	9c a7       	std	Y+44, r25	; 0x2c
    2f3c:	8b a7       	std	Y+43, r24	; 0x2b
    2f3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f40:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <ToggleLED+0x102>
    2f46:	9c a7       	std	Y+44, r25	; 0x2c
    2f48:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		LED(1,OFF);
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	60 e0       	ldi	r22, 0x00	; 0
    2f4e:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LED>
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	aa e7       	ldi	r26, 0x7A	; 122
    2f58:	b4 e4       	ldi	r27, 0x44	; 68
    2f5a:	8f a3       	std	Y+39, r24	; 0x27
    2f5c:	98 a7       	std	Y+40, r25	; 0x28
    2f5e:	a9 a7       	std	Y+41, r26	; 0x29
    2f60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f62:	6f a1       	ldd	r22, Y+39	; 0x27
    2f64:	78 a5       	ldd	r23, Y+40	; 0x28
    2f66:	89 a5       	ldd	r24, Y+41	; 0x29
    2f68:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	4a e7       	ldi	r20, 0x7A	; 122
    2f70:	53 e4       	ldi	r21, 0x43	; 67
    2f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	8b a3       	std	Y+35, r24	; 0x23
    2f7c:	9c a3       	std	Y+36, r25	; 0x24
    2f7e:	ad a3       	std	Y+37, r26	; 0x25
    2f80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f82:	6b a1       	ldd	r22, Y+35	; 0x23
    2f84:	7c a1       	ldd	r23, Y+36	; 0x24
    2f86:	8d a1       	ldd	r24, Y+37	; 0x25
    2f88:	9e a1       	ldd	r25, Y+38	; 0x26
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e8       	ldi	r20, 0x80	; 128
    2f90:	5f e3       	ldi	r21, 0x3F	; 63
    2f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f96:	88 23       	and	r24, r24
    2f98:	2c f4       	brge	.+10     	; 0x2fa4 <ToggleLED+0x164>
		__ticks = 1;
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	9a a3       	std	Y+34, r25	; 0x22
    2fa0:	89 a3       	std	Y+33, r24	; 0x21
    2fa2:	3f c0       	rjmp	.+126    	; 0x3022 <ToggleLED+0x1e2>
	else if (__tmp > 65535)
    2fa4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa8:	8d a1       	ldd	r24, Y+37	; 0x25
    2faa:	9e a1       	ldd	r25, Y+38	; 0x26
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	3f ef       	ldi	r19, 0xFF	; 255
    2fb0:	4f e7       	ldi	r20, 0x7F	; 127
    2fb2:	57 e4       	ldi	r21, 0x47	; 71
    2fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb8:	18 16       	cp	r1, r24
    2fba:	4c f5       	brge	.+82     	; 0x300e <ToggleLED+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbc:	6f a1       	ldd	r22, Y+39	; 0x27
    2fbe:	78 a5       	ldd	r23, Y+40	; 0x28
    2fc0:	89 a5       	ldd	r24, Y+41	; 0x29
    2fc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e2       	ldi	r20, 0x20	; 32
    2fca:	51 e4       	ldi	r21, 0x41	; 65
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	9a a3       	std	Y+34, r25	; 0x22
    2fe2:	89 a3       	std	Y+33, r24	; 0x21
    2fe4:	0f c0       	rjmp	.+30     	; 0x3004 <ToggleLED+0x1c4>
    2fe6:	89 e1       	ldi	r24, 0x19	; 25
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	98 a3       	std	Y+32, r25	; 0x20
    2fec:	8f 8f       	std	Y+31, r24	; 0x1f
    2fee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ff0:	98 a1       	ldd	r25, Y+32	; 0x20
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <ToggleLED+0x1b2>
    2ff6:	98 a3       	std	Y+32, r25	; 0x20
    2ff8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffa:	89 a1       	ldd	r24, Y+33	; 0x21
    2ffc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	9a a3       	std	Y+34, r25	; 0x22
    3002:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3004:	89 a1       	ldd	r24, Y+33	; 0x21
    3006:	9a a1       	ldd	r25, Y+34	; 0x22
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	69 f7       	brne	.-38     	; 0x2fe6 <ToggleLED+0x1a6>
    300c:	01 c1       	rjmp	.+514    	; 0x3210 <ToggleLED+0x3d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300e:	6b a1       	ldd	r22, Y+35	; 0x23
    3010:	7c a1       	ldd	r23, Y+36	; 0x24
    3012:	8d a1       	ldd	r24, Y+37	; 0x25
    3014:	9e a1       	ldd	r25, Y+38	; 0x26
    3016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	9a a3       	std	Y+34, r25	; 0x22
    3020:	89 a3       	std	Y+33, r24	; 0x21
    3022:	89 a1       	ldd	r24, Y+33	; 0x21
    3024:	9a a1       	ldd	r25, Y+34	; 0x22
    3026:	9e 8f       	std	Y+30, r25	; 0x1e
    3028:	8d 8f       	std	Y+29, r24	; 0x1d
    302a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    302c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <ToggleLED+0x1ee>
    3032:	9e 8f       	std	Y+30, r25	; 0x1e
    3034:	8d 8f       	std	Y+29, r24	; 0x1d
    3036:	ec c0       	rjmp	.+472    	; 0x3210 <ToggleLED+0x3d0>
		_delay_ms(1000);
	}
	else
	{
		LED(0,ON);
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	61 e0       	ldi	r22, 0x01	; 1
    303c:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LED>
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	aa e7       	ldi	r26, 0x7A	; 122
    3046:	b4 e4       	ldi	r27, 0x44	; 68
    3048:	89 8f       	std	Y+25, r24	; 0x19
    304a:	9a 8f       	std	Y+26, r25	; 0x1a
    304c:	ab 8f       	std	Y+27, r26	; 0x1b
    304e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3050:	69 8d       	ldd	r22, Y+25	; 0x19
    3052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	4a e7       	ldi	r20, 0x7A	; 122
    305e:	53 e4       	ldi	r21, 0x43	; 67
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	8d 8b       	std	Y+21, r24	; 0x15
    306a:	9e 8b       	std	Y+22, r25	; 0x16
    306c:	af 8b       	std	Y+23, r26	; 0x17
    306e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3070:	6d 89       	ldd	r22, Y+21	; 0x15
    3072:	7e 89       	ldd	r23, Y+22	; 0x16
    3074:	8f 89       	ldd	r24, Y+23	; 0x17
    3076:	98 8d       	ldd	r25, Y+24	; 0x18
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e8       	ldi	r20, 0x80	; 128
    307e:	5f e3       	ldi	r21, 0x3F	; 63
    3080:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3084:	88 23       	and	r24, r24
    3086:	2c f4       	brge	.+10     	; 0x3092 <ToggleLED+0x252>
		__ticks = 1;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	9c 8b       	std	Y+20, r25	; 0x14
    308e:	8b 8b       	std	Y+19, r24	; 0x13
    3090:	3f c0       	rjmp	.+126    	; 0x3110 <ToggleLED+0x2d0>
	else if (__tmp > 65535)
    3092:	6d 89       	ldd	r22, Y+21	; 0x15
    3094:	7e 89       	ldd	r23, Y+22	; 0x16
    3096:	8f 89       	ldd	r24, Y+23	; 0x17
    3098:	98 8d       	ldd	r25, Y+24	; 0x18
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	3f ef       	ldi	r19, 0xFF	; 255
    309e:	4f e7       	ldi	r20, 0x7F	; 127
    30a0:	57 e4       	ldi	r21, 0x47	; 71
    30a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a6:	18 16       	cp	r1, r24
    30a8:	4c f5       	brge	.+82     	; 0x30fc <ToggleLED+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30aa:	69 8d       	ldd	r22, Y+25	; 0x19
    30ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e2       	ldi	r20, 0x20	; 32
    30b8:	51 e4       	ldi	r21, 0x41	; 65
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	bc 01       	movw	r22, r24
    30c4:	cd 01       	movw	r24, r26
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9c 8b       	std	Y+20, r25	; 0x14
    30d0:	8b 8b       	std	Y+19, r24	; 0x13
    30d2:	0f c0       	rjmp	.+30     	; 0x30f2 <ToggleLED+0x2b2>
    30d4:	89 e1       	ldi	r24, 0x19	; 25
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	9a 8b       	std	Y+18, r25	; 0x12
    30da:	89 8b       	std	Y+17, r24	; 0x11
    30dc:	89 89       	ldd	r24, Y+17	; 0x11
    30de:	9a 89       	ldd	r25, Y+18	; 0x12
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <ToggleLED+0x2a0>
    30e4:	9a 8b       	std	Y+18, r25	; 0x12
    30e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ea:	9c 89       	ldd	r25, Y+20	; 0x14
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	9c 8b       	std	Y+20, r25	; 0x14
    30f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f2:	8b 89       	ldd	r24, Y+19	; 0x13
    30f4:	9c 89       	ldd	r25, Y+20	; 0x14
    30f6:	00 97       	sbiw	r24, 0x00	; 0
    30f8:	69 f7       	brne	.-38     	; 0x30d4 <ToggleLED+0x294>
    30fa:	14 c0       	rjmp	.+40     	; 0x3124 <ToggleLED+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fc:	6d 89       	ldd	r22, Y+21	; 0x15
    30fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3100:	8f 89       	ldd	r24, Y+23	; 0x17
    3102:	98 8d       	ldd	r25, Y+24	; 0x18
    3104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	9c 8b       	std	Y+20, r25	; 0x14
    310e:	8b 8b       	std	Y+19, r24	; 0x13
    3110:	8b 89       	ldd	r24, Y+19	; 0x13
    3112:	9c 89       	ldd	r25, Y+20	; 0x14
    3114:	98 8b       	std	Y+16, r25	; 0x10
    3116:	8f 87       	std	Y+15, r24	; 0x0f
    3118:	8f 85       	ldd	r24, Y+15	; 0x0f
    311a:	98 89       	ldd	r25, Y+16	; 0x10
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	f1 f7       	brne	.-4      	; 0x311c <ToggleLED+0x2dc>
    3120:	98 8b       	std	Y+16, r25	; 0x10
    3122:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LED(0,OFF);
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	60 e0       	ldi	r22, 0x00	; 0
    3128:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LED>
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	aa e7       	ldi	r26, 0x7A	; 122
    3132:	b4 e4       	ldi	r27, 0x44	; 68
    3134:	8b 87       	std	Y+11, r24	; 0x0b
    3136:	9c 87       	std	Y+12, r25	; 0x0c
    3138:	ad 87       	std	Y+13, r26	; 0x0d
    313a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313c:	6b 85       	ldd	r22, Y+11	; 0x0b
    313e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3140:	8d 85       	ldd	r24, Y+13	; 0x0d
    3142:	9e 85       	ldd	r25, Y+14	; 0x0e
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	4a e7       	ldi	r20, 0x7A	; 122
    314a:	53 e4       	ldi	r21, 0x43	; 67
    314c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	8f 83       	std	Y+7, r24	; 0x07
    3156:	98 87       	std	Y+8, r25	; 0x08
    3158:	a9 87       	std	Y+9, r26	; 0x09
    315a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    315c:	6f 81       	ldd	r22, Y+7	; 0x07
    315e:	78 85       	ldd	r23, Y+8	; 0x08
    3160:	89 85       	ldd	r24, Y+9	; 0x09
    3162:	9a 85       	ldd	r25, Y+10	; 0x0a
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	5f e3       	ldi	r21, 0x3F	; 63
    316c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3170:	88 23       	and	r24, r24
    3172:	2c f4       	brge	.+10     	; 0x317e <ToggleLED+0x33e>
		__ticks = 1;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	9e 83       	std	Y+6, r25	; 0x06
    317a:	8d 83       	std	Y+5, r24	; 0x05
    317c:	3f c0       	rjmp	.+126    	; 0x31fc <ToggleLED+0x3bc>
	else if (__tmp > 65535)
    317e:	6f 81       	ldd	r22, Y+7	; 0x07
    3180:	78 85       	ldd	r23, Y+8	; 0x08
    3182:	89 85       	ldd	r24, Y+9	; 0x09
    3184:	9a 85       	ldd	r25, Y+10	; 0x0a
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	3f ef       	ldi	r19, 0xFF	; 255
    318a:	4f e7       	ldi	r20, 0x7F	; 127
    318c:	57 e4       	ldi	r21, 0x47	; 71
    318e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3192:	18 16       	cp	r1, r24
    3194:	4c f5       	brge	.+82     	; 0x31e8 <ToggleLED+0x3a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3196:	6b 85       	ldd	r22, Y+11	; 0x0b
    3198:	7c 85       	ldd	r23, Y+12	; 0x0c
    319a:	8d 85       	ldd	r24, Y+13	; 0x0d
    319c:	9e 85       	ldd	r25, Y+14	; 0x0e
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e2       	ldi	r20, 0x20	; 32
    31a4:	51 e4       	ldi	r21, 0x41	; 65
    31a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	9e 83       	std	Y+6, r25	; 0x06
    31bc:	8d 83       	std	Y+5, r24	; 0x05
    31be:	0f c0       	rjmp	.+30     	; 0x31de <ToggleLED+0x39e>
    31c0:	89 e1       	ldi	r24, 0x19	; 25
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	9c 83       	std	Y+4, r25	; 0x04
    31c6:	8b 83       	std	Y+3, r24	; 0x03
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <ToggleLED+0x38c>
    31d0:	9c 83       	std	Y+4, r25	; 0x04
    31d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d4:	8d 81       	ldd	r24, Y+5	; 0x05
    31d6:	9e 81       	ldd	r25, Y+6	; 0x06
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	9e 81       	ldd	r25, Y+6	; 0x06
    31e2:	00 97       	sbiw	r24, 0x00	; 0
    31e4:	69 f7       	brne	.-38     	; 0x31c0 <ToggleLED+0x380>
    31e6:	14 c0       	rjmp	.+40     	; 0x3210 <ToggleLED+0x3d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ea:	78 85       	ldd	r23, Y+8	; 0x08
    31ec:	89 85       	ldd	r24, Y+9	; 0x09
    31ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	9e 83       	std	Y+6, r25	; 0x06
    31fa:	8d 83       	std	Y+5, r24	; 0x05
    31fc:	8d 81       	ldd	r24, Y+5	; 0x05
    31fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3200:	9a 83       	std	Y+2, r25	; 0x02
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <ToggleLED+0x3c8>
    320c:	9a 83       	std	Y+2, r25	; 0x02
    320e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}

}
    3210:	e9 96       	adiw	r28, 0x39	; 57
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	f8 94       	cli
    3216:	de bf       	out	0x3e, r29	; 62
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	cd bf       	out	0x3d, r28	; 61
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <SS_Init>:
#include "Utils.h"
#include "LED.h"
#include <avr/delay.h>

void SS_Init()
{
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDir(PortB,Pin0,Output);
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	41 e0       	ldi	r20, 0x01	; 1
    3230:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin1,Output);
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	61 e0       	ldi	r22, 0x01	; 1
    3238:	41 e0       	ldi	r20, 0x01	; 1
    323a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin4,Output);
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	64 e0       	ldi	r22, 0x04	; 4
    3242:	41 e0       	ldi	r20, 0x01	; 1
    3244:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin5,Output);
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	65 e0       	ldi	r22, 0x05	; 5
    324c:	41 e0       	ldi	r20, 0x01	; 1
    324e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin6,Output);
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	66 e0       	ldi	r22, 0x06	; 6
    3256:	41 e0       	ldi	r20, 0x01	; 1
    3258:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin7,Output);
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	67 e0       	ldi	r22, 0x07	; 7
    3260:	41 e0       	ldi	r20, 0x01	; 1
    3262:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
}
    3266:	cf 91       	pop	r28
    3268:	df 91       	pop	r29
    326a:	08 95       	ret

0000326c <SS_Write>:

void SS_Write(u8 u8Number, u8 u8channel)
{
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	00 d0       	rcall	.+0      	; 0x3272 <SS_Write+0x6>
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
    3276:	89 83       	std	Y+1, r24	; 0x01
    3278:	6a 83       	std	Y+2, r22	; 0x02
	if(u8channel) /*1 for SS number 4(Most Sig)*/
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
    327c:	88 23       	and	r24, r24
    327e:	59 f0       	breq	.+22     	; 0x3296 <SS_Write+0x2a>
	{
		DIO_voidWriteVal(PortB,Pin4,Zero_Volt);
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	64 e0       	ldi	r22, 0x04	; 4
    3284:	40 e0       	ldi	r20, 0x00	; 0
    3286:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortB,Pin5,Five_Volt);
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	65 e0       	ldi	r22, 0x05	; 5
    328e:	41 e0       	ldi	r20, 0x01	; 1
    3290:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
    3294:	0a c0       	rjmp	.+20     	; 0x32aa <SS_Write+0x3e>
	}
	else /*0 for SS number 5(Lest Sig)*/
	{
		DIO_voidWriteVal(PortB,Pin4,Five_Volt);
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	64 e0       	ldi	r22, 0x04	; 4
    329a:	41 e0       	ldi	r20, 0x01	; 1
    329c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortB,Pin5,Zero_Volt);
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	65 e0       	ldi	r22, 0x05	; 5
    32a4:	40 e0       	ldi	r20, 0x00	; 0
    32a6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
	}

	DIO_voidWriteVal(PortB,Pin0,Get_Bit(u8Number,0)); /*A*/
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	98 2f       	mov	r25, r24
    32ae:	91 70       	andi	r25, 0x01	; 1
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	60 e0       	ldi	r22, 0x00	; 0
    32b4:	49 2f       	mov	r20, r25
    32b6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortB,Pin1,Get_Bit(u8Number,1)); /*B*/
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	88 2f       	mov	r24, r24
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	82 70       	andi	r24, 0x02	; 2
    32c2:	90 70       	andi	r25, 0x00	; 0
    32c4:	95 95       	asr	r25
    32c6:	87 95       	ror	r24
    32c8:	98 2f       	mov	r25, r24
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	61 e0       	ldi	r22, 0x01	; 1
    32ce:	49 2f       	mov	r20, r25
    32d0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortB,Pin6,Get_Bit(u8Number,2)); /*C*/
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	88 2f       	mov	r24, r24
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	84 70       	andi	r24, 0x04	; 4
    32dc:	90 70       	andi	r25, 0x00	; 0
    32de:	95 95       	asr	r25
    32e0:	87 95       	ror	r24
    32e2:	95 95       	asr	r25
    32e4:	87 95       	ror	r24
    32e6:	98 2f       	mov	r25, r24
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	66 e0       	ldi	r22, 0x06	; 6
    32ec:	49 2f       	mov	r20, r25
    32ee:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortB,Pin7,Get_Bit(u8Number,3)); /*D*/
    32f2:	89 81       	ldd	r24, Y+1	; 0x01
    32f4:	88 2f       	mov	r24, r24
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	88 70       	andi	r24, 0x08	; 8
    32fa:	90 70       	andi	r25, 0x00	; 0
    32fc:	95 95       	asr	r25
    32fe:	87 95       	ror	r24
    3300:	95 95       	asr	r25
    3302:	87 95       	ror	r24
    3304:	95 95       	asr	r25
    3306:	87 95       	ror	r24
    3308:	98 2f       	mov	r25, r24
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	67 e0       	ldi	r22, 0x07	; 7
    330e:	49 2f       	mov	r20, r25
    3310:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>

}
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	cf 91       	pop	r28
    331a:	df 91       	pop	r29
    331c:	08 95       	ret

0000331e <TIMERINT_voidInit>:


#include "Timer.h"

void TIMERINT_voidInit(u8 u8Type)
{
    331e:	df 93       	push	r29
    3320:	cf 93       	push	r28
    3322:	00 d0       	rcall	.+0      	; 0x3324 <TIMERINT_voidInit+0x6>
    3324:	0f 92       	push	r0
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
    332a:	89 83       	std	Y+1, r24	; 0x01
	switch (u8Type)
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	28 2f       	mov	r18, r24
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	3b 83       	std	Y+3, r19	; 0x03
    3334:	2a 83       	std	Y+2, r18	; 0x02
    3336:	8a 81       	ldd	r24, Y+2	; 0x02
    3338:	9b 81       	ldd	r25, Y+3	; 0x03
    333a:	86 30       	cpi	r24, 0x06	; 6
    333c:	91 05       	cpc	r25, r1
    333e:	09 f4       	brne	.+2      	; 0x3342 <TIMERINT_voidInit+0x24>
    3340:	43 c0       	rjmp	.+134    	; 0x33c8 <TIMERINT_voidInit+0xaa>
    3342:	2a 81       	ldd	r18, Y+2	; 0x02
    3344:	3b 81       	ldd	r19, Y+3	; 0x03
    3346:	27 30       	cpi	r18, 0x07	; 7
    3348:	31 05       	cpc	r19, r1
    334a:	34 f4       	brge	.+12     	; 0x3358 <TIMERINT_voidInit+0x3a>
    334c:	8a 81       	ldd	r24, Y+2	; 0x02
    334e:	9b 81       	ldd	r25, Y+3	; 0x03
    3350:	85 30       	cpi	r24, 0x05	; 5
    3352:	91 05       	cpc	r25, r1
    3354:	71 f0       	breq	.+28     	; 0x3372 <TIMERINT_voidInit+0x54>
    3356:	d0 c0       	rjmp	.+416    	; 0x34f8 <TIMERINT_voidInit+0x1da>
    3358:	2a 81       	ldd	r18, Y+2	; 0x02
    335a:	3b 81       	ldd	r19, Y+3	; 0x03
    335c:	27 30       	cpi	r18, 0x07	; 7
    335e:	31 05       	cpc	r19, r1
    3360:	09 f4       	brne	.+2      	; 0x3364 <TIMERINT_voidInit+0x46>
    3362:	90 c0       	rjmp	.+288    	; 0x3484 <TIMERINT_voidInit+0x166>
    3364:	8a 81       	ldd	r24, Y+2	; 0x02
    3366:	9b 81       	ldd	r25, Y+3	; 0x03
    3368:	88 30       	cpi	r24, 0x08	; 8
    336a:	91 05       	cpc	r25, r1
    336c:	09 f4       	brne	.+2      	; 0x3370 <TIMERINT_voidInit+0x52>
    336e:	5b c0       	rjmp	.+182    	; 0x3426 <TIMERINT_voidInit+0x108>
    3370:	c3 c0       	rjmp	.+390    	; 0x34f8 <TIMERINT_voidInit+0x1da>
	{
	case NORMAL:
		/*Pre-Scaler (/8) */
		Clr_Bit(TCCR0,Pin0);
    3372:	a3 e5       	ldi	r26, 0x53	; 83
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	e3 e5       	ldi	r30, 0x53	; 83
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
    337c:	8e 7f       	andi	r24, 0xFE	; 254
    337e:	8c 93       	st	X, r24
		Set_Bit(TCCR0,Pin1);
    3380:	a3 e5       	ldi	r26, 0x53	; 83
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	e3 e5       	ldi	r30, 0x53	; 83
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
    338a:	82 60       	ori	r24, 0x02	; 2
    338c:	8c 93       	st	X, r24
		Clr_Bit(TCCR0,Pin2);
    338e:	a3 e5       	ldi	r26, 0x53	; 83
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	e3 e5       	ldi	r30, 0x53	; 83
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	8b 7f       	andi	r24, 0xFB	; 251
    339a:	8c 93       	st	X, r24

		/*Enable Timer INT*/
		Set_Bit(TIMSK,Pin0);
    339c:	a9 e5       	ldi	r26, 0x59	; 89
    339e:	b0 e0       	ldi	r27, 0x00	; 0
    33a0:	e9 e5       	ldi	r30, 0x59	; 89
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	81 60       	ori	r24, 0x01	; 1
    33a8:	8c 93       	st	X, r24

		/*Normal Mode*/
		Clr_Bit(TCCR0,Pin6);
    33aa:	a3 e5       	ldi	r26, 0x53	; 83
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	e3 e5       	ldi	r30, 0x53	; 83
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
    33b4:	8f 7b       	andi	r24, 0xBF	; 191
    33b6:	8c 93       	st	X, r24
		Clr_Bit(TCCR0,Pin3);
    33b8:	a3 e5       	ldi	r26, 0x53	; 83
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	e3 e5       	ldi	r30, 0x53	; 83
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	80 81       	ld	r24, Z
    33c2:	87 7f       	andi	r24, 0xF7	; 247
    33c4:	8c 93       	st	X, r24
    33c6:	98 c0       	rjmp	.+304    	; 0x34f8 <TIMERINT_voidInit+0x1da>
	break;

	case CTC:
		/*Pre-Scaler (/8) */
		Clr_Bit(TCCR0,Pin0);
    33c8:	a3 e5       	ldi	r26, 0x53	; 83
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	e3 e5       	ldi	r30, 0x53	; 83
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	8e 7f       	andi	r24, 0xFE	; 254
    33d4:	8c 93       	st	X, r24
		Set_Bit(TCCR0,Pin1);
    33d6:	a3 e5       	ldi	r26, 0x53	; 83
    33d8:	b0 e0       	ldi	r27, 0x00	; 0
    33da:	e3 e5       	ldi	r30, 0x53	; 83
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	82 60       	ori	r24, 0x02	; 2
    33e2:	8c 93       	st	X, r24
		Clr_Bit(TCCR0,Pin2);
    33e4:	a3 e5       	ldi	r26, 0x53	; 83
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	e3 e5       	ldi	r30, 0x53	; 83
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	80 81       	ld	r24, Z
    33ee:	8b 7f       	andi	r24, 0xFB	; 251
    33f0:	8c 93       	st	X, r24

		/*Enable Timer INT*/
		Set_Bit(TIMSK,Pin1);
    33f2:	a9 e5       	ldi	r26, 0x59	; 89
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	e9 e5       	ldi	r30, 0x59	; 89
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	80 81       	ld	r24, Z
    33fc:	82 60       	ori	r24, 0x02	; 2
    33fe:	8c 93       	st	X, r24

		/*Normal Mode*/
		Clr_Bit(TCCR0,Pin6);
    3400:	a3 e5       	ldi	r26, 0x53	; 83
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	e3 e5       	ldi	r30, 0x53	; 83
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	8f 7b       	andi	r24, 0xBF	; 191
    340c:	8c 93       	st	X, r24
		Set_Bit(TCCR0,Pin3);
    340e:	a3 e5       	ldi	r26, 0x53	; 83
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	e3 e5       	ldi	r30, 0x53	; 83
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	88 60       	ori	r24, 0x08	; 8
    341a:	8c 93       	st	X, r24

		/*Assign Compare value*/
		OCR0=128;
    341c:	ec e5       	ldi	r30, 0x5C	; 92
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	80 e8       	ldi	r24, 0x80	; 128
    3422:	80 83       	st	Z, r24
    3424:	69 c0       	rjmp	.+210    	; 0x34f8 <TIMERINT_voidInit+0x1da>
	break;

	case PW_PASE:
		/*Pre-Scaler (/8) */
		Clr_Bit(TCCR0,Pin0);
    3426:	a3 e5       	ldi	r26, 0x53	; 83
    3428:	b0 e0       	ldi	r27, 0x00	; 0
    342a:	e3 e5       	ldi	r30, 0x53	; 83
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	8e 7f       	andi	r24, 0xFE	; 254
    3432:	8c 93       	st	X, r24
		Set_Bit(TCCR0,Pin1);
    3434:	a3 e5       	ldi	r26, 0x53	; 83
    3436:	b0 e0       	ldi	r27, 0x00	; 0
    3438:	e3 e5       	ldi	r30, 0x53	; 83
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	80 81       	ld	r24, Z
    343e:	82 60       	ori	r24, 0x02	; 2
    3440:	8c 93       	st	X, r24
		Clr_Bit(TCCR0,Pin2);
    3442:	a3 e5       	ldi	r26, 0x53	; 83
    3444:	b0 e0       	ldi	r27, 0x00	; 0
    3446:	e3 e5       	ldi	r30, 0x53	; 83
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	8b 7f       	andi	r24, 0xFB	; 251
    344e:	8c 93       	st	X, r24

		/*Enable Timer INT*/
		Set_Bit(TIMSK,Pin1);
    3450:	a9 e5       	ldi	r26, 0x59	; 89
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	e9 e5       	ldi	r30, 0x59	; 89
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	80 81       	ld	r24, Z
    345a:	82 60       	ori	r24, 0x02	; 2
    345c:	8c 93       	st	X, r24

		/*Normal Mode*/
		Clr_Bit(TCCR0,Pin6);
    345e:	a3 e5       	ldi	r26, 0x53	; 83
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	e3 e5       	ldi	r30, 0x53	; 83
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	8f 7b       	andi	r24, 0xBF	; 191
    346a:	8c 93       	st	X, r24
		Set_Bit(TCCR0,Pin3);
    346c:	a3 e5       	ldi	r26, 0x53	; 83
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	e3 e5       	ldi	r30, 0x53	; 83
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	88 60       	ori	r24, 0x08	; 8
    3478:	8c 93       	st	X, r24

		/*Assign Compare value*/
		OCR0=128;
    347a:	ec e5       	ldi	r30, 0x5C	; 92
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 e8       	ldi	r24, 0x80	; 128
    3480:	80 83       	st	Z, r24
    3482:	3a c0       	rjmp	.+116    	; 0x34f8 <TIMERINT_voidInit+0x1da>



	case FAST_PW:
		/*Pre-Scaler (/8) */
		Clr_Bit(TCCR0,Pin0);
    3484:	a3 e5       	ldi	r26, 0x53	; 83
    3486:	b0 e0       	ldi	r27, 0x00	; 0
    3488:	e3 e5       	ldi	r30, 0x53	; 83
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	8e 7f       	andi	r24, 0xFE	; 254
    3490:	8c 93       	st	X, r24
		Set_Bit(TCCR0,Pin1);
    3492:	a3 e5       	ldi	r26, 0x53	; 83
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	e3 e5       	ldi	r30, 0x53	; 83
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	82 60       	ori	r24, 0x02	; 2
    349e:	8c 93       	st	X, r24
		Clr_Bit(TCCR0,Pin2);
    34a0:	a3 e5       	ldi	r26, 0x53	; 83
    34a2:	b0 e0       	ldi	r27, 0x00	; 0
    34a4:	e3 e5       	ldi	r30, 0x53	; 83
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	80 81       	ld	r24, Z
    34aa:	8b 7f       	andi	r24, 0xFB	; 251
    34ac:	8c 93       	st	X, r24

		/*FAST PW Mode*/
		Set_Bit(TCCR0,Pin6);
    34ae:	a3 e5       	ldi	r26, 0x53	; 83
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	e3 e5       	ldi	r30, 0x53	; 83
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	80 81       	ld	r24, Z
    34b8:	80 64       	ori	r24, 0x40	; 64
    34ba:	8c 93       	st	X, r24
		Set_Bit(TCCR0,Pin3);
    34bc:	a3 e5       	ldi	r26, 0x53	; 83
    34be:	b0 e0       	ldi	r27, 0x00	; 0
    34c0:	e3 e5       	ldi	r30, 0x53	; 83
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	88 60       	ori	r24, 0x08	; 8
    34c8:	8c 93       	st	X, r24
		DIO_voidSetDir(PortB,Pin3,Output);
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	63 e0       	ldi	r22, 0x03	; 3
    34ce:	41 e0       	ldi	r20, 0x01	; 1
    34d0:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>


		/*oc0 Mode*/
		Set_Bit(TCCR0,Pin4);
    34d4:	a3 e5       	ldi	r26, 0x53	; 83
    34d6:	b0 e0       	ldi	r27, 0x00	; 0
    34d8:	e3 e5       	ldi	r30, 0x53	; 83
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	80 81       	ld	r24, Z
    34de:	80 61       	ori	r24, 0x10	; 16
    34e0:	8c 93       	st	X, r24
		Set_Bit(TCCR0,Pin5);
    34e2:	a3 e5       	ldi	r26, 0x53	; 83
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	e3 e5       	ldi	r30, 0x53	; 83
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	80 62       	ori	r24, 0x20	; 32
    34ee:	8c 93       	st	X, r24

		/*Assign Compare value*/
		OCR0=60;
    34f0:	ec e5       	ldi	r30, 0x5C	; 92
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	8c e3       	ldi	r24, 0x3C	; 60
    34f6:	80 83       	st	Z, r24
	}
}
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	cf 91       	pop	r28
    3500:	df 91       	pop	r29
    3502:	08 95       	ret

00003504 <__vector_1>:
void __vector_14(void) __attribute__((signal,__INTR_ATTRS)); /*ADC*/
void __vector_18(void) __attribute__((signal,__INTR_ATTRS)); /*INT2*/
void __vector_19(void) __attribute__((signal,__INTR_ATTRS)); /*Timer0 Comp*/

void __vector_1(void)
{
    3504:	1f 92       	push	r1
    3506:	0f 92       	push	r0
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	0f 92       	push	r0
    350c:	11 24       	eor	r1, r1
    350e:	2f 93       	push	r18
    3510:	3f 93       	push	r19
    3512:	4f 93       	push	r20
    3514:	5f 93       	push	r21
    3516:	6f 93       	push	r22
    3518:	7f 93       	push	r23
    351a:	8f 93       	push	r24
    351c:	9f 93       	push	r25
    351e:	af 93       	push	r26
    3520:	bf 93       	push	r27
    3522:	ef 93       	push	r30
    3524:	ff 93       	push	r31
    3526:	df 93       	push	r29
    3528:	cf 93       	push	r28
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
	ToggleLED(0);
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	0e 94 20 17 	call	0x2e40	; 0x2e40 <ToggleLED>
}
    3534:	cf 91       	pop	r28
    3536:	df 91       	pop	r29
    3538:	ff 91       	pop	r31
    353a:	ef 91       	pop	r30
    353c:	bf 91       	pop	r27
    353e:	af 91       	pop	r26
    3540:	9f 91       	pop	r25
    3542:	8f 91       	pop	r24
    3544:	7f 91       	pop	r23
    3546:	6f 91       	pop	r22
    3548:	5f 91       	pop	r21
    354a:	4f 91       	pop	r20
    354c:	3f 91       	pop	r19
    354e:	2f 91       	pop	r18
    3550:	0f 90       	pop	r0
    3552:	0f be       	out	0x3f, r0	; 63
    3554:	0f 90       	pop	r0
    3556:	1f 90       	pop	r1
    3558:	18 95       	reti

0000355a <__vector_2>:

void __vector_2(void)
{
    355a:	1f 92       	push	r1
    355c:	0f 92       	push	r0
    355e:	0f b6       	in	r0, 0x3f	; 63
    3560:	0f 92       	push	r0
    3562:	11 24       	eor	r1, r1
    3564:	2f 93       	push	r18
    3566:	3f 93       	push	r19
    3568:	4f 93       	push	r20
    356a:	5f 93       	push	r21
    356c:	6f 93       	push	r22
    356e:	7f 93       	push	r23
    3570:	8f 93       	push	r24
    3572:	9f 93       	push	r25
    3574:	af 93       	push	r26
    3576:	bf 93       	push	r27
    3578:	ef 93       	push	r30
    357a:	ff 93       	push	r31
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
	ToggleLED(1);
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	0e 94 20 17 	call	0x2e40	; 0x2e40 <ToggleLED>
}
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	ff 91       	pop	r31
    3590:	ef 91       	pop	r30
    3592:	bf 91       	pop	r27
    3594:	af 91       	pop	r26
    3596:	9f 91       	pop	r25
    3598:	8f 91       	pop	r24
    359a:	7f 91       	pop	r23
    359c:	6f 91       	pop	r22
    359e:	5f 91       	pop	r21
    35a0:	4f 91       	pop	r20
    35a2:	3f 91       	pop	r19
    35a4:	2f 91       	pop	r18
    35a6:	0f 90       	pop	r0
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	0f 90       	pop	r0
    35ac:	1f 90       	pop	r1
    35ae:	18 95       	reti

000035b0 <__vector_9>:

void __vector_9(void)
{
    35b0:	1f 92       	push	r1
    35b2:	0f 92       	push	r0
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	0f 92       	push	r0
    35b8:	11 24       	eor	r1, r1
    35ba:	2f 93       	push	r18
    35bc:	3f 93       	push	r19
    35be:	4f 93       	push	r20
    35c0:	5f 93       	push	r21
    35c2:	6f 93       	push	r22
    35c4:	7f 93       	push	r23
    35c6:	8f 93       	push	r24
    35c8:	9f 93       	push	r25
    35ca:	af 93       	push	r26
    35cc:	bf 93       	push	r27
    35ce:	ef 93       	push	r30
    35d0:	ff 93       	push	r31
    35d2:	df 93       	push	r29
    35d4:	cf 93       	push	r28
    35d6:	cd b7       	in	r28, 0x3d	; 61
    35d8:	de b7       	in	r29, 0x3e	; 62
	counter++;
    35da:	80 91 73 00 	lds	r24, 0x0073
    35de:	90 91 74 00 	lds	r25, 0x0074
    35e2:	a0 91 75 00 	lds	r26, 0x0075
    35e6:	b0 91 76 00 	lds	r27, 0x0076
    35ea:	01 96       	adiw	r24, 0x01	; 1
    35ec:	a1 1d       	adc	r26, r1
    35ee:	b1 1d       	adc	r27, r1
    35f0:	80 93 73 00 	sts	0x0073, r24
    35f4:	90 93 74 00 	sts	0x0074, r25
    35f8:	a0 93 75 00 	sts	0x0075, r26
    35fc:	b0 93 76 00 	sts	0x0076, r27
	if(counter==488)
    3600:	80 91 73 00 	lds	r24, 0x0073
    3604:	90 91 74 00 	lds	r25, 0x0074
    3608:	a0 91 75 00 	lds	r26, 0x0075
    360c:	b0 91 76 00 	lds	r27, 0x0076
    3610:	88 3e       	cpi	r24, 0xE8	; 232
    3612:	21 e0       	ldi	r18, 0x01	; 1
    3614:	92 07       	cpc	r25, r18
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	a2 07       	cpc	r26, r18
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	b2 07       	cpc	r27, r18
    361e:	59 f4       	brne	.+22     	; 0x3636 <__vector_9+0x86>
	{	counter=0;
    3620:	10 92 73 00 	sts	0x0073, r1
    3624:	10 92 74 00 	sts	0x0074, r1
    3628:	10 92 75 00 	sts	0x0075, r1
    362c:	10 92 76 00 	sts	0x0076, r1
		ToggleLED(0);
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	0e 94 20 17 	call	0x2e40	; 0x2e40 <ToggleLED>
	}
}
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	ff 91       	pop	r31
    363c:	ef 91       	pop	r30
    363e:	bf 91       	pop	r27
    3640:	af 91       	pop	r26
    3642:	9f 91       	pop	r25
    3644:	8f 91       	pop	r24
    3646:	7f 91       	pop	r23
    3648:	6f 91       	pop	r22
    364a:	5f 91       	pop	r21
    364c:	4f 91       	pop	r20
    364e:	3f 91       	pop	r19
    3650:	2f 91       	pop	r18
    3652:	0f 90       	pop	r0
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	0f 90       	pop	r0
    3658:	1f 90       	pop	r1
    365a:	18 95       	reti

0000365c <__vector_14>:

void __vector_14(void)
{
    365c:	1f 92       	push	r1
    365e:	0f 92       	push	r0
    3660:	0f b6       	in	r0, 0x3f	; 63
    3662:	0f 92       	push	r0
    3664:	11 24       	eor	r1, r1
    3666:	0f 93       	push	r16
    3668:	1f 93       	push	r17
    366a:	2f 93       	push	r18
    366c:	3f 93       	push	r19
    366e:	4f 93       	push	r20
    3670:	5f 93       	push	r21
    3672:	6f 93       	push	r22
    3674:	7f 93       	push	r23
    3676:	8f 93       	push	r24
    3678:	9f 93       	push	r25
    367a:	af 93       	push	r26
    367c:	bf 93       	push	r27
    367e:	ef 93       	push	r30
    3680:	ff 93       	push	r31
    3682:	df 93       	push	r29
    3684:	cf 93       	push	r28
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	ec 97       	sbiw	r28, 0x3c	; 60
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	cd bf       	out	0x3d, r28	; 61
	u32 Data_Reading,Data_Voltage;
	u8 count,count2, Reading[4], Voltage[4];
	Data_Reading = ADC_u16GetVal();
    3690:	0e 94 a4 06 	call	0xd48	; 0xd48 <ADC_u16GetVal>
    3694:	cc 01       	movw	r24, r24
    3696:	a0 e0       	ldi	r26, 0x00	; 0
    3698:	b0 e0       	ldi	r27, 0x00	; 0
    369a:	89 ab       	std	Y+49, r24	; 0x31
    369c:	9a ab       	std	Y+50, r25	; 0x32
    369e:	ab ab       	std	Y+51, r26	; 0x33
    36a0:	bc ab       	std	Y+52, r27	; 0x34
	Data_Voltage=(Data_Reading*5*100)/1023;
    36a2:	89 a9       	ldd	r24, Y+49	; 0x31
    36a4:	9a a9       	ldd	r25, Y+50	; 0x32
    36a6:	ab a9       	ldd	r26, Y+51	; 0x33
    36a8:	bc a9       	ldd	r27, Y+52	; 0x34
    36aa:	24 ef       	ldi	r18, 0xF4	; 244
    36ac:	31 e0       	ldi	r19, 0x01	; 1
    36ae:	40 e0       	ldi	r20, 0x00	; 0
    36b0:	50 e0       	ldi	r21, 0x00	; 0
    36b2:	bc 01       	movw	r22, r24
    36b4:	cd 01       	movw	r24, r26
    36b6:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__mulsi3>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	2f ef       	ldi	r18, 0xFF	; 255
    36c0:	33 e0       	ldi	r19, 0x03	; 3
    36c2:	40 e0       	ldi	r20, 0x00	; 0
    36c4:	50 e0       	ldi	r21, 0x00	; 0
    36c6:	bc 01       	movw	r22, r24
    36c8:	cd 01       	movw	r24, r26
    36ca:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__udivmodsi4>
    36ce:	da 01       	movw	r26, r20
    36d0:	c9 01       	movw	r24, r18
    36d2:	8d a7       	std	Y+45, r24	; 0x2d
    36d4:	9e a7       	std	Y+46, r25	; 0x2e
    36d6:	af a7       	std	Y+47, r26	; 0x2f
    36d8:	b8 ab       	std	Y+48, r27	; 0x30

	for(count=4;count>0;count--)
    36da:	84 e0       	ldi	r24, 0x04	; 4
    36dc:	8c a7       	std	Y+44, r24	; 0x2c
    36de:	31 c0       	rjmp	.+98     	; 0x3742 <__vector_14+0xe6>
	{
		Reading[count-1]=Data_Reading%10 + 48;
    36e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    36e2:	88 2f       	mov	r24, r24
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	8c 01       	movw	r16, r24
    36e8:	01 50       	subi	r16, 0x01	; 1
    36ea:	10 40       	sbci	r17, 0x00	; 0
    36ec:	89 a9       	ldd	r24, Y+49	; 0x31
    36ee:	9a a9       	ldd	r25, Y+50	; 0x32
    36f0:	ab a9       	ldd	r26, Y+51	; 0x33
    36f2:	bc a9       	ldd	r27, Y+52	; 0x34
    36f4:	2a e0       	ldi	r18, 0x0A	; 10
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	40 e0       	ldi	r20, 0x00	; 0
    36fa:	50 e0       	ldi	r21, 0x00	; 0
    36fc:	bc 01       	movw	r22, r24
    36fe:	cd 01       	movw	r24, r26
    3700:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__udivmodsi4>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	28 2f       	mov	r18, r24
    370a:	20 5d       	subi	r18, 0xD0	; 208
    370c:	ce 01       	movw	r24, r28
    370e:	c5 96       	adiw	r24, 0x35	; 53
    3710:	fc 01       	movw	r30, r24
    3712:	e0 0f       	add	r30, r16
    3714:	f1 1f       	adc	r31, r17
    3716:	20 83       	st	Z, r18
		Data_Reading/=10;
    3718:	89 a9       	ldd	r24, Y+49	; 0x31
    371a:	9a a9       	ldd	r25, Y+50	; 0x32
    371c:	ab a9       	ldd	r26, Y+51	; 0x33
    371e:	bc a9       	ldd	r27, Y+52	; 0x34
    3720:	2a e0       	ldi	r18, 0x0A	; 10
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	40 e0       	ldi	r20, 0x00	; 0
    3726:	50 e0       	ldi	r21, 0x00	; 0
    3728:	bc 01       	movw	r22, r24
    372a:	cd 01       	movw	r24, r26
    372c:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__udivmodsi4>
    3730:	da 01       	movw	r26, r20
    3732:	c9 01       	movw	r24, r18
    3734:	89 ab       	std	Y+49, r24	; 0x31
    3736:	9a ab       	std	Y+50, r25	; 0x32
    3738:	ab ab       	std	Y+51, r26	; 0x33
    373a:	bc ab       	std	Y+52, r27	; 0x34
	u32 Data_Reading,Data_Voltage;
	u8 count,count2, Reading[4], Voltage[4];
	Data_Reading = ADC_u16GetVal();
	Data_Voltage=(Data_Reading*5*100)/1023;

	for(count=4;count>0;count--)
    373c:	8c a5       	ldd	r24, Y+44	; 0x2c
    373e:	81 50       	subi	r24, 0x01	; 1
    3740:	8c a7       	std	Y+44, r24	; 0x2c
    3742:	8c a5       	ldd	r24, Y+44	; 0x2c
    3744:	88 23       	and	r24, r24
    3746:	61 f6       	brne	.-104    	; 0x36e0 <__vector_14+0x84>
	{
		Reading[count-1]=Data_Reading%10 + 48;
		Data_Reading/=10;
	}

	for(count=3;count>0;count--)
    3748:	83 e0       	ldi	r24, 0x03	; 3
    374a:	8c a7       	std	Y+44, r24	; 0x2c
    374c:	30 c0       	rjmp	.+96     	; 0x37ae <__vector_14+0x152>
	{
		Voltage[count-1]=Data_Voltage%10;
    374e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3750:	88 2f       	mov	r24, r24
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	8c 01       	movw	r16, r24
    3756:	01 50       	subi	r16, 0x01	; 1
    3758:	10 40       	sbci	r17, 0x00	; 0
    375a:	8d a5       	ldd	r24, Y+45	; 0x2d
    375c:	9e a5       	ldd	r25, Y+46	; 0x2e
    375e:	af a5       	ldd	r26, Y+47	; 0x2f
    3760:	b8 a9       	ldd	r27, Y+48	; 0x30
    3762:	2a e0       	ldi	r18, 0x0A	; 10
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	50 e0       	ldi	r21, 0x00	; 0
    376a:	bc 01       	movw	r22, r24
    376c:	cd 01       	movw	r24, r26
    376e:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__udivmodsi4>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	28 2f       	mov	r18, r24
    3778:	ce 01       	movw	r24, r28
    377a:	c9 96       	adiw	r24, 0x39	; 57
    377c:	fc 01       	movw	r30, r24
    377e:	e0 0f       	add	r30, r16
    3780:	f1 1f       	adc	r31, r17
    3782:	20 83       	st	Z, r18
		Data_Voltage/=10;
    3784:	8d a5       	ldd	r24, Y+45	; 0x2d
    3786:	9e a5       	ldd	r25, Y+46	; 0x2e
    3788:	af a5       	ldd	r26, Y+47	; 0x2f
    378a:	b8 a9       	ldd	r27, Y+48	; 0x30
    378c:	2a e0       	ldi	r18, 0x0A	; 10
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e0       	ldi	r20, 0x00	; 0
    3792:	50 e0       	ldi	r21, 0x00	; 0
    3794:	bc 01       	movw	r22, r24
    3796:	cd 01       	movw	r24, r26
    3798:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__udivmodsi4>
    379c:	da 01       	movw	r26, r20
    379e:	c9 01       	movw	r24, r18
    37a0:	8d a7       	std	Y+45, r24	; 0x2d
    37a2:	9e a7       	std	Y+46, r25	; 0x2e
    37a4:	af a7       	std	Y+47, r26	; 0x2f
    37a6:	b8 ab       	std	Y+48, r27	; 0x30
	{
		Reading[count-1]=Data_Reading%10 + 48;
		Data_Reading/=10;
	}

	for(count=3;count>0;count--)
    37a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    37aa:	81 50       	subi	r24, 0x01	; 1
    37ac:	8c a7       	std	Y+44, r24	; 0x2c
    37ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    37b0:	88 23       	and	r24, r24
    37b2:	69 f6       	brne	.-102    	; 0x374e <__vector_14+0xf2>
	{
		Voltage[count-1]=Data_Voltage%10;
		Data_Voltage/=10;
	}

	for(count=0;count<4;count++)
    37b4:	1c a6       	std	Y+44, r1	; 0x2c
    37b6:	0e c0       	rjmp	.+28     	; 0x37d4 <__vector_14+0x178>
		LCD_WriteData(Reading[count]);
    37b8:	8c a5       	ldd	r24, Y+44	; 0x2c
    37ba:	28 2f       	mov	r18, r24
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	ce 01       	movw	r24, r28
    37c0:	c5 96       	adiw	r24, 0x35	; 53
    37c2:	fc 01       	movw	r30, r24
    37c4:	e2 0f       	add	r30, r18
    37c6:	f3 1f       	adc	r31, r19
    37c8:	80 81       	ld	r24, Z
    37ca:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_WriteData>
	{
		Voltage[count-1]=Data_Voltage%10;
		Data_Voltage/=10;
	}

	for(count=0;count<4;count++)
    37ce:	8c a5       	ldd	r24, Y+44	; 0x2c
    37d0:	8f 5f       	subi	r24, 0xFF	; 255
    37d2:	8c a7       	std	Y+44, r24	; 0x2c
    37d4:	8c a5       	ldd	r24, Y+44	; 0x2c
    37d6:	84 30       	cpi	r24, 0x04	; 4
    37d8:	78 f3       	brcs	.-34     	; 0x37b8 <__vector_14+0x15c>
		LCD_WriteData(Reading[count]);

	for(count2=0;count2<50;count2++)
    37da:	1b a6       	std	Y+43, r1	; 0x2b
    37dc:	ef c0       	rjmp	.+478    	; 0x39bc <__vector_14+0x360>
	{
		SS_Write(Voltage[0],1);
    37de:	89 ad       	ldd	r24, Y+57	; 0x39
    37e0:	61 e0       	ldi	r22, 0x01	; 1
    37e2:	0e 94 36 19 	call	0x326c	; 0x326c <SS_Write>
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	a0 e2       	ldi	r26, 0x20	; 32
    37ec:	b1 e4       	ldi	r27, 0x41	; 65
    37ee:	8f a3       	std	Y+39, r24	; 0x27
    37f0:	98 a7       	std	Y+40, r25	; 0x28
    37f2:	a9 a7       	std	Y+41, r26	; 0x29
    37f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f6:	6f a1       	ldd	r22, Y+39	; 0x27
    37f8:	78 a5       	ldd	r23, Y+40	; 0x28
    37fa:	89 a5       	ldd	r24, Y+41	; 0x29
    37fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	4a e7       	ldi	r20, 0x7A	; 122
    3804:	53 e4       	ldi	r21, 0x43	; 67
    3806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	8b a3       	std	Y+35, r24	; 0x23
    3810:	9c a3       	std	Y+36, r25	; 0x24
    3812:	ad a3       	std	Y+37, r26	; 0x25
    3814:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3816:	6b a1       	ldd	r22, Y+35	; 0x23
    3818:	7c a1       	ldd	r23, Y+36	; 0x24
    381a:	8d a1       	ldd	r24, Y+37	; 0x25
    381c:	9e a1       	ldd	r25, Y+38	; 0x26
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	40 e8       	ldi	r20, 0x80	; 128
    3824:	5f e3       	ldi	r21, 0x3F	; 63
    3826:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    382a:	88 23       	and	r24, r24
    382c:	2c f4       	brge	.+10     	; 0x3838 <__vector_14+0x1dc>
		__ticks = 1;
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	9a a3       	std	Y+34, r25	; 0x22
    3834:	89 a3       	std	Y+33, r24	; 0x21
    3836:	3f c0       	rjmp	.+126    	; 0x38b6 <__vector_14+0x25a>
	else if (__tmp > 65535)
    3838:	6b a1       	ldd	r22, Y+35	; 0x23
    383a:	7c a1       	ldd	r23, Y+36	; 0x24
    383c:	8d a1       	ldd	r24, Y+37	; 0x25
    383e:	9e a1       	ldd	r25, Y+38	; 0x26
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	3f ef       	ldi	r19, 0xFF	; 255
    3844:	4f e7       	ldi	r20, 0x7F	; 127
    3846:	57 e4       	ldi	r21, 0x47	; 71
    3848:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    384c:	18 16       	cp	r1, r24
    384e:	4c f5       	brge	.+82     	; 0x38a2 <__vector_14+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3850:	6f a1       	ldd	r22, Y+39	; 0x27
    3852:	78 a5       	ldd	r23, Y+40	; 0x28
    3854:	89 a5       	ldd	r24, Y+41	; 0x29
    3856:	9a a5       	ldd	r25, Y+42	; 0x2a
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e2       	ldi	r20, 0x20	; 32
    385e:	51 e4       	ldi	r21, 0x41	; 65
    3860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	bc 01       	movw	r22, r24
    386a:	cd 01       	movw	r24, r26
    386c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	9a a3       	std	Y+34, r25	; 0x22
    3876:	89 a3       	std	Y+33, r24	; 0x21
    3878:	0f c0       	rjmp	.+30     	; 0x3898 <__vector_14+0x23c>
    387a:	89 e1       	ldi	r24, 0x19	; 25
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	98 a3       	std	Y+32, r25	; 0x20
    3880:	8f 8f       	std	Y+31, r24	; 0x1f
    3882:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3884:	98 a1       	ldd	r25, Y+32	; 0x20
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <__vector_14+0x22a>
    388a:	98 a3       	std	Y+32, r25	; 0x20
    388c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388e:	89 a1       	ldd	r24, Y+33	; 0x21
    3890:	9a a1       	ldd	r25, Y+34	; 0x22
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	9a a3       	std	Y+34, r25	; 0x22
    3896:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3898:	89 a1       	ldd	r24, Y+33	; 0x21
    389a:	9a a1       	ldd	r25, Y+34	; 0x22
    389c:	00 97       	sbiw	r24, 0x00	; 0
    389e:	69 f7       	brne	.-38     	; 0x387a <__vector_14+0x21e>
    38a0:	14 c0       	rjmp	.+40     	; 0x38ca <__vector_14+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a2:	6b a1       	ldd	r22, Y+35	; 0x23
    38a4:	7c a1       	ldd	r23, Y+36	; 0x24
    38a6:	8d a1       	ldd	r24, Y+37	; 0x25
    38a8:	9e a1       	ldd	r25, Y+38	; 0x26
    38aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	9a a3       	std	Y+34, r25	; 0x22
    38b4:	89 a3       	std	Y+33, r24	; 0x21
    38b6:	89 a1       	ldd	r24, Y+33	; 0x21
    38b8:	9a a1       	ldd	r25, Y+34	; 0x22
    38ba:	9e 8f       	std	Y+30, r25	; 0x1e
    38bc:	8d 8f       	std	Y+29, r24	; 0x1d
    38be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	f1 f7       	brne	.-4      	; 0x38c2 <__vector_14+0x266>
    38c6:	9e 8f       	std	Y+30, r25	; 0x1e
    38c8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		SS_Write(Voltage[1],0);
    38ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    38cc:	60 e0       	ldi	r22, 0x00	; 0
    38ce:	0e 94 36 19 	call	0x326c	; 0x326c <SS_Write>
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	a0 e2       	ldi	r26, 0x20	; 32
    38d8:	b1 e4       	ldi	r27, 0x41	; 65
    38da:	89 8f       	std	Y+25, r24	; 0x19
    38dc:	9a 8f       	std	Y+26, r25	; 0x1a
    38de:	ab 8f       	std	Y+27, r26	; 0x1b
    38e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e2:	69 8d       	ldd	r22, Y+25	; 0x19
    38e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	4a e7       	ldi	r20, 0x7A	; 122
    38f0:	53 e4       	ldi	r21, 0x43	; 67
    38f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	8d 8b       	std	Y+21, r24	; 0x15
    38fc:	9e 8b       	std	Y+22, r25	; 0x16
    38fe:	af 8b       	std	Y+23, r26	; 0x17
    3900:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3902:	6d 89       	ldd	r22, Y+21	; 0x15
    3904:	7e 89       	ldd	r23, Y+22	; 0x16
    3906:	8f 89       	ldd	r24, Y+23	; 0x17
    3908:	98 8d       	ldd	r25, Y+24	; 0x18
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	40 e8       	ldi	r20, 0x80	; 128
    3910:	5f e3       	ldi	r21, 0x3F	; 63
    3912:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3916:	88 23       	and	r24, r24
    3918:	2c f4       	brge	.+10     	; 0x3924 <__vector_14+0x2c8>
		__ticks = 1;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	9c 8b       	std	Y+20, r25	; 0x14
    3920:	8b 8b       	std	Y+19, r24	; 0x13
    3922:	3f c0       	rjmp	.+126    	; 0x39a2 <__vector_14+0x346>
	else if (__tmp > 65535)
    3924:	6d 89       	ldd	r22, Y+21	; 0x15
    3926:	7e 89       	ldd	r23, Y+22	; 0x16
    3928:	8f 89       	ldd	r24, Y+23	; 0x17
    392a:	98 8d       	ldd	r25, Y+24	; 0x18
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	3f ef       	ldi	r19, 0xFF	; 255
    3930:	4f e7       	ldi	r20, 0x7F	; 127
    3932:	57 e4       	ldi	r21, 0x47	; 71
    3934:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3938:	18 16       	cp	r1, r24
    393a:	4c f5       	brge	.+82     	; 0x398e <__vector_14+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393c:	69 8d       	ldd	r22, Y+25	; 0x19
    393e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3940:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3942:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	40 e2       	ldi	r20, 0x20	; 32
    394a:	51 e4       	ldi	r21, 0x41	; 65
    394c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	bc 01       	movw	r22, r24
    3956:	cd 01       	movw	r24, r26
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	9c 8b       	std	Y+20, r25	; 0x14
    3962:	8b 8b       	std	Y+19, r24	; 0x13
    3964:	0f c0       	rjmp	.+30     	; 0x3984 <__vector_14+0x328>
    3966:	89 e1       	ldi	r24, 0x19	; 25
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	9a 8b       	std	Y+18, r25	; 0x12
    396c:	89 8b       	std	Y+17, r24	; 0x11
    396e:	89 89       	ldd	r24, Y+17	; 0x11
    3970:	9a 89       	ldd	r25, Y+18	; 0x12
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	f1 f7       	brne	.-4      	; 0x3972 <__vector_14+0x316>
    3976:	9a 8b       	std	Y+18, r25	; 0x12
    3978:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397a:	8b 89       	ldd	r24, Y+19	; 0x13
    397c:	9c 89       	ldd	r25, Y+20	; 0x14
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	9c 8b       	std	Y+20, r25	; 0x14
    3982:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3984:	8b 89       	ldd	r24, Y+19	; 0x13
    3986:	9c 89       	ldd	r25, Y+20	; 0x14
    3988:	00 97       	sbiw	r24, 0x00	; 0
    398a:	69 f7       	brne	.-38     	; 0x3966 <__vector_14+0x30a>
    398c:	14 c0       	rjmp	.+40     	; 0x39b6 <__vector_14+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398e:	6d 89       	ldd	r22, Y+21	; 0x15
    3990:	7e 89       	ldd	r23, Y+22	; 0x16
    3992:	8f 89       	ldd	r24, Y+23	; 0x17
    3994:	98 8d       	ldd	r25, Y+24	; 0x18
    3996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	9c 8b       	std	Y+20, r25	; 0x14
    39a0:	8b 8b       	std	Y+19, r24	; 0x13
    39a2:	8b 89       	ldd	r24, Y+19	; 0x13
    39a4:	9c 89       	ldd	r25, Y+20	; 0x14
    39a6:	98 8b       	std	Y+16, r25	; 0x10
    39a8:	8f 87       	std	Y+15, r24	; 0x0f
    39aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ac:	98 89       	ldd	r25, Y+16	; 0x10
    39ae:	01 97       	sbiw	r24, 0x01	; 1
    39b0:	f1 f7       	brne	.-4      	; 0x39ae <__vector_14+0x352>
    39b2:	98 8b       	std	Y+16, r25	; 0x10
    39b4:	8f 87       	std	Y+15, r24	; 0x0f
	}

	for(count=0;count<4;count++)
		LCD_WriteData(Reading[count]);

	for(count2=0;count2<50;count2++)
    39b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    39b8:	8f 5f       	subi	r24, 0xFF	; 255
    39ba:	8b a7       	std	Y+43, r24	; 0x2b
    39bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    39be:	82 33       	cpi	r24, 0x32	; 50
    39c0:	08 f4       	brcc	.+2      	; 0x39c4 <__vector_14+0x368>
    39c2:	0d cf       	rjmp	.-486    	; 0x37de <__vector_14+0x182>
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	a8 ec       	ldi	r26, 0xC8	; 200
    39ca:	b2 e4       	ldi	r27, 0x42	; 66
    39cc:	8b 87       	std	Y+11, r24	; 0x0b
    39ce:	9c 87       	std	Y+12, r25	; 0x0c
    39d0:	ad 87       	std	Y+13, r26	; 0x0d
    39d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39da:	9e 85       	ldd	r25, Y+14	; 0x0e
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	4a e7       	ldi	r20, 0x7A	; 122
    39e2:	53 e4       	ldi	r21, 0x43	; 67
    39e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	8f 83       	std	Y+7, r24	; 0x07
    39ee:	98 87       	std	Y+8, r25	; 0x08
    39f0:	a9 87       	std	Y+9, r26	; 0x09
    39f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39f4:	6f 81       	ldd	r22, Y+7	; 0x07
    39f6:	78 85       	ldd	r23, Y+8	; 0x08
    39f8:	89 85       	ldd	r24, Y+9	; 0x09
    39fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e8       	ldi	r20, 0x80	; 128
    3a02:	5f e3       	ldi	r21, 0x3F	; 63
    3a04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a08:	88 23       	and	r24, r24
    3a0a:	2c f4       	brge	.+10     	; 0x3a16 <__vector_14+0x3ba>
		__ticks = 1;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	9e 83       	std	Y+6, r25	; 0x06
    3a12:	8d 83       	std	Y+5, r24	; 0x05
    3a14:	3f c0       	rjmp	.+126    	; 0x3a94 <__vector_14+0x438>
	else if (__tmp > 65535)
    3a16:	6f 81       	ldd	r22, Y+7	; 0x07
    3a18:	78 85       	ldd	r23, Y+8	; 0x08
    3a1a:	89 85       	ldd	r24, Y+9	; 0x09
    3a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	3f ef       	ldi	r19, 0xFF	; 255
    3a22:	4f e7       	ldi	r20, 0x7F	; 127
    3a24:	57 e4       	ldi	r21, 0x47	; 71
    3a26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a2a:	18 16       	cp	r1, r24
    3a2c:	4c f5       	brge	.+82     	; 0x3a80 <__vector_14+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e2       	ldi	r20, 0x20	; 32
    3a3c:	51 e4       	ldi	r21, 0x41	; 65
    3a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	bc 01       	movw	r22, r24
    3a48:	cd 01       	movw	r24, r26
    3a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	9e 83       	std	Y+6, r25	; 0x06
    3a54:	8d 83       	std	Y+5, r24	; 0x05
    3a56:	0f c0       	rjmp	.+30     	; 0x3a76 <__vector_14+0x41a>
    3a58:	89 e1       	ldi	r24, 0x19	; 25
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	9c 83       	std	Y+4, r25	; 0x04
    3a5e:	8b 83       	std	Y+3, r24	; 0x03
    3a60:	8b 81       	ldd	r24, Y+3	; 0x03
    3a62:	9c 81       	ldd	r25, Y+4	; 0x04
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <__vector_14+0x408>
    3a68:	9c 83       	std	Y+4, r25	; 0x04
    3a6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	9e 83       	std	Y+6, r25	; 0x06
    3a74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7a:	00 97       	sbiw	r24, 0x00	; 0
    3a7c:	69 f7       	brne	.-38     	; 0x3a58 <__vector_14+0x3fc>
    3a7e:	14 c0       	rjmp	.+40     	; 0x3aa8 <__vector_14+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a80:	6f 81       	ldd	r22, Y+7	; 0x07
    3a82:	78 85       	ldd	r23, Y+8	; 0x08
    3a84:	89 85       	ldd	r24, Y+9	; 0x09
    3a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	9e 83       	std	Y+6, r25	; 0x06
    3a92:	8d 83       	std	Y+5, r24	; 0x05
    3a94:	8d 81       	ldd	r24, Y+5	; 0x05
    3a96:	9e 81       	ldd	r25, Y+6	; 0x06
    3a98:	9a 83       	std	Y+2, r25	; 0x02
    3a9a:	89 83       	std	Y+1, r24	; 0x01
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <__vector_14+0x444>
    3aa4:	9a 83       	std	Y+2, r25	; 0x02
    3aa6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		SS_Write(Voltage[1],0);
		_delay_ms(10);
	}
	_delay_ms(100);
	LCD_CLear();
    3aa8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_CLear>
}
    3aac:	ec 96       	adiw	r28, 0x3c	; 60
    3aae:	de bf       	out	0x3e, r29	; 62
    3ab0:	cd bf       	out	0x3d, r28	; 61
    3ab2:	cf 91       	pop	r28
    3ab4:	df 91       	pop	r29
    3ab6:	ff 91       	pop	r31
    3ab8:	ef 91       	pop	r30
    3aba:	bf 91       	pop	r27
    3abc:	af 91       	pop	r26
    3abe:	9f 91       	pop	r25
    3ac0:	8f 91       	pop	r24
    3ac2:	7f 91       	pop	r23
    3ac4:	6f 91       	pop	r22
    3ac6:	5f 91       	pop	r21
    3ac8:	4f 91       	pop	r20
    3aca:	3f 91       	pop	r19
    3acc:	2f 91       	pop	r18
    3ace:	1f 91       	pop	r17
    3ad0:	0f 91       	pop	r16
    3ad2:	0f 90       	pop	r0
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	0f 90       	pop	r0
    3ad8:	1f 90       	pop	r1
    3ada:	18 95       	reti

00003adc <__vector_18>:

void __vector_18(void)
{
    3adc:	1f 92       	push	r1
    3ade:	0f 92       	push	r0
    3ae0:	0f b6       	in	r0, 0x3f	; 63
    3ae2:	0f 92       	push	r0
    3ae4:	11 24       	eor	r1, r1
    3ae6:	2f 93       	push	r18
    3ae8:	3f 93       	push	r19
    3aea:	4f 93       	push	r20
    3aec:	5f 93       	push	r21
    3aee:	6f 93       	push	r22
    3af0:	7f 93       	push	r23
    3af2:	8f 93       	push	r24
    3af4:	9f 93       	push	r25
    3af6:	af 93       	push	r26
    3af8:	bf 93       	push	r27
    3afa:	ef 93       	push	r30
    3afc:	ff 93       	push	r31
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
	Buzzer_Toggle();
    3b06:	0e 94 08 07 	call	0xe10	; 0xe10 <Buzzer_Toggle>
}
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	ff 91       	pop	r31
    3b10:	ef 91       	pop	r30
    3b12:	bf 91       	pop	r27
    3b14:	af 91       	pop	r26
    3b16:	9f 91       	pop	r25
    3b18:	8f 91       	pop	r24
    3b1a:	7f 91       	pop	r23
    3b1c:	6f 91       	pop	r22
    3b1e:	5f 91       	pop	r21
    3b20:	4f 91       	pop	r20
    3b22:	3f 91       	pop	r19
    3b24:	2f 91       	pop	r18
    3b26:	0f 90       	pop	r0
    3b28:	0f be       	out	0x3f, r0	; 63
    3b2a:	0f 90       	pop	r0
    3b2c:	1f 90       	pop	r1
    3b2e:	18 95       	reti

00003b30 <__vector_19>:

void __vector_19(void)
{
    3b30:	1f 92       	push	r1
    3b32:	0f 92       	push	r0
    3b34:	0f b6       	in	r0, 0x3f	; 63
    3b36:	0f 92       	push	r0
    3b38:	11 24       	eor	r1, r1
    3b3a:	2f 93       	push	r18
    3b3c:	3f 93       	push	r19
    3b3e:	4f 93       	push	r20
    3b40:	5f 93       	push	r21
    3b42:	6f 93       	push	r22
    3b44:	7f 93       	push	r23
    3b46:	8f 93       	push	r24
    3b48:	9f 93       	push	r25
    3b4a:	af 93       	push	r26
    3b4c:	bf 93       	push	r27
    3b4e:	ef 93       	push	r30
    3b50:	ff 93       	push	r31
    3b52:	df 93       	push	r29
    3b54:	cf 93       	push	r28
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
	counter++;
    3b5a:	80 91 73 00 	lds	r24, 0x0073
    3b5e:	90 91 74 00 	lds	r25, 0x0074
    3b62:	a0 91 75 00 	lds	r26, 0x0075
    3b66:	b0 91 76 00 	lds	r27, 0x0076
    3b6a:	01 96       	adiw	r24, 0x01	; 1
    3b6c:	a1 1d       	adc	r26, r1
    3b6e:	b1 1d       	adc	r27, r1
    3b70:	80 93 73 00 	sts	0x0073, r24
    3b74:	90 93 74 00 	sts	0x0074, r25
    3b78:	a0 93 75 00 	sts	0x0075, r26
    3b7c:	b0 93 76 00 	sts	0x0076, r27
	if(counter==625)
    3b80:	80 91 73 00 	lds	r24, 0x0073
    3b84:	90 91 74 00 	lds	r25, 0x0074
    3b88:	a0 91 75 00 	lds	r26, 0x0075
    3b8c:	b0 91 76 00 	lds	r27, 0x0076
    3b90:	81 37       	cpi	r24, 0x71	; 113
    3b92:	22 e0       	ldi	r18, 0x02	; 2
    3b94:	92 07       	cpc	r25, r18
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	a2 07       	cpc	r26, r18
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	b2 07       	cpc	r27, r18
    3b9e:	59 f4       	brne	.+22     	; 0x3bb6 <__vector_19+0x86>
	{	counter=0;
    3ba0:	10 92 73 00 	sts	0x0073, r1
    3ba4:	10 92 74 00 	sts	0x0074, r1
    3ba8:	10 92 75 00 	sts	0x0075, r1
    3bac:	10 92 76 00 	sts	0x0076, r1
		ToggleLED(0);
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	0e 94 20 17 	call	0x2e40	; 0x2e40 <ToggleLED>
	}
}
    3bb6:	cf 91       	pop	r28
    3bb8:	df 91       	pop	r29
    3bba:	ff 91       	pop	r31
    3bbc:	ef 91       	pop	r30
    3bbe:	bf 91       	pop	r27
    3bc0:	af 91       	pop	r26
    3bc2:	9f 91       	pop	r25
    3bc4:	8f 91       	pop	r24
    3bc6:	7f 91       	pop	r23
    3bc8:	6f 91       	pop	r22
    3bca:	5f 91       	pop	r21
    3bcc:	4f 91       	pop	r20
    3bce:	3f 91       	pop	r19
    3bd0:	2f 91       	pop	r18
    3bd2:	0f 90       	pop	r0
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	0f 90       	pop	r0
    3bd8:	1f 90       	pop	r1
    3bda:	18 95       	reti

00003bdc <main>:

int main()
{
    3bdc:	df 93       	push	r29
    3bde:	cf 93       	push	r28
    3be0:	cd b7       	in	r28, 0x3d	; 61
    3be2:	de b7       	in	r29, 0x3e	; 62
    3be4:	6c 97       	sbiw	r28, 0x1c	; 28
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	f8 94       	cli
    3bea:	de bf       	out	0x3e, r29	; 62
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	cd bf       	out	0x3d, r28	; 61

#endif

#if INT==INT0 || INT==INT1 || INT==INT2

	Buzzer_Init();
    3bf0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <Buzzer_Init>
	LED_Init(0);
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <LED_Init>
	LED_Init(1);
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <LED_Init>
	ExtINT_voidInit(INT);
    3c00:	80 e0       	ldi	r24, 0x00	; 0
    3c02:	0e 94 cf 0a 	call	0x159e	; 0x159e <ExtINT_voidInit>
	Global_Interrupt_Enable();
    3c06:	af e5       	ldi	r26, 0x5F	; 95
    3c08:	b0 e0       	ldi	r27, 0x00	; 0
    3c0a:	ef e5       	ldi	r30, 0x5F	; 95
    3c0c:	f0 e0       	ldi	r31, 0x00	; 0
    3c0e:	80 81       	ld	r24, Z
    3c10:	80 68       	ori	r24, 0x80	; 128
    3c12:	8c 93       	st	X, r24
	DIO_voidSetDir(PortD,Pin6,Output);
    3c14:	83 e0       	ldi	r24, 0x03	; 3
    3c16:	66 e0       	ldi	r22, 0x06	; 6
    3c18:	41 e0       	ldi	r20, 0x01	; 1
    3c1a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_voidSetDir>
	DIO_voidWriteVal(PortD,Pin6,Zero_Volt);
    3c1e:	83 e0       	ldi	r24, 0x03	; 3
    3c20:	66 e0       	ldi	r22, 0x06	; 6
    3c22:	40 e0       	ldi	r20, 0x00	; 0
    3c24:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
    3c28:	80 e0       	ldi	r24, 0x00	; 0
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	a8 ec       	ldi	r26, 0xC8	; 200
    3c2e:	b2 e4       	ldi	r27, 0x42	; 66
    3c30:	89 8f       	std	Y+25, r24	; 0x19
    3c32:	9a 8f       	std	Y+26, r25	; 0x1a
    3c34:	ab 8f       	std	Y+27, r26	; 0x1b
    3c36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c38:	69 8d       	ldd	r22, Y+25	; 0x19
    3c3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	4a e7       	ldi	r20, 0x7A	; 122
    3c46:	53 e4       	ldi	r21, 0x43	; 67
    3c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4c:	dc 01       	movw	r26, r24
    3c4e:	cb 01       	movw	r24, r22
    3c50:	8d 8b       	std	Y+21, r24	; 0x15
    3c52:	9e 8b       	std	Y+22, r25	; 0x16
    3c54:	af 8b       	std	Y+23, r26	; 0x17
    3c56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c58:	6d 89       	ldd	r22, Y+21	; 0x15
    3c5a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c5c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c5e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	40 e8       	ldi	r20, 0x80	; 128
    3c66:	5f e3       	ldi	r21, 0x3F	; 63
    3c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c6c:	88 23       	and	r24, r24
    3c6e:	2c f4       	brge	.+10     	; 0x3c7a <main+0x9e>
		__ticks = 1;
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	9c 8b       	std	Y+20, r25	; 0x14
    3c76:	8b 8b       	std	Y+19, r24	; 0x13
    3c78:	3f c0       	rjmp	.+126    	; 0x3cf8 <main+0x11c>
	else if (__tmp > 65535)
    3c7a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c7c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c80:	98 8d       	ldd	r25, Y+24	; 0x18
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	3f ef       	ldi	r19, 0xFF	; 255
    3c86:	4f e7       	ldi	r20, 0x7F	; 127
    3c88:	57 e4       	ldi	r21, 0x47	; 71
    3c8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c8e:	18 16       	cp	r1, r24
    3c90:	4c f5       	brge	.+82     	; 0x3ce4 <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c92:	69 8d       	ldd	r22, Y+25	; 0x19
    3c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	40 e2       	ldi	r20, 0x20	; 32
    3ca0:	51 e4       	ldi	r21, 0x41	; 65
    3ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	bc 01       	movw	r22, r24
    3cac:	cd 01       	movw	r24, r26
    3cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	9c 8b       	std	Y+20, r25	; 0x14
    3cb8:	8b 8b       	std	Y+19, r24	; 0x13
    3cba:	0f c0       	rjmp	.+30     	; 0x3cda <main+0xfe>
    3cbc:	89 e1       	ldi	r24, 0x19	; 25
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	9a 8b       	std	Y+18, r25	; 0x12
    3cc2:	89 8b       	std	Y+17, r24	; 0x11
    3cc4:	89 89       	ldd	r24, Y+17	; 0x11
    3cc6:	9a 89       	ldd	r25, Y+18	; 0x12
    3cc8:	01 97       	sbiw	r24, 0x01	; 1
    3cca:	f1 f7       	brne	.-4      	; 0x3cc8 <main+0xec>
    3ccc:	9a 8b       	std	Y+18, r25	; 0x12
    3cce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd4:	01 97       	sbiw	r24, 0x01	; 1
    3cd6:	9c 8b       	std	Y+20, r25	; 0x14
    3cd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cda:	8b 89       	ldd	r24, Y+19	; 0x13
    3cdc:	9c 89       	ldd	r25, Y+20	; 0x14
    3cde:	00 97       	sbiw	r24, 0x00	; 0
    3ce0:	69 f7       	brne	.-38     	; 0x3cbc <main+0xe0>
    3ce2:	14 c0       	rjmp	.+40     	; 0x3d0c <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ce6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    3cea:	98 8d       	ldd	r25, Y+24	; 0x18
    3cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	9c 8b       	std	Y+20, r25	; 0x14
    3cf6:	8b 8b       	std	Y+19, r24	; 0x13
    3cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    3cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    3cfc:	98 8b       	std	Y+16, r25	; 0x10
    3cfe:	8f 87       	std	Y+15, r24	; 0x0f
    3d00:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d02:	98 89       	ldd	r25, Y+16	; 0x10
    3d04:	01 97       	sbiw	r24, 0x01	; 1
    3d06:	f1 f7       	brne	.-4      	; 0x3d04 <main+0x128>
    3d08:	98 8b       	std	Y+16, r25	; 0x10
    3d0a:	8f 87       	std	Y+15, r24	; 0x0f

	while(1)
	{
		_delay_ms(100);
		DIO_voidWriteVal(PortD,Pin6,Five_Volt);
    3d0c:	83 e0       	ldi	r24, 0x03	; 3
    3d0e:	66 e0       	ldi	r22, 0x06	; 6
    3d10:	41 e0       	ldi	r20, 0x01	; 1
    3d12:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
    3d16:	80 e0       	ldi	r24, 0x00	; 0
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	a8 ec       	ldi	r26, 0xC8	; 200
    3d1c:	b2 e4       	ldi	r27, 0x42	; 66
    3d1e:	8b 87       	std	Y+11, r24	; 0x0b
    3d20:	9c 87       	std	Y+12, r25	; 0x0c
    3d22:	ad 87       	std	Y+13, r26	; 0x0d
    3d24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	4a e7       	ldi	r20, 0x7A	; 122
    3d34:	53 e4       	ldi	r21, 0x43	; 67
    3d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	8f 83       	std	Y+7, r24	; 0x07
    3d40:	98 87       	std	Y+8, r25	; 0x08
    3d42:	a9 87       	std	Y+9, r26	; 0x09
    3d44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d46:	6f 81       	ldd	r22, Y+7	; 0x07
    3d48:	78 85       	ldd	r23, Y+8	; 0x08
    3d4a:	89 85       	ldd	r24, Y+9	; 0x09
    3d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d4e:	20 e0       	ldi	r18, 0x00	; 0
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	40 e8       	ldi	r20, 0x80	; 128
    3d54:	5f e3       	ldi	r21, 0x3F	; 63
    3d56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d5a:	88 23       	and	r24, r24
    3d5c:	2c f4       	brge	.+10     	; 0x3d68 <main+0x18c>
		__ticks = 1;
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	9e 83       	std	Y+6, r25	; 0x06
    3d64:	8d 83       	std	Y+5, r24	; 0x05
    3d66:	3f c0       	rjmp	.+126    	; 0x3de6 <main+0x20a>
	else if (__tmp > 65535)
    3d68:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6a:	78 85       	ldd	r23, Y+8	; 0x08
    3d6c:	89 85       	ldd	r24, Y+9	; 0x09
    3d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d70:	20 e0       	ldi	r18, 0x00	; 0
    3d72:	3f ef       	ldi	r19, 0xFF	; 255
    3d74:	4f e7       	ldi	r20, 0x7F	; 127
    3d76:	57 e4       	ldi	r21, 0x47	; 71
    3d78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d7c:	18 16       	cp	r1, r24
    3d7e:	4c f5       	brge	.+82     	; 0x3dd2 <main+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	40 e2       	ldi	r20, 0x20	; 32
    3d8e:	51 e4       	ldi	r21, 0x41	; 65
    3d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	bc 01       	movw	r22, r24
    3d9a:	cd 01       	movw	r24, r26
    3d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	9e 83       	std	Y+6, r25	; 0x06
    3da6:	8d 83       	std	Y+5, r24	; 0x05
    3da8:	0f c0       	rjmp	.+30     	; 0x3dc8 <main+0x1ec>
    3daa:	89 e1       	ldi	r24, 0x19	; 25
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	9c 83       	std	Y+4, r25	; 0x04
    3db0:	8b 83       	std	Y+3, r24	; 0x03
    3db2:	8b 81       	ldd	r24, Y+3	; 0x03
    3db4:	9c 81       	ldd	r25, Y+4	; 0x04
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	f1 f7       	brne	.-4      	; 0x3db6 <main+0x1da>
    3dba:	9c 83       	std	Y+4, r25	; 0x04
    3dbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc2:	01 97       	sbiw	r24, 0x01	; 1
    3dc4:	9e 83       	std	Y+6, r25	; 0x06
    3dc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dca:	9e 81       	ldd	r25, Y+6	; 0x06
    3dcc:	00 97       	sbiw	r24, 0x00	; 0
    3dce:	69 f7       	brne	.-38     	; 0x3daa <main+0x1ce>
    3dd0:	14 c0       	rjmp	.+40     	; 0x3dfa <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd4:	78 85       	ldd	r23, Y+8	; 0x08
    3dd6:	89 85       	ldd	r24, Y+9	; 0x09
    3dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dde:	dc 01       	movw	r26, r24
    3de0:	cb 01       	movw	r24, r22
    3de2:	9e 83       	std	Y+6, r25	; 0x06
    3de4:	8d 83       	std	Y+5, r24	; 0x05
    3de6:	8d 81       	ldd	r24, Y+5	; 0x05
    3de8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dea:	9a 83       	std	Y+2, r25	; 0x02
    3dec:	89 83       	std	Y+1, r24	; 0x01
    3dee:	89 81       	ldd	r24, Y+1	; 0x01
    3df0:	9a 81       	ldd	r25, Y+2	; 0x02
    3df2:	01 97       	sbiw	r24, 0x01	; 1
    3df4:	f1 f7       	brne	.-4      	; 0x3df2 <main+0x216>
    3df6:	9a 83       	std	Y+2, r25	; 0x02
    3df8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		DIO_voidWriteVal(PortD,Pin6,Zero_Volt);
    3dfa:	83 e0       	ldi	r24, 0x03	; 3
    3dfc:	66 e0       	ldi	r22, 0x06	; 6
    3dfe:	40 e0       	ldi	r20, 0x00	; 0
    3e00:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_voidWriteVal>
    3e04:	11 cf       	rjmp	.-478    	; 0x3c28 <main+0x4c>

00003e06 <__mulsi3>:
    3e06:	62 9f       	mul	r22, r18
    3e08:	d0 01       	movw	r26, r0
    3e0a:	73 9f       	mul	r23, r19
    3e0c:	f0 01       	movw	r30, r0
    3e0e:	82 9f       	mul	r24, r18
    3e10:	e0 0d       	add	r30, r0
    3e12:	f1 1d       	adc	r31, r1
    3e14:	64 9f       	mul	r22, r20
    3e16:	e0 0d       	add	r30, r0
    3e18:	f1 1d       	adc	r31, r1
    3e1a:	92 9f       	mul	r25, r18
    3e1c:	f0 0d       	add	r31, r0
    3e1e:	83 9f       	mul	r24, r19
    3e20:	f0 0d       	add	r31, r0
    3e22:	74 9f       	mul	r23, r20
    3e24:	f0 0d       	add	r31, r0
    3e26:	65 9f       	mul	r22, r21
    3e28:	f0 0d       	add	r31, r0
    3e2a:	99 27       	eor	r25, r25
    3e2c:	72 9f       	mul	r23, r18
    3e2e:	b0 0d       	add	r27, r0
    3e30:	e1 1d       	adc	r30, r1
    3e32:	f9 1f       	adc	r31, r25
    3e34:	63 9f       	mul	r22, r19
    3e36:	b0 0d       	add	r27, r0
    3e38:	e1 1d       	adc	r30, r1
    3e3a:	f9 1f       	adc	r31, r25
    3e3c:	bd 01       	movw	r22, r26
    3e3e:	cf 01       	movw	r24, r30
    3e40:	11 24       	eor	r1, r1
    3e42:	08 95       	ret

00003e44 <__udivmodsi4>:
    3e44:	a1 e2       	ldi	r26, 0x21	; 33
    3e46:	1a 2e       	mov	r1, r26
    3e48:	aa 1b       	sub	r26, r26
    3e4a:	bb 1b       	sub	r27, r27
    3e4c:	fd 01       	movw	r30, r26
    3e4e:	0d c0       	rjmp	.+26     	; 0x3e6a <__udivmodsi4_ep>

00003e50 <__udivmodsi4_loop>:
    3e50:	aa 1f       	adc	r26, r26
    3e52:	bb 1f       	adc	r27, r27
    3e54:	ee 1f       	adc	r30, r30
    3e56:	ff 1f       	adc	r31, r31
    3e58:	a2 17       	cp	r26, r18
    3e5a:	b3 07       	cpc	r27, r19
    3e5c:	e4 07       	cpc	r30, r20
    3e5e:	f5 07       	cpc	r31, r21
    3e60:	20 f0       	brcs	.+8      	; 0x3e6a <__udivmodsi4_ep>
    3e62:	a2 1b       	sub	r26, r18
    3e64:	b3 0b       	sbc	r27, r19
    3e66:	e4 0b       	sbc	r30, r20
    3e68:	f5 0b       	sbc	r31, r21

00003e6a <__udivmodsi4_ep>:
    3e6a:	66 1f       	adc	r22, r22
    3e6c:	77 1f       	adc	r23, r23
    3e6e:	88 1f       	adc	r24, r24
    3e70:	99 1f       	adc	r25, r25
    3e72:	1a 94       	dec	r1
    3e74:	69 f7       	brne	.-38     	; 0x3e50 <__udivmodsi4_loop>
    3e76:	60 95       	com	r22
    3e78:	70 95       	com	r23
    3e7a:	80 95       	com	r24
    3e7c:	90 95       	com	r25
    3e7e:	9b 01       	movw	r18, r22
    3e80:	ac 01       	movw	r20, r24
    3e82:	bd 01       	movw	r22, r26
    3e84:	cf 01       	movw	r24, r30
    3e86:	08 95       	ret

00003e88 <__prologue_saves__>:
    3e88:	2f 92       	push	r2
    3e8a:	3f 92       	push	r3
    3e8c:	4f 92       	push	r4
    3e8e:	5f 92       	push	r5
    3e90:	6f 92       	push	r6
    3e92:	7f 92       	push	r7
    3e94:	8f 92       	push	r8
    3e96:	9f 92       	push	r9
    3e98:	af 92       	push	r10
    3e9a:	bf 92       	push	r11
    3e9c:	cf 92       	push	r12
    3e9e:	df 92       	push	r13
    3ea0:	ef 92       	push	r14
    3ea2:	ff 92       	push	r15
    3ea4:	0f 93       	push	r16
    3ea6:	1f 93       	push	r17
    3ea8:	cf 93       	push	r28
    3eaa:	df 93       	push	r29
    3eac:	cd b7       	in	r28, 0x3d	; 61
    3eae:	de b7       	in	r29, 0x3e	; 62
    3eb0:	ca 1b       	sub	r28, r26
    3eb2:	db 0b       	sbc	r29, r27
    3eb4:	0f b6       	in	r0, 0x3f	; 63
    3eb6:	f8 94       	cli
    3eb8:	de bf       	out	0x3e, r29	; 62
    3eba:	0f be       	out	0x3f, r0	; 63
    3ebc:	cd bf       	out	0x3d, r28	; 61
    3ebe:	09 94       	ijmp

00003ec0 <__epilogue_restores__>:
    3ec0:	2a 88       	ldd	r2, Y+18	; 0x12
    3ec2:	39 88       	ldd	r3, Y+17	; 0x11
    3ec4:	48 88       	ldd	r4, Y+16	; 0x10
    3ec6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ec8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3eca:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ecc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ece:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ed0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ed2:	b9 84       	ldd	r11, Y+9	; 0x09
    3ed4:	c8 84       	ldd	r12, Y+8	; 0x08
    3ed6:	df 80       	ldd	r13, Y+7	; 0x07
    3ed8:	ee 80       	ldd	r14, Y+6	; 0x06
    3eda:	fd 80       	ldd	r15, Y+5	; 0x05
    3edc:	0c 81       	ldd	r16, Y+4	; 0x04
    3ede:	1b 81       	ldd	r17, Y+3	; 0x03
    3ee0:	aa 81       	ldd	r26, Y+2	; 0x02
    3ee2:	b9 81       	ldd	r27, Y+1	; 0x01
    3ee4:	ce 0f       	add	r28, r30
    3ee6:	d1 1d       	adc	r29, r1
    3ee8:	0f b6       	in	r0, 0x3f	; 63
    3eea:	f8 94       	cli
    3eec:	de bf       	out	0x3e, r29	; 62
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	cd bf       	out	0x3d, r28	; 61
    3ef2:	ed 01       	movw	r28, r26
    3ef4:	08 95       	ret

00003ef6 <_exit>:
    3ef6:	f8 94       	cli

00003ef8 <__stop_program>:
    3ef8:	ff cf       	rjmp	.-2      	; 0x3ef8 <__stop_program>
