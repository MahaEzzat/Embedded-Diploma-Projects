
I2C_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003122  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00003122  000031b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800070  00800070  000031c6  2**0
                  ALLOC
  3 .stab         00002ba4  00000000  00000000  000031c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bde  00000000  00000000  00005d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000694a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008843  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000972e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b097  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 18 	call	0x3088	; 0x3088 <main>
      8a:	0c 94 8f 18 	jmp	0x311e	; 0x311e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_Init>:
#include "DIO.h"
#include "avr/delay.h"
#include "Utils.h"

void Buzzer_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDir(PortD,Pin7,Output); /* Set pin 7D as an output pin (buzzer)*/
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_voidSetDir>
	DIO_voidWriteVal(PortD,Pin7,Zero_Volt); /* Set pin 7D to 0V */
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_voidWriteVal>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer>:
void Buzzer(u8 u8State)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	0f 92       	push	r0
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidWriteVal(PortD,Pin7,u8State);
     b74:	83 e0       	ldi	r24, 0x03	; 3
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	49 81       	ldd	r20, Y+1	; 0x01
     b7a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_voidWriteVal>
}
     b7e:	0f 90       	pop	r0
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <Buzzer_Toggle>:

void Buzzer_Toggle()
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
	Toggle_Bit(PORTD,Pin7);
     b8e:	a2 e3       	ldi	r26, 0x32	; 50
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e2 e3       	ldi	r30, 0x32	; 50
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	90 81       	ld	r25, Z
     b98:	80 e8       	ldi	r24, 0x80	; 128
     b9a:	89 27       	eor	r24, r25
     b9c:	8c 93       	st	X, r24
}
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <Buzzer_Mode>:
void Buzzer_Mode(u8 u8Freq1, u8 u8Freq2)
{
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	c8 55       	subi	r28, 0x58	; 88
     bb2:	d0 40       	sbci	r29, 0x00	; 0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	fe 01       	movw	r30, r28
     bc0:	e9 5a       	subi	r30, 0xA9	; 169
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	80 83       	st	Z, r24
     bc6:	fe 01       	movw	r30, r28
     bc8:	e8 5a       	subi	r30, 0xA8	; 168
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	60 83       	st	Z, r22
		int count;
		for(count=0; count<u8Freq1; count++)
     bce:	fe 01       	movw	r30, r28
     bd0:	eb 5a       	subi	r30, 0xAB	; 171
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	11 82       	std	Z+1, r1	; 0x01
     bd6:	10 82       	st	Z, r1
     bd8:	4a c1       	rjmp	.+660    	; 0xe6e <Buzzer_Mode+0x2ca>
		{
			Buzzer(ON);
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer>
     be0:	fe 01       	movw	r30, r28
     be2:	ef 5a       	subi	r30, 0xAF	; 175
     be4:	ff 4f       	sbci	r31, 0xFF	; 255
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e8       	ldi	r26, 0x80	; 128
     bec:	bf e3       	ldi	r27, 0x3F	; 63
     bee:	80 83       	st	Z, r24
     bf0:	91 83       	std	Z+1, r25	; 0x01
     bf2:	a2 83       	std	Z+2, r26	; 0x02
     bf4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bf6:	8e 01       	movw	r16, r28
     bf8:	03 5b       	subi	r16, 0xB3	; 179
     bfa:	1f 4f       	sbci	r17, 0xFF	; 255
     bfc:	fe 01       	movw	r30, r28
     bfe:	ef 5a       	subi	r30, 0xAF	; 175
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	60 81       	ld	r22, Z
     c04:	71 81       	ldd	r23, Z+1	; 0x01
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	93 81       	ldd	r25, Z+3	; 0x03
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	4a e7       	ldi	r20, 0x7A	; 122
     c10:	53 e4       	ldi	r21, 0x43	; 67
     c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	f8 01       	movw	r30, r16
     c1c:	80 83       	st	Z, r24
     c1e:	91 83       	std	Z+1, r25	; 0x01
     c20:	a2 83       	std	Z+2, r26	; 0x02
     c22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c24:	fe 01       	movw	r30, r28
     c26:	e3 5b       	subi	r30, 0xB3	; 179
     c28:	ff 4f       	sbci	r31, 0xFF	; 255
     c2a:	60 81       	ld	r22, Z
     c2c:	71 81       	ldd	r23, Z+1	; 0x01
     c2e:	82 81       	ldd	r24, Z+2	; 0x02
     c30:	93 81       	ldd	r25, Z+3	; 0x03
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e8       	ldi	r20, 0x80	; 128
     c38:	5f e3       	ldi	r21, 0x3F	; 63
     c3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c3e:	88 23       	and	r24, r24
     c40:	44 f4       	brge	.+16     	; 0xc52 <Buzzer_Mode+0xae>
		__ticks = 1;
     c42:	fe 01       	movw	r30, r28
     c44:	e5 5b       	subi	r30, 0xB5	; 181
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	91 83       	std	Z+1, r25	; 0x01
     c4e:	80 83       	st	Z, r24
     c50:	64 c0       	rjmp	.+200    	; 0xd1a <Buzzer_Mode+0x176>
	else if (__tmp > 65535)
     c52:	fe 01       	movw	r30, r28
     c54:	e3 5b       	subi	r30, 0xB3	; 179
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	60 81       	ld	r22, Z
     c5a:	71 81       	ldd	r23, Z+1	; 0x01
     c5c:	82 81       	ldd	r24, Z+2	; 0x02
     c5e:	93 81       	ldd	r25, Z+3	; 0x03
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	3f ef       	ldi	r19, 0xFF	; 255
     c64:	4f e7       	ldi	r20, 0x7F	; 127
     c66:	57 e4       	ldi	r21, 0x47	; 71
     c68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c6c:	18 16       	cp	r1, r24
     c6e:	0c f0       	brlt	.+2      	; 0xc72 <Buzzer_Mode+0xce>
     c70:	43 c0       	rjmp	.+134    	; 0xcf8 <Buzzer_Mode+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c72:	fe 01       	movw	r30, r28
     c74:	ef 5a       	subi	r30, 0xAF	; 175
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	60 81       	ld	r22, Z
     c7a:	71 81       	ldd	r23, Z+1	; 0x01
     c7c:	82 81       	ldd	r24, Z+2	; 0x02
     c7e:	93 81       	ldd	r25, Z+3	; 0x03
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e2       	ldi	r20, 0x20	; 32
     c86:	51 e4       	ldi	r21, 0x41	; 65
     c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	8e 01       	movw	r16, r28
     c92:	05 5b       	subi	r16, 0xB5	; 181
     c94:	1f 4f       	sbci	r17, 0xFF	; 255
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	f8 01       	movw	r30, r16
     ca4:	91 83       	std	Z+1, r25	; 0x01
     ca6:	80 83       	st	Z, r24
     ca8:	1f c0       	rjmp	.+62     	; 0xce8 <Buzzer_Mode+0x144>
     caa:	fe 01       	movw	r30, r28
     cac:	e7 5b       	subi	r30, 0xB7	; 183
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	89 e1       	ldi	r24, 0x19	; 25
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	91 83       	std	Z+1, r25	; 0x01
     cb6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb8:	fe 01       	movw	r30, r28
     cba:	e7 5b       	subi	r30, 0xB7	; 183
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <Buzzer_Mode+0x11e>
     cc6:	fe 01       	movw	r30, r28
     cc8:	e7 5b       	subi	r30, 0xB7	; 183
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd0:	de 01       	movw	r26, r28
     cd2:	a5 5b       	subi	r26, 0xB5	; 181
     cd4:	bf 4f       	sbci	r27, 0xFF	; 255
     cd6:	fe 01       	movw	r30, r28
     cd8:	e5 5b       	subi	r30, 0xB5	; 181
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	80 81       	ld	r24, Z
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	11 96       	adiw	r26, 0x01	; 1
     ce4:	9c 93       	st	X, r25
     ce6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ce8:	fe 01       	movw	r30, r28
     cea:	e5 5b       	subi	r30, 0xB5	; 181
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	80 81       	ld	r24, Z
     cf0:	91 81       	ldd	r25, Z+1	; 0x01
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	d1 f6       	brne	.-76     	; 0xcaa <Buzzer_Mode+0x106>
     cf6:	27 c0       	rjmp	.+78     	; 0xd46 <Buzzer_Mode+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf8:	8e 01       	movw	r16, r28
     cfa:	05 5b       	subi	r16, 0xB5	; 181
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	fe 01       	movw	r30, r28
     d00:	e3 5b       	subi	r30, 0xB3	; 179
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	93 81       	ldd	r25, Z+3	; 0x03
     d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	f8 01       	movw	r30, r16
     d16:	91 83       	std	Z+1, r25	; 0x01
     d18:	80 83       	st	Z, r24
     d1a:	de 01       	movw	r26, r28
     d1c:	a9 5b       	subi	r26, 0xB9	; 185
     d1e:	bf 4f       	sbci	r27, 0xFF	; 255
     d20:	fe 01       	movw	r30, r28
     d22:	e5 5b       	subi	r30, 0xB5	; 181
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	80 81       	ld	r24, Z
     d28:	91 81       	ldd	r25, Z+1	; 0x01
     d2a:	8d 93       	st	X+, r24
     d2c:	9c 93       	st	X, r25
     d2e:	fe 01       	movw	r30, r28
     d30:	e9 5b       	subi	r30, 0xB9	; 185
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <Buzzer_Mode+0x194>
     d3c:	fe 01       	movw	r30, r28
     d3e:	e9 5b       	subi	r30, 0xB9	; 185
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	91 83       	std	Z+1, r25	; 0x01
     d44:	80 83       	st	Z, r24
			_delay_ms(1);
			Buzzer(OFF);
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer>
     d4c:	fe 01       	movw	r30, r28
     d4e:	ed 5b       	subi	r30, 0xBD	; 189
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a0 e2       	ldi	r26, 0x20	; 32
     d58:	b1 e4       	ldi	r27, 0x41	; 65
     d5a:	80 83       	st	Z, r24
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	a2 83       	std	Z+2, r26	; 0x02
     d60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d62:	8e 01       	movw	r16, r28
     d64:	01 5c       	subi	r16, 0xC1	; 193
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	fe 01       	movw	r30, r28
     d6a:	ed 5b       	subi	r30, 0xBD	; 189
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	93 81       	ldd	r25, Z+3	; 0x03
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	4a e7       	ldi	r20, 0x7A	; 122
     d7c:	53 e4       	ldi	r21, 0x43	; 67
     d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	f8 01       	movw	r30, r16
     d88:	80 83       	st	Z, r24
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	a2 83       	std	Z+2, r26	; 0x02
     d8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d90:	fe 01       	movw	r30, r28
     d92:	ff 96       	adiw	r30, 0x3f	; 63
     d94:	60 81       	ld	r22, Z
     d96:	71 81       	ldd	r23, Z+1	; 0x01
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e8       	ldi	r20, 0x80	; 128
     da2:	5f e3       	ldi	r21, 0x3F	; 63
     da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da8:	88 23       	and	r24, r24
     daa:	2c f4       	brge	.+10     	; 0xdb6 <Buzzer_Mode+0x212>
		__ticks = 1;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9e af       	std	Y+62, r25	; 0x3e
     db2:	8d af       	std	Y+61, r24	; 0x3d
     db4:	46 c0       	rjmp	.+140    	; 0xe42 <Buzzer_Mode+0x29e>
	else if (__tmp > 65535)
     db6:	fe 01       	movw	r30, r28
     db8:	ff 96       	adiw	r30, 0x3f	; 63
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	3f ef       	ldi	r19, 0xFF	; 255
     dc6:	4f e7       	ldi	r20, 0x7F	; 127
     dc8:	57 e4       	ldi	r21, 0x47	; 71
     dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dce:	18 16       	cp	r1, r24
     dd0:	64 f5       	brge	.+88     	; 0xe2a <Buzzer_Mode+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd2:	fe 01       	movw	r30, r28
     dd4:	ed 5b       	subi	r30, 0xBD	; 189
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e2       	ldi	r20, 0x20	; 32
     de6:	51 e4       	ldi	r21, 0x41	; 65
     de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	bc 01       	movw	r22, r24
     df2:	cd 01       	movw	r24, r26
     df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	9e af       	std	Y+62, r25	; 0x3e
     dfe:	8d af       	std	Y+61, r24	; 0x3d
     e00:	0f c0       	rjmp	.+30     	; 0xe20 <Buzzer_Mode+0x27c>
     e02:	89 e1       	ldi	r24, 0x19	; 25
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	9c af       	std	Y+60, r25	; 0x3c
     e08:	8b af       	std	Y+59, r24	; 0x3b
     e0a:	8b ad       	ldd	r24, Y+59	; 0x3b
     e0c:	9c ad       	ldd	r25, Y+60	; 0x3c
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	f1 f7       	brne	.-4      	; 0xe0e <Buzzer_Mode+0x26a>
     e12:	9c af       	std	Y+60, r25	; 0x3c
     e14:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e16:	8d ad       	ldd	r24, Y+61	; 0x3d
     e18:	9e ad       	ldd	r25, Y+62	; 0x3e
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	9e af       	std	Y+62, r25	; 0x3e
     e1e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e20:	8d ad       	ldd	r24, Y+61	; 0x3d
     e22:	9e ad       	ldd	r25, Y+62	; 0x3e
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	69 f7       	brne	.-38     	; 0xe02 <Buzzer_Mode+0x25e>
     e28:	16 c0       	rjmp	.+44     	; 0xe56 <Buzzer_Mode+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2a:	fe 01       	movw	r30, r28
     e2c:	ff 96       	adiw	r30, 0x3f	; 63
     e2e:	60 81       	ld	r22, Z
     e30:	71 81       	ldd	r23, Z+1	; 0x01
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	9e af       	std	Y+62, r25	; 0x3e
     e40:	8d af       	std	Y+61, r24	; 0x3d
     e42:	8d ad       	ldd	r24, Y+61	; 0x3d
     e44:	9e ad       	ldd	r25, Y+62	; 0x3e
     e46:	9a af       	std	Y+58, r25	; 0x3a
     e48:	89 af       	std	Y+57, r24	; 0x39
     e4a:	89 ad       	ldd	r24, Y+57	; 0x39
     e4c:	9a ad       	ldd	r25, Y+58	; 0x3a
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <Buzzer_Mode+0x2aa>
     e52:	9a af       	std	Y+58, r25	; 0x3a
     e54:	89 af       	std	Y+57, r24	; 0x39
	Toggle_Bit(PORTD,Pin7);
}
void Buzzer_Mode(u8 u8Freq1, u8 u8Freq2)
{
		int count;
		for(count=0; count<u8Freq1; count++)
     e56:	de 01       	movw	r26, r28
     e58:	ab 5a       	subi	r26, 0xAB	; 171
     e5a:	bf 4f       	sbci	r27, 0xFF	; 255
     e5c:	fe 01       	movw	r30, r28
     e5e:	eb 5a       	subi	r30, 0xAB	; 171
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	11 96       	adiw	r26, 0x01	; 1
     e6a:	9c 93       	st	X, r25
     e6c:	8e 93       	st	-X, r24
     e6e:	fe 01       	movw	r30, r28
     e70:	e9 5a       	subi	r30, 0xA9	; 169
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	80 81       	ld	r24, Z
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	fe 01       	movw	r30, r28
     e7c:	eb 5a       	subi	r30, 0xAB	; 171
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	82 17       	cp	r24, r18
     e86:	93 07       	cpc	r25, r19
     e88:	0c f4       	brge	.+2      	; 0xe8c <Buzzer_Mode+0x2e8>
     e8a:	a7 ce       	rjmp	.-690    	; 0xbda <Buzzer_Mode+0x36>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	aa e7       	ldi	r26, 0x7A	; 122
     e92:	b4 e4       	ldi	r27, 0x44	; 68
     e94:	8d ab       	std	Y+53, r24	; 0x35
     e96:	9e ab       	std	Y+54, r25	; 0x36
     e98:	af ab       	std	Y+55, r26	; 0x37
     e9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	6d a9       	ldd	r22, Y+53	; 0x35
     e9e:	7e a9       	ldd	r23, Y+54	; 0x36
     ea0:	8f a9       	ldd	r24, Y+55	; 0x37
     ea2:	98 ad       	ldd	r25, Y+56	; 0x38
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a e7       	ldi	r20, 0x7A	; 122
     eaa:	53 e4       	ldi	r21, 0x43	; 67
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	89 ab       	std	Y+49, r24	; 0x31
     eb6:	9a ab       	std	Y+50, r25	; 0x32
     eb8:	ab ab       	std	Y+51, r26	; 0x33
     eba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ebc:	69 a9       	ldd	r22, Y+49	; 0x31
     ebe:	7a a9       	ldd	r23, Y+50	; 0x32
     ec0:	8b a9       	ldd	r24, Y+51	; 0x33
     ec2:	9c a9       	ldd	r25, Y+52	; 0x34
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <Buzzer_Mode+0x33a>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	98 ab       	std	Y+48, r25	; 0x30
     eda:	8f a7       	std	Y+47, r24	; 0x2f
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <Buzzer_Mode+0x3b8>
	else if (__tmp > 65535)
     ede:	69 a9       	ldd	r22, Y+49	; 0x31
     ee0:	7a a9       	ldd	r23, Y+50	; 0x32
     ee2:	8b a9       	ldd	r24, Y+51	; 0x33
     ee4:	9c a9       	ldd	r25, Y+52	; 0x34
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <Buzzer_Mode+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	6d a9       	ldd	r22, Y+53	; 0x35
     ef8:	7e a9       	ldd	r23, Y+54	; 0x36
     efa:	8f a9       	ldd	r24, Y+55	; 0x37
     efc:	98 ad       	ldd	r25, Y+56	; 0x38
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	98 ab       	std	Y+48, r25	; 0x30
     f1c:	8f a7       	std	Y+47, r24	; 0x2f
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <Buzzer_Mode+0x39a>
     f20:	89 e1       	ldi	r24, 0x19	; 25
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9e a7       	std	Y+46, r25	; 0x2e
     f26:	8d a7       	std	Y+45, r24	; 0x2d
     f28:	8d a5       	ldd	r24, Y+45	; 0x2d
     f2a:	9e a5       	ldd	r25, Y+46	; 0x2e
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <Buzzer_Mode+0x388>
     f30:	9e a7       	std	Y+46, r25	; 0x2e
     f32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	8f a5       	ldd	r24, Y+47	; 0x2f
     f36:	98 a9       	ldd	r25, Y+48	; 0x30
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	98 ab       	std	Y+48, r25	; 0x30
     f3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f40:	98 a9       	ldd	r25, Y+48	; 0x30
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f7       	brne	.-38     	; 0xf20 <Buzzer_Mode+0x37c>
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <Buzzer_Mode+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	69 a9       	ldd	r22, Y+49	; 0x31
     f4a:	7a a9       	ldd	r23, Y+50	; 0x32
     f4c:	8b a9       	ldd	r24, Y+51	; 0x33
     f4e:	9c a9       	ldd	r25, Y+52	; 0x34
     f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	98 ab       	std	Y+48, r25	; 0x30
     f5a:	8f a7       	std	Y+47, r24	; 0x2f
     f5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f5e:	98 a9       	ldd	r25, Y+48	; 0x30
     f60:	9c a7       	std	Y+44, r25	; 0x2c
     f62:	8b a7       	std	Y+43, r24	; 0x2b
     f64:	8b a5       	ldd	r24, Y+43	; 0x2b
     f66:	9c a5       	ldd	r25, Y+44	; 0x2c
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <Buzzer_Mode+0x3c4>
     f6c:	9c a7       	std	Y+44, r25	; 0x2c
     f6e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			Buzzer(OFF);
			_delay_ms(10);
		}
		_delay_ms(1000);
		for(count=0; count<u8Freq2; count++)
     f70:	fe 01       	movw	r30, r28
     f72:	eb 5a       	subi	r30, 0xAB	; 171
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	11 82       	std	Z+1, r1	; 0x01
     f78:	10 82       	st	Z, r1
     f7a:	f6 c0       	rjmp	.+492    	; 0x1168 <Buzzer_Mode+0x5c4>
		{
			Buzzer(ON);
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	a0 e2       	ldi	r26, 0x20	; 32
     f88:	b1 e4       	ldi	r27, 0x41	; 65
     f8a:	8f a3       	std	Y+39, r24	; 0x27
     f8c:	98 a7       	std	Y+40, r25	; 0x28
     f8e:	a9 a7       	std	Y+41, r26	; 0x29
     f90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f92:	6f a1       	ldd	r22, Y+39	; 0x27
     f94:	78 a5       	ldd	r23, Y+40	; 0x28
     f96:	89 a5       	ldd	r24, Y+41	; 0x29
     f98:	9a a5       	ldd	r25, Y+42	; 0x2a
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	4a e7       	ldi	r20, 0x7A	; 122
     fa0:	53 e4       	ldi	r21, 0x43	; 67
     fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	8b a3       	std	Y+35, r24	; 0x23
     fac:	9c a3       	std	Y+36, r25	; 0x24
     fae:	ad a3       	std	Y+37, r26	; 0x25
     fb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fb2:	6b a1       	ldd	r22, Y+35	; 0x23
     fb4:	7c a1       	ldd	r23, Y+36	; 0x24
     fb6:	8d a1       	ldd	r24, Y+37	; 0x25
     fb8:	9e a1       	ldd	r25, Y+38	; 0x26
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e8       	ldi	r20, 0x80	; 128
     fc0:	5f e3       	ldi	r21, 0x3F	; 63
     fc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc6:	88 23       	and	r24, r24
     fc8:	2c f4       	brge	.+10     	; 0xfd4 <Buzzer_Mode+0x430>
		__ticks = 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9a a3       	std	Y+34, r25	; 0x22
     fd0:	89 a3       	std	Y+33, r24	; 0x21
     fd2:	3f c0       	rjmp	.+126    	; 0x1052 <Buzzer_Mode+0x4ae>
	else if (__tmp > 65535)
     fd4:	6b a1       	ldd	r22, Y+35	; 0x23
     fd6:	7c a1       	ldd	r23, Y+36	; 0x24
     fd8:	8d a1       	ldd	r24, Y+37	; 0x25
     fda:	9e a1       	ldd	r25, Y+38	; 0x26
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	3f ef       	ldi	r19, 0xFF	; 255
     fe0:	4f e7       	ldi	r20, 0x7F	; 127
     fe2:	57 e4       	ldi	r21, 0x47	; 71
     fe4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe8:	18 16       	cp	r1, r24
     fea:	4c f5       	brge	.+82     	; 0x103e <Buzzer_Mode+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fec:	6f a1       	ldd	r22, Y+39	; 0x27
     fee:	78 a5       	ldd	r23, Y+40	; 0x28
     ff0:	89 a5       	ldd	r24, Y+41	; 0x29
     ff2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e2       	ldi	r20, 0x20	; 32
     ffa:	51 e4       	ldi	r21, 0x41	; 65
     ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	bc 01       	movw	r22, r24
    1006:	cd 01       	movw	r24, r26
    1008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	9a a3       	std	Y+34, r25	; 0x22
    1012:	89 a3       	std	Y+33, r24	; 0x21
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <Buzzer_Mode+0x490>
    1016:	89 e1       	ldi	r24, 0x19	; 25
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	98 a3       	std	Y+32, r25	; 0x20
    101c:	8f 8f       	std	Y+31, r24	; 0x1f
    101e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1020:	98 a1       	ldd	r25, Y+32	; 0x20
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <Buzzer_Mode+0x47e>
    1026:	98 a3       	std	Y+32, r25	; 0x20
    1028:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102a:	89 a1       	ldd	r24, Y+33	; 0x21
    102c:	9a a1       	ldd	r25, Y+34	; 0x22
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	9a a3       	std	Y+34, r25	; 0x22
    1032:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1034:	89 a1       	ldd	r24, Y+33	; 0x21
    1036:	9a a1       	ldd	r25, Y+34	; 0x22
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	69 f7       	brne	.-38     	; 0x1016 <Buzzer_Mode+0x472>
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <Buzzer_Mode+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103e:	6b a1       	ldd	r22, Y+35	; 0x23
    1040:	7c a1       	ldd	r23, Y+36	; 0x24
    1042:	8d a1       	ldd	r24, Y+37	; 0x25
    1044:	9e a1       	ldd	r25, Y+38	; 0x26
    1046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9a a3       	std	Y+34, r25	; 0x22
    1050:	89 a3       	std	Y+33, r24	; 0x21
    1052:	89 a1       	ldd	r24, Y+33	; 0x21
    1054:	9a a1       	ldd	r25, Y+34	; 0x22
    1056:	9e 8f       	std	Y+30, r25	; 0x1e
    1058:	8d 8f       	std	Y+29, r24	; 0x1d
    105a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    105c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <Buzzer_Mode+0x4ba>
    1062:	9e 8f       	std	Y+30, r25	; 0x1e
    1064:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			Buzzer(OFF);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	a0 e8       	ldi	r26, 0x80	; 128
    1072:	bf e3       	ldi	r27, 0x3F	; 63
    1074:	89 8f       	std	Y+25, r24	; 0x19
    1076:	9a 8f       	std	Y+26, r25	; 0x1a
    1078:	ab 8f       	std	Y+27, r26	; 0x1b
    107a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107c:	69 8d       	ldd	r22, Y+25	; 0x19
    107e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	4a e7       	ldi	r20, 0x7A	; 122
    108a:	53 e4       	ldi	r21, 0x43	; 67
    108c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	8d 8b       	std	Y+21, r24	; 0x15
    1096:	9e 8b       	std	Y+22, r25	; 0x16
    1098:	af 8b       	std	Y+23, r26	; 0x17
    109a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    109c:	6d 89       	ldd	r22, Y+21	; 0x15
    109e:	7e 89       	ldd	r23, Y+22	; 0x16
    10a0:	8f 89       	ldd	r24, Y+23	; 0x17
    10a2:	98 8d       	ldd	r25, Y+24	; 0x18
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e8       	ldi	r20, 0x80	; 128
    10aa:	5f e3       	ldi	r21, 0x3F	; 63
    10ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10b0:	88 23       	and	r24, r24
    10b2:	2c f4       	brge	.+10     	; 0x10be <Buzzer_Mode+0x51a>
		__ticks = 1;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9c 8b       	std	Y+20, r25	; 0x14
    10ba:	8b 8b       	std	Y+19, r24	; 0x13
    10bc:	3f c0       	rjmp	.+126    	; 0x113c <Buzzer_Mode+0x598>
	else if (__tmp > 65535)
    10be:	6d 89       	ldd	r22, Y+21	; 0x15
    10c0:	7e 89       	ldd	r23, Y+22	; 0x16
    10c2:	8f 89       	ldd	r24, Y+23	; 0x17
    10c4:	98 8d       	ldd	r25, Y+24	; 0x18
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	3f ef       	ldi	r19, 0xFF	; 255
    10ca:	4f e7       	ldi	r20, 0x7F	; 127
    10cc:	57 e4       	ldi	r21, 0x47	; 71
    10ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	4c f5       	brge	.+82     	; 0x1128 <Buzzer_Mode+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d6:	69 8d       	ldd	r22, Y+25	; 0x19
    10d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e2       	ldi	r20, 0x20	; 32
    10e4:	51 e4       	ldi	r21, 0x41	; 65
    10e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9c 8b       	std	Y+20, r25	; 0x14
    10fc:	8b 8b       	std	Y+19, r24	; 0x13
    10fe:	0f c0       	rjmp	.+30     	; 0x111e <Buzzer_Mode+0x57a>
    1100:	89 e1       	ldi	r24, 0x19	; 25
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	9a 8b       	std	Y+18, r25	; 0x12
    1106:	89 8b       	std	Y+17, r24	; 0x11
    1108:	89 89       	ldd	r24, Y+17	; 0x11
    110a:	9a 89       	ldd	r25, Y+18	; 0x12
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <Buzzer_Mode+0x568>
    1110:	9a 8b       	std	Y+18, r25	; 0x12
    1112:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1114:	8b 89       	ldd	r24, Y+19	; 0x13
    1116:	9c 89       	ldd	r25, Y+20	; 0x14
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	9c 8b       	std	Y+20, r25	; 0x14
    111c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111e:	8b 89       	ldd	r24, Y+19	; 0x13
    1120:	9c 89       	ldd	r25, Y+20	; 0x14
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	69 f7       	brne	.-38     	; 0x1100 <Buzzer_Mode+0x55c>
    1126:	14 c0       	rjmp	.+40     	; 0x1150 <Buzzer_Mode+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1128:	6d 89       	ldd	r22, Y+21	; 0x15
    112a:	7e 89       	ldd	r23, Y+22	; 0x16
    112c:	8f 89       	ldd	r24, Y+23	; 0x17
    112e:	98 8d       	ldd	r25, Y+24	; 0x18
    1130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	9c 8b       	std	Y+20, r25	; 0x14
    113a:	8b 8b       	std	Y+19, r24	; 0x13
    113c:	8b 89       	ldd	r24, Y+19	; 0x13
    113e:	9c 89       	ldd	r25, Y+20	; 0x14
    1140:	98 8b       	std	Y+16, r25	; 0x10
    1142:	8f 87       	std	Y+15, r24	; 0x0f
    1144:	8f 85       	ldd	r24, Y+15	; 0x0f
    1146:	98 89       	ldd	r25, Y+16	; 0x10
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	f1 f7       	brne	.-4      	; 0x1148 <Buzzer_Mode+0x5a4>
    114c:	98 8b       	std	Y+16, r25	; 0x10
    114e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			Buzzer(OFF);
			_delay_ms(10);
		}
		_delay_ms(1000);
		for(count=0; count<u8Freq2; count++)
    1150:	de 01       	movw	r26, r28
    1152:	ab 5a       	subi	r26, 0xAB	; 171
    1154:	bf 4f       	sbci	r27, 0xFF	; 255
    1156:	fe 01       	movw	r30, r28
    1158:	eb 5a       	subi	r30, 0xAB	; 171
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	80 81       	ld	r24, Z
    115e:	91 81       	ldd	r25, Z+1	; 0x01
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	11 96       	adiw	r26, 0x01	; 1
    1164:	9c 93       	st	X, r25
    1166:	8e 93       	st	-X, r24
    1168:	fe 01       	movw	r30, r28
    116a:	e8 5a       	subi	r30, 0xA8	; 168
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	80 81       	ld	r24, Z
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	fe 01       	movw	r30, r28
    1176:	eb 5a       	subi	r30, 0xAB	; 171
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
    117e:	82 17       	cp	r24, r18
    1180:	93 07       	cpc	r25, r19
    1182:	0c f4       	brge	.+2      	; 0x1186 <Buzzer_Mode+0x5e2>
    1184:	fb ce       	rjmp	.-522    	; 0xf7c <Buzzer_Mode+0x3d8>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a8 ec       	ldi	r26, 0xC8	; 200
    118c:	b2 e4       	ldi	r27, 0x42	; 66
    118e:	8b 87       	std	Y+11, r24	; 0x0b
    1190:	9c 87       	std	Y+12, r25	; 0x0c
    1192:	ad 87       	std	Y+13, r26	; 0x0d
    1194:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1196:	6b 85       	ldd	r22, Y+11	; 0x0b
    1198:	7c 85       	ldd	r23, Y+12	; 0x0c
    119a:	8d 85       	ldd	r24, Y+13	; 0x0d
    119c:	9e 85       	ldd	r25, Y+14	; 0x0e
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	4a e7       	ldi	r20, 0x7A	; 122
    11a4:	53 e4       	ldi	r21, 0x43	; 67
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	8f 83       	std	Y+7, r24	; 0x07
    11b0:	98 87       	std	Y+8, r25	; 0x08
    11b2:	a9 87       	std	Y+9, r26	; 0x09
    11b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11b6:	6f 81       	ldd	r22, Y+7	; 0x07
    11b8:	78 85       	ldd	r23, Y+8	; 0x08
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <Buzzer_Mode+0x634>
		__ticks = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	3f c0       	rjmp	.+126    	; 0x1256 <Buzzer_Mode+0x6b2>
	else if (__tmp > 65535)
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	3f ef       	ldi	r19, 0xFF	; 255
    11e4:	4f e7       	ldi	r20, 0x7F	; 127
    11e6:	57 e4       	ldi	r21, 0x47	; 71
    11e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ec:	18 16       	cp	r1, r24
    11ee:	4c f5       	brge	.+82     	; 0x1242 <Buzzer_Mode+0x69e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e2       	ldi	r20, 0x20	; 32
    11fe:	51 e4       	ldi	r21, 0x41	; 65
    1200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	bc 01       	movw	r22, r24
    120a:	cd 01       	movw	r24, r26
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9e 83       	std	Y+6, r25	; 0x06
    1216:	8d 83       	std	Y+5, r24	; 0x05
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <Buzzer_Mode+0x694>
    121a:	89 e1       	ldi	r24, 0x19	; 25
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	9c 83       	std	Y+4, r25	; 0x04
    1220:	8b 83       	std	Y+3, r24	; 0x03
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <Buzzer_Mode+0x682>
    122a:	9c 83       	std	Y+4, r25	; 0x04
    122c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	69 f7       	brne	.-38     	; 0x121a <Buzzer_Mode+0x676>
    1240:	14 c0       	rjmp	.+40     	; 0x126a <Buzzer_Mode+0x6c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1242:	6f 81       	ldd	r22, Y+7	; 0x07
    1244:	78 85       	ldd	r23, Y+8	; 0x08
    1246:	89 85       	ldd	r24, Y+9	; 0x09
    1248:	9a 85       	ldd	r25, Y+10	; 0x0a
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9e 83       	std	Y+6, r25	; 0x06
    1254:	8d 83       	std	Y+5, r24	; 0x05
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <Buzzer_Mode+0x6be>
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01
			Buzzer(OFF);
			_delay_ms(1);
		}
		_delay_ms(100);

}
    126a:	c8 5a       	subi	r28, 0xA8	; 168
    126c:	df 4f       	sbci	r29, 0xFF	; 255
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	08 95       	ret

00001282 <DIO_voidInit>:

#include "DIO.h"
#include "Utils.h"

void DIO_voidInit()
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	Clr_Nibble_High(DDRA);
    128a:	aa e3       	ldi	r26, 0x3A	; 58
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ea e3       	ldi	r30, 0x3A	; 58
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8f 70       	andi	r24, 0x0F	; 15
    1296:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRA);
    1298:	aa e3       	ldi	r26, 0x3A	; 58
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	ea e3       	ldi	r30, 0x3A	; 58
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	80 7f       	andi	r24, 0xF0	; 240
    12a4:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRB);
    12a6:	a7 e3       	ldi	r26, 0x37	; 55
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e7 e3       	ldi	r30, 0x37	; 55
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 70       	andi	r24, 0x0F	; 15
    12b2:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRB);
    12b4:	a7 e3       	ldi	r26, 0x37	; 55
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e7 e3       	ldi	r30, 0x37	; 55
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	80 7f       	andi	r24, 0xF0	; 240
    12c0:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRC);
    12c2:	a4 e3       	ldi	r26, 0x34	; 52
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e4 e3       	ldi	r30, 0x34	; 52
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 70       	andi	r24, 0x0F	; 15
    12ce:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRC);
    12d0:	a4 e3       	ldi	r26, 0x34	; 52
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	80 7f       	andi	r24, 0xF0	; 240
    12dc:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRD);
    12de:	a1 e3       	ldi	r26, 0x31	; 49
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e1 e3       	ldi	r30, 0x31	; 49
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8f 70       	andi	r24, 0x0F	; 15
    12ea:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRD);
    12ec:	a1 e3       	ldi	r26, 0x31	; 49
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e1 e3       	ldi	r30, 0x31	; 49
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	80 7f       	andi	r24, 0xF0	; 240
    12f8:	8c 93       	st	X, r24
}
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <DIO_u8GetVal>:

u8 DIO_u8GetVal(u8 u8Port, u8 u8Pin)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	00 d0       	rcall	.+0      	; 0x1306 <DIO_u8GetVal+0x6>
    1306:	00 d0       	rcall	.+0      	; 0x1308 <DIO_u8GetVal+0x8>
    1308:	0f 92       	push	r0
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Return;
	switch (u8Port)
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3d 83       	std	Y+5, r19	; 0x05
    131a:	2c 83       	std	Y+4, r18	; 0x04
    131c:	4c 81       	ldd	r20, Y+4	; 0x04
    131e:	5d 81       	ldd	r21, Y+5	; 0x05
    1320:	41 30       	cpi	r20, 0x01	; 1
    1322:	51 05       	cpc	r21, r1
    1324:	b1 f1       	breq	.+108    	; 0x1392 <DIO_u8GetVal+0x92>
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	9d 81       	ldd	r25, Y+5	; 0x05
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	91 05       	cpc	r25, r1
    132e:	34 f4       	brge	.+12     	; 0x133c <DIO_u8GetVal+0x3c>
    1330:	2c 81       	ldd	r18, Y+4	; 0x04
    1332:	3d 81       	ldd	r19, Y+5	; 0x05
    1334:	21 15       	cp	r18, r1
    1336:	31 05       	cpc	r19, r1
    1338:	71 f0       	breq	.+28     	; 0x1356 <DIO_u8GetVal+0x56>
    133a:	84 c0       	rjmp	.+264    	; 0x1444 <DIO_u8GetVal+0x144>
    133c:	4c 81       	ldd	r20, Y+4	; 0x04
    133e:	5d 81       	ldd	r21, Y+5	; 0x05
    1340:	42 30       	cpi	r20, 0x02	; 2
    1342:	51 05       	cpc	r21, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <DIO_u8GetVal+0x48>
    1346:	43 c0       	rjmp	.+134    	; 0x13ce <DIO_u8GetVal+0xce>
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	91 05       	cpc	r25, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <DIO_u8GetVal+0x54>
    1352:	5b c0       	rjmp	.+182    	; 0x140a <DIO_u8GetVal+0x10a>
    1354:	77 c0       	rjmp	.+238    	; 0x1444 <DIO_u8GetVal+0x144>
	{
	case 0:
		Local_u8Return=Get_Bit(PINA,u8Pin);
    1356:	e9 e3       	ldi	r30, 0x39	; 57
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_u8GetVal+0x70>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	2a 95       	dec	r18
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_u8GetVal+0x6c>
    1374:	9a 01       	movw	r18, r20
    1376:	28 23       	and	r18, r24
    1378:	39 23       	and	r19, r25
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_u8GetVal+0x88>
    1384:	55 95       	asr	r21
    1386:	47 95       	ror	r20
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_u8GetVal+0x84>
    138c:	ca 01       	movw	r24, r20
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	59 c0       	rjmp	.+178    	; 0x1444 <DIO_u8GetVal+0x144>
		break;
	case 1:
		Local_u8Return=Get_Bit(PINB,u8Pin);
    1392:	e6 e3       	ldi	r30, 0x36	; 54
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_u8GetVal+0xac>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	2a 95       	dec	r18
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_u8GetVal+0xa8>
    13b0:	9a 01       	movw	r18, r20
    13b2:	28 23       	and	r18, r24
    13b4:	39 23       	and	r19, r25
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <DIO_u8GetVal+0xc4>
    13c0:	55 95       	asr	r21
    13c2:	47 95       	ror	r20
    13c4:	8a 95       	dec	r24
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <DIO_u8GetVal+0xc0>
    13c8:	ca 01       	movw	r24, r20
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	3b c0       	rjmp	.+118    	; 0x1444 <DIO_u8GetVal+0x144>
		break;
	case 2:
		Local_u8Return=Get_Bit(PINC,u8Pin);
    13ce:	e3 e3       	ldi	r30, 0x33	; 51
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <DIO_u8GetVal+0xe8>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	2a 95       	dec	r18
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <DIO_u8GetVal+0xe4>
    13ec:	9a 01       	movw	r18, r20
    13ee:	28 23       	and	r18, r24
    13f0:	39 23       	and	r19, r25
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	a9 01       	movw	r20, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_u8GetVal+0x100>
    13fc:	55 95       	asr	r21
    13fe:	47 95       	ror	r20
    1400:	8a 95       	dec	r24
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_u8GetVal+0xfc>
    1404:	ca 01       	movw	r24, r20
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	1d c0       	rjmp	.+58     	; 0x1444 <DIO_u8GetVal+0x144>
		break;
	case 3:
		Local_u8Return=Get_Bit(PIND,u8Pin);
    140a:	e0 e3       	ldi	r30, 0x30	; 48
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_u8GetVal+0x124>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	2a 95       	dec	r18
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <DIO_u8GetVal+0x120>
    1428:	9a 01       	movw	r18, r20
    142a:	28 23       	and	r18, r24
    142c:	39 23       	and	r19, r25
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a9 01       	movw	r20, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_u8GetVal+0x13c>
    1438:	55 95       	asr	r21
    143a:	47 95       	ror	r20
    143c:	8a 95       	dec	r24
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_u8GetVal+0x138>
    1440:	ca 01       	movw	r24, r20
    1442:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Return;
    1444:	89 81       	ldd	r24, Y+1	; 0x01
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <DIO_voidWriteVal>:

void DIO_voidWriteVal(u8 u8Port, u8 u8Pin, u8 u8Val)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	00 d0       	rcall	.+0      	; 0x145c <DIO_voidWriteVal+0x6>
    145c:	00 d0       	rcall	.+0      	; 0x145e <DIO_voidWriteVal+0x8>
    145e:	0f 92       	push	r0
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	6a 83       	std	Y+2, r22	; 0x02
    1468:	4b 83       	std	Y+3, r20	; 0x03
	switch (u8Port)
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3d 83       	std	Y+5, r19	; 0x05
    1472:	2c 83       	std	Y+4, r18	; 0x04
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	91 05       	cpc	r25, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <DIO_voidWriteVal+0x2a>
    147e:	46 c0       	rjmp	.+140    	; 0x150c <DIO_voidWriteVal+0xb6>
    1480:	2c 81       	ldd	r18, Y+4	; 0x04
    1482:	3d 81       	ldd	r19, Y+5	; 0x05
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	2c f4       	brge	.+10     	; 0x1494 <DIO_voidWriteVal+0x3e>
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	9d 81       	ldd	r25, Y+5	; 0x05
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	71 f0       	breq	.+28     	; 0x14ae <DIO_voidWriteVal+0x58>
    1492:	c7 c0       	rjmp	.+398    	; 0x1622 <DIO_voidWriteVal+0x1cc>
    1494:	2c 81       	ldd	r18, Y+4	; 0x04
    1496:	3d 81       	ldd	r19, Y+5	; 0x05
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <DIO_voidWriteVal+0x4a>
    149e:	65 c0       	rjmp	.+202    	; 0x156a <DIO_voidWriteVal+0x114>
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	9d 81       	ldd	r25, Y+5	; 0x05
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <DIO_voidWriteVal+0x56>
    14aa:	8e c0       	rjmp	.+284    	; 0x15c8 <DIO_voidWriteVal+0x172>
    14ac:	ba c0       	rjmp	.+372    	; 0x1622 <DIO_voidWriteVal+0x1cc>
		{
		case 0:
			Assign_Bit(PORTA,u8Pin,u8Val);
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	88 23       	and	r24, r24
    14b2:	a1 f4       	brne	.+40     	; 0x14dc <DIO_voidWriteVal+0x86>
    14b4:	ab e3       	ldi	r26, 0x3B	; 59
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	eb e3       	ldi	r30, 0x3B	; 59
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_voidWriteVal+0x7c>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_voidWriteVal+0x78>
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <DIO_voidWriteVal+0x8e>
    14e2:	9f c0       	rjmp	.+318    	; 0x1622 <DIO_voidWriteVal+0x1cc>
    14e4:	ab e3       	ldi	r26, 0x3B	; 59
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_voidWriteVal+0xac>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_voidWriteVal+0xa8>
    1506:	84 2b       	or	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	8b c0       	rjmp	.+278    	; 0x1622 <DIO_voidWriteVal+0x1cc>
			break;
		case 1:
			Assign_Bit(PORTB,u8Pin,u8Val);
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	88 23       	and	r24, r24
    1510:	a1 f4       	brne	.+40     	; 0x153a <DIO_voidWriteVal+0xe4>
    1512:	a8 e3       	ldi	r26, 0x38	; 56
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e8 e3       	ldi	r30, 0x38	; 56
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_voidWriteVal+0xda>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_voidWriteVal+0xd6>
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	09 f0       	breq	.+2      	; 0x1542 <DIO_voidWriteVal+0xec>
    1540:	70 c0       	rjmp	.+224    	; 0x1622 <DIO_voidWriteVal+0x1cc>
    1542:	a8 e3       	ldi	r26, 0x38	; 56
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e8 e3       	ldi	r30, 0x38	; 56
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_voidWriteVal+0x10a>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_voidWriteVal+0x106>
    1564:	84 2b       	or	r24, r20
    1566:	8c 93       	st	X, r24
    1568:	5c c0       	rjmp	.+184    	; 0x1622 <DIO_voidWriteVal+0x1cc>
			break;
		case 2:
			Assign_Bit(PORTC,u8Pin,u8Val);
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	88 23       	and	r24, r24
    156e:	a1 f4       	brne	.+40     	; 0x1598 <DIO_voidWriteVal+0x142>
    1570:	a5 e3       	ldi	r26, 0x35	; 53
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e5 e3       	ldi	r30, 0x35	; 53
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_voidWriteVal+0x138>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <DIO_voidWriteVal+0x134>
    1592:	80 95       	com	r24
    1594:	84 23       	and	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	09 f0       	breq	.+2      	; 0x15a0 <DIO_voidWriteVal+0x14a>
    159e:	41 c0       	rjmp	.+130    	; 0x1622 <DIO_voidWriteVal+0x1cc>
    15a0:	a5 e3       	ldi	r26, 0x35	; 53
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e5 e3       	ldi	r30, 0x35	; 53
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_voidWriteVal+0x168>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_voidWriteVal+0x164>
    15c2:	84 2b       	or	r24, r20
    15c4:	8c 93       	st	X, r24
    15c6:	2d c0       	rjmp	.+90     	; 0x1622 <DIO_voidWriteVal+0x1cc>
			break;
		case 3:
			Assign_Bit(PORTD,u8Pin,u8Val);
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	88 23       	and	r24, r24
    15cc:	a1 f4       	brne	.+40     	; 0x15f6 <DIO_voidWriteVal+0x1a0>
    15ce:	a2 e3       	ldi	r26, 0x32	; 50
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e2 e3       	ldi	r30, 0x32	; 50
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_voidWriteVal+0x196>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_voidWriteVal+0x192>
    15f0:	80 95       	com	r24
    15f2:	84 23       	and	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	99 f4       	brne	.+38     	; 0x1622 <DIO_voidWriteVal+0x1cc>
    15fc:	a2 e3       	ldi	r26, 0x32	; 50
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e2 e3       	ldi	r30, 0x32	; 50
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_voidWriteVal+0x1c4>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_voidWriteVal+0x1c0>
    161e:	84 2b       	or	r24, r20
    1620:	8c 93       	st	X, r24
		}

}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <DIO_voidSetDir>:

void DIO_voidSetDir(u8 u8Port, u8 u8Pin, u8 u8Dir)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	00 d0       	rcall	.+0      	; 0x1638 <DIO_voidSetDir+0x6>
    1638:	00 d0       	rcall	.+0      	; 0x163a <DIO_voidSetDir+0x8>
    163a:	0f 92       	push	r0
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	6a 83       	std	Y+2, r22	; 0x02
    1644:	4b 83       	std	Y+3, r20	; 0x03
	switch (u8Port)
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	3d 83       	std	Y+5, r19	; 0x05
    164e:	2c 83       	std	Y+4, r18	; 0x04
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	9d 81       	ldd	r25, Y+5	; 0x05
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	91 05       	cpc	r25, r1
    1658:	09 f4       	brne	.+2      	; 0x165c <DIO_voidSetDir+0x2a>
    165a:	46 c0       	rjmp	.+140    	; 0x16e8 <DIO_voidSetDir+0xb6>
    165c:	2c 81       	ldd	r18, Y+4	; 0x04
    165e:	3d 81       	ldd	r19, Y+5	; 0x05
    1660:	22 30       	cpi	r18, 0x02	; 2
    1662:	31 05       	cpc	r19, r1
    1664:	2c f4       	brge	.+10     	; 0x1670 <DIO_voidSetDir+0x3e>
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	9d 81       	ldd	r25, Y+5	; 0x05
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	71 f0       	breq	.+28     	; 0x168a <DIO_voidSetDir+0x58>
    166e:	c7 c0       	rjmp	.+398    	; 0x17fe <DIO_voidSetDir+0x1cc>
    1670:	2c 81       	ldd	r18, Y+4	; 0x04
    1672:	3d 81       	ldd	r19, Y+5	; 0x05
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <DIO_voidSetDir+0x4a>
    167a:	65 c0       	rjmp	.+202    	; 0x1746 <DIO_voidSetDir+0x114>
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	9d 81       	ldd	r25, Y+5	; 0x05
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	91 05       	cpc	r25, r1
    1684:	09 f4       	brne	.+2      	; 0x1688 <DIO_voidSetDir+0x56>
    1686:	8e c0       	rjmp	.+284    	; 0x17a4 <DIO_voidSetDir+0x172>
    1688:	ba c0       	rjmp	.+372    	; 0x17fe <DIO_voidSetDir+0x1cc>
		{
		case 0:
			Assign_Bit(DDRA,u8Pin,u8Dir);
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	88 23       	and	r24, r24
    168e:	a1 f4       	brne	.+40     	; 0x16b8 <DIO_voidSetDir+0x86>
    1690:	aa e3       	ldi	r26, 0x3A	; 58
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	ea e3       	ldi	r30, 0x3A	; 58
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_voidSetDir+0x7c>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO_voidSetDir+0x78>
    16b2:	80 95       	com	r24
    16b4:	84 23       	and	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <DIO_voidSetDir+0x8e>
    16be:	9f c0       	rjmp	.+318    	; 0x17fe <DIO_voidSetDir+0x1cc>
    16c0:	aa e3       	ldi	r26, 0x3A	; 58
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	ea e3       	ldi	r30, 0x3A	; 58
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <DIO_voidSetDir+0xac>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <DIO_voidSetDir+0xa8>
    16e2:	84 2b       	or	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	8b c0       	rjmp	.+278    	; 0x17fe <DIO_voidSetDir+0x1cc>
			break;
		case 1:
			Assign_Bit(DDRB,u8Pin,u8Dir);
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	88 23       	and	r24, r24
    16ec:	a1 f4       	brne	.+40     	; 0x1716 <DIO_voidSetDir+0xe4>
    16ee:	a7 e3       	ldi	r26, 0x37	; 55
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e7 e3       	ldi	r30, 0x37	; 55
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_voidSetDir+0xda>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <DIO_voidSetDir+0xd6>
    1710:	80 95       	com	r24
    1712:	84 23       	and	r24, r20
    1714:	8c 93       	st	X, r24
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	09 f0       	breq	.+2      	; 0x171e <DIO_voidSetDir+0xec>
    171c:	70 c0       	rjmp	.+224    	; 0x17fe <DIO_voidSetDir+0x1cc>
    171e:	a7 e3       	ldi	r26, 0x37	; 55
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e7 e3       	ldi	r30, 0x37	; 55
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_voidSetDir+0x10a>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_voidSetDir+0x106>
    1740:	84 2b       	or	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	5c c0       	rjmp	.+184    	; 0x17fe <DIO_voidSetDir+0x1cc>
			break;
		case 2:
			Assign_Bit(DDRC,u8Pin,u8Dir);
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	88 23       	and	r24, r24
    174a:	a1 f4       	brne	.+40     	; 0x1774 <DIO_voidSetDir+0x142>
    174c:	a4 e3       	ldi	r26, 0x34	; 52
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e4 e3       	ldi	r30, 0x34	; 52
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_voidSetDir+0x138>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <DIO_voidSetDir+0x134>
    176e:	80 95       	com	r24
    1770:	84 23       	and	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	09 f0       	breq	.+2      	; 0x177c <DIO_voidSetDir+0x14a>
    177a:	41 c0       	rjmp	.+130    	; 0x17fe <DIO_voidSetDir+0x1cc>
    177c:	a4 e3       	ldi	r26, 0x34	; 52
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e4 e3       	ldi	r30, 0x34	; 52
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <DIO_voidSetDir+0x168>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <DIO_voidSetDir+0x164>
    179e:	84 2b       	or	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	2d c0       	rjmp	.+90     	; 0x17fe <DIO_voidSetDir+0x1cc>
			break;
		case 3:
			Assign_Bit(DDRD,u8Pin,u8Dir);
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	88 23       	and	r24, r24
    17a8:	a1 f4       	brne	.+40     	; 0x17d2 <DIO_voidSetDir+0x1a0>
    17aa:	a1 e3       	ldi	r26, 0x31	; 49
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e1 e3       	ldi	r30, 0x31	; 49
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_voidSetDir+0x196>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_voidSetDir+0x192>
    17cc:	80 95       	com	r24
    17ce:	84 23       	and	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	99 f4       	brne	.+38     	; 0x17fe <DIO_voidSetDir+0x1cc>
    17d8:	a1 e3       	ldi	r26, 0x31	; 49
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e1 e3       	ldi	r30, 0x31	; 49
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	48 2f       	mov	r20, r24
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	02 2e       	mov	r0, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_voidSetDir+0x1c4>
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	0a 94       	dec	r0
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <DIO_voidSetDir+0x1c0>
    17fa:	84 2b       	or	r24, r20
    17fc:	8c 93       	st	X, r24
		}

}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <I2C_MasterInit>:
#include "DIO.h"
#include "Utils.h"


void I2C_MasterInit()
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	/*Choose Frequency 200KHZ*/
	TWBR=22;
    1816:	e0 e2       	ldi	r30, 0x20	; 32
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	86 e1       	ldi	r24, 0x16	; 22
    181c:	80 83       	st	Z, r24

	/*Set Pre-Scaler*/
	Clr_Bit(TWSR,Pin0);
    181e:	a1 e2       	ldi	r26, 0x21	; 33
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e1 e2       	ldi	r30, 0x21	; 33
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8e 7f       	andi	r24, 0xFE	; 254
    182a:	8c 93       	st	X, r24
	Clr_Bit(TWSR,Pin1);
    182c:	a1 e2       	ldi	r26, 0x21	; 33
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e1 e2       	ldi	r30, 0x21	; 33
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	8d 7f       	andi	r24, 0xFD	; 253
    1838:	8c 93       	st	X, r24
}
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <I2C_MasterStartSequence>:


void I2C_MasterStartSequence()
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
	/*Clear Flag*/
	ClearFlag();
    1848:	a6 e5       	ldi	r26, 0x56	; 86
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e6 e5       	ldi	r30, 0x56	; 86
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	80 68       	ori	r24, 0x80	; 128
    1854:	8c 93       	st	X, r24

	/*enable I2C*/
	Set_Bit(TWCR,Pin2);
    1856:	a6 e5       	ldi	r26, 0x56	; 86
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e6 e5       	ldi	r30, 0x56	; 86
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	84 60       	ori	r24, 0x04	; 4
    1862:	8c 93       	st	X, r24

	/*Start sequence*/
	Set_Bit(TWCR,Pin5);
    1864:	a6 e5       	ldi	r26, 0x56	; 86
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e6 e5       	ldi	r30, 0x56	; 86
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	80 62       	ori	r24, 0x20	; 32
    1870:	8c 93       	st	X, r24

	while(Flag==0);
    1872:	e6 e5       	ldi	r30, 0x56	; 86
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	88 1f       	adc	r24, r24
    187a:	88 27       	eor	r24, r24
    187c:	88 1f       	adc	r24, r24
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	90 70       	andi	r25, 0x00	; 0
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	a9 f3       	breq	.-22     	; 0x1872 <I2C_MasterStartSequence+0x32>

	/*Sequence has been started*/
	while((TWSR&0xf8)!= 0x08);
    1888:	e1 e2       	ldi	r30, 0x21	; 33
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	88 7f       	andi	r24, 0xF8	; 248
    1894:	90 70       	andi	r25, 0x00	; 0
    1896:	88 30       	cpi	r24, 0x08	; 8
    1898:	91 05       	cpc	r25, r1
    189a:	b1 f7       	brne	.-20     	; 0x1888 <I2C_MasterStartSequence+0x48>

}
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	08 95       	ret

000018a2 <I2C_MasterSend>:

void I2C_MasterSend(u8 u8Add, u8 u8Data)
{
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <I2C_MasterSend+0x6>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	6a 83       	std	Y+2, r22	; 0x02
	/*Write the Slave Address*/
	TWDR=u8Add+READ;
    18b0:	e3 e2       	ldi	r30, 0x23	; 35
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	80 83       	st	Z, r24

	/*Clear Flag*/
	ClearFlag();
    18b8:	a6 e5       	ldi	r26, 0x56	; 86
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e6 e5       	ldi	r30, 0x56	; 86
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	80 68       	ori	r24, 0x80	; 128
    18c4:	8c 93       	st	X, r24

	while(Flag==0);
    18c6:	e6 e5       	ldi	r30, 0x56	; 86
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	88 1f       	adc	r24, r24
    18ce:	88 27       	eor	r24, r24
    18d0:	88 1f       	adc	r24, r24
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	90 70       	andi	r25, 0x00	; 0
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	a9 f3       	breq	.-22     	; 0x18c6 <I2C_MasterSend+0x24>

	/*Slave Add has been sent and slave has been ack*/
	while((TWSR&0xf8)!= 0x18);
    18dc:	e1 e2       	ldi	r30, 0x21	; 33
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	88 7f       	andi	r24, 0xF8	; 248
    18e8:	90 70       	andi	r25, 0x00	; 0
    18ea:	88 31       	cpi	r24, 0x18	; 24
    18ec:	91 05       	cpc	r25, r1
    18ee:	b1 f7       	brne	.-20     	; 0x18dc <I2C_MasterSend+0x3a>

	/*Write Data*/
	TWDR=u8Data;
    18f0:	e3 e2       	ldi	r30, 0x23	; 35
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	80 83       	st	Z, r24

	/*Clear Flag*/
	ClearFlag();
    18f8:	a6 e5       	ldi	r26, 0x56	; 86
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e6 e5       	ldi	r30, 0x56	; 86
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	80 68       	ori	r24, 0x80	; 128
    1904:	8c 93       	st	X, r24

	while(Flag==0);
    1906:	e6 e5       	ldi	r30, 0x56	; 86
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	88 1f       	adc	r24, r24
    190e:	88 27       	eor	r24, r24
    1910:	88 1f       	adc	r24, r24
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	90 70       	andi	r25, 0x00	; 0
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	a9 f3       	breq	.-22     	; 0x1906 <I2C_MasterSend+0x64>

	/*data has been sent*/
	while((TWSR&0xf8)!= 0x28);
    191c:	e1 e2       	ldi	r30, 0x21	; 33
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	88 7f       	andi	r24, 0xF8	; 248
    1928:	90 70       	andi	r25, 0x00	; 0
    192a:	88 32       	cpi	r24, 0x28	; 40
    192c:	91 05       	cpc	r25, r1
    192e:	b1 f7       	brne	.-20     	; 0x191c <I2C_MasterSend+0x7a>
}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <I2C_MasterStopSequence>:


void I2C_MasterStopSequence()
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	/*Clear Flag*/
	ClearFlag();
    1942:	a6 e5       	ldi	r26, 0x56	; 86
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e6 e5       	ldi	r30, 0x56	; 86
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	80 68       	ori	r24, 0x80	; 128
    194e:	8c 93       	st	X, r24

	/*Stop Sequence*/
	Set_Bit(TWCR,Pin4);
    1950:	a6 e5       	ldi	r26, 0x56	; 86
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e6 e5       	ldi	r30, 0x56	; 86
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	80 61       	ori	r24, 0x10	; 16
    195c:	8c 93       	st	X, r24

}
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <LCD_WriteCommand>:
static u8 charact_number=0;
static u8 current_charact=0;
static u8 English_Char=0;

void LCD_WriteCommand(u8 com)
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	6d 97       	sbiw	r28, 0x1d	; 29
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_voidWriteVal(PortD,Pin0,Zero_Volt); /*RS=0*/
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_High(com)));
    1984:	a5 e3       	ldi	r26, 0x35	; 53
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e5 e3       	ldi	r30, 0x35	; 53
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	28 2f       	mov	r18, r24
    1990:	2f 70       	andi	r18, 0x0F	; 15
    1992:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1994:	82 95       	swap	r24
    1996:	8f 70       	andi	r24, 0x0F	; 15
    1998:	88 2f       	mov	r24, r24
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	90 70       	andi	r25, 0x00	; 0
    199e:	82 95       	swap	r24
    19a0:	92 95       	swap	r25
    19a2:	90 7f       	andi	r25, 0xF0	; 240
    19a4:	98 27       	eor	r25, r24
    19a6:	80 7f       	andi	r24, 0xF0	; 240
    19a8:	98 27       	eor	r25, r24
    19aa:	82 2b       	or	r24, r18
    19ac:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    19ae:	83 e0       	ldi	r24, 0x03	; 3
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_voidWriteVal>
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	a0 e0       	ldi	r26, 0x00	; 0
    19be:	b0 e4       	ldi	r27, 0x40	; 64
    19c0:	89 8f       	std	Y+25, r24	; 0x19
    19c2:	9a 8f       	std	Y+26, r25	; 0x1a
    19c4:	ab 8f       	std	Y+27, r26	; 0x1b
    19c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	4a e7       	ldi	r20, 0x7A	; 122
    19d6:	53 e4       	ldi	r21, 0x43	; 67
    19d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	8d 8b       	std	Y+21, r24	; 0x15
    19e2:	9e 8b       	std	Y+22, r25	; 0x16
    19e4:	af 8b       	std	Y+23, r26	; 0x17
    19e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ea:	7e 89       	ldd	r23, Y+22	; 0x16
    19ec:	8f 89       	ldd	r24, Y+23	; 0x17
    19ee:	98 8d       	ldd	r25, Y+24	; 0x18
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	5f e3       	ldi	r21, 0x3F	; 63
    19f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fc:	88 23       	and	r24, r24
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <LCD_WriteCommand+0xa6>
		__ticks = 1;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	9c 8b       	std	Y+20, r25	; 0x14
    1a06:	8b 8b       	std	Y+19, r24	; 0x13
    1a08:	3f c0       	rjmp	.+126    	; 0x1a88 <LCD_WriteCommand+0x124>
	else if (__tmp > 65535)
    1a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a10:	98 8d       	ldd	r25, Y+24	; 0x18
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	3f ef       	ldi	r19, 0xFF	; 255
    1a16:	4f e7       	ldi	r20, 0x7F	; 127
    1a18:	57 e4       	ldi	r21, 0x47	; 71
    1a1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a1e:	18 16       	cp	r1, r24
    1a20:	4c f5       	brge	.+82     	; 0x1a74 <LCD_WriteCommand+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a22:	69 8d       	ldd	r22, Y+25	; 0x19
    1a24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e2       	ldi	r20, 0x20	; 32
    1a30:	51 e4       	ldi	r21, 0x41	; 65
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9c 8b       	std	Y+20, r25	; 0x14
    1a48:	8b 8b       	std	Y+19, r24	; 0x13
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <LCD_WriteCommand+0x106>
    1a4c:	89 e1       	ldi	r24, 0x19	; 25
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	9a 8b       	std	Y+18, r25	; 0x12
    1a52:	89 8b       	std	Y+17, r24	; 0x11
    1a54:	89 89       	ldd	r24, Y+17	; 0x11
    1a56:	9a 89       	ldd	r25, Y+18	; 0x12
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_WriteCommand+0xf4>
    1a5c:	9a 8b       	std	Y+18, r25	; 0x12
    1a5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a60:	8b 89       	ldd	r24, Y+19	; 0x13
    1a62:	9c 89       	ldd	r25, Y+20	; 0x14
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	9c 8b       	std	Y+20, r25	; 0x14
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	69 f7       	brne	.-38     	; 0x1a4c <LCD_WriteCommand+0xe8>
    1a72:	14 c0       	rjmp	.+40     	; 0x1a9c <LCD_WriteCommand+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a74:	6d 89       	ldd	r22, Y+21	; 0x15
    1a76:	7e 89       	ldd	r23, Y+22	; 0x16
    1a78:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9c 8b       	std	Y+20, r25	; 0x14
    1a86:	8b 8b       	std	Y+19, r24	; 0x13
    1a88:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8c:	98 8b       	std	Y+16, r25	; 0x10
    1a8e:	8f 87       	std	Y+15, r24	; 0x0f
    1a90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a92:	98 89       	ldd	r25, Y+16	; 0x10
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <LCD_WriteCommand+0x130>
    1a98:	98 8b       	std	Y+16, r25	; 0x10
    1a9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	61 e0       	ldi	r22, 0x01	; 1
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_Low(com)));
    1aa6:	a5 e3       	ldi	r26, 0x35	; 53
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e5 e3       	ldi	r30, 0x35	; 53
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	2f 70       	andi	r18, 0x0F	; 15
    1ab4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	8f 70       	andi	r24, 0x0F	; 15
    1abc:	90 70       	andi	r25, 0x00	; 0
    1abe:	82 95       	swap	r24
    1ac0:	92 95       	swap	r25
    1ac2:	90 7f       	andi	r25, 0xF0	; 240
    1ac4:	98 27       	eor	r25, r24
    1ac6:	80 7f       	andi	r24, 0xF0	; 240
    1ac8:	98 27       	eor	r25, r24
    1aca:	82 2b       	or	r24, r18
    1acc:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    1ace:	83 e0       	ldi	r24, 0x03	; 3
    1ad0:	61 e0       	ldi	r22, 0x01	; 1
    1ad2:	41 e0       	ldi	r20, 0x01	; 1
    1ad4:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_voidWriteVal>
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a0 e0       	ldi	r26, 0x00	; 0
    1ade:	b0 e4       	ldi	r27, 0x40	; 64
    1ae0:	8b 87       	std	Y+11, r24	; 0x0b
    1ae2:	9c 87       	std	Y+12, r25	; 0x0c
    1ae4:	ad 87       	std	Y+13, r26	; 0x0d
    1ae6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4a e7       	ldi	r20, 0x7A	; 122
    1af6:	53 e4       	ldi	r21, 0x43	; 67
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	8f 83       	std	Y+7, r24	; 0x07
    1b02:	98 87       	std	Y+8, r25	; 0x08
    1b04:	a9 87       	std	Y+9, r26	; 0x09
    1b06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b08:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0a:	78 85       	ldd	r23, Y+8	; 0x08
    1b0c:	89 85       	ldd	r24, Y+9	; 0x09
    1b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e8       	ldi	r20, 0x80	; 128
    1b16:	5f e3       	ldi	r21, 0x3F	; 63
    1b18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b1c:	88 23       	and	r24, r24
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <LCD_WriteCommand+0x1c6>
		__ticks = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	3f c0       	rjmp	.+126    	; 0x1ba8 <LCD_WriteCommand+0x244>
	else if (__tmp > 65535)
    1b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2c:	78 85       	ldd	r23, Y+8	; 0x08
    1b2e:	89 85       	ldd	r24, Y+9	; 0x09
    1b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	57 e4       	ldi	r21, 0x47	; 71
    1b3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	4c f5       	brge	.+82     	; 0x1b94 <LCD_WriteCommand+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e2       	ldi	r20, 0x20	; 32
    1b50:	51 e4       	ldi	r21, 0x41	; 65
    1b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	0f c0       	rjmp	.+30     	; 0x1b8a <LCD_WriteCommand+0x226>
    1b6c:	89 e1       	ldi	r24, 0x19	; 25
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9c 83       	std	Y+4, r25	; 0x04
    1b72:	8b 83       	std	Y+3, r24	; 0x03
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	9c 81       	ldd	r25, Y+4	; 0x04
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <LCD_WriteCommand+0x214>
    1b7c:	9c 83       	std	Y+4, r25	; 0x04
    1b7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	9e 81       	ldd	r25, Y+6	; 0x06
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	69 f7       	brne	.-38     	; 0x1b6c <LCD_WriteCommand+0x208>
    1b92:	14 c0       	rjmp	.+40     	; 0x1bbc <LCD_WriteCommand+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b94:	6f 81       	ldd	r22, Y+7	; 0x07
    1b96:	78 85       	ldd	r23, Y+8	; 0x08
    1b98:	89 85       	ldd	r24, Y+9	; 0x09
    1b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	8d 83       	std	Y+5, r24	; 0x05
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bac:	9a 83       	std	Y+2, r25	; 0x02
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_WriteCommand+0x250>
    1bb8:	9a 83       	std	Y+2, r25	; 0x02
    1bba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    1bbc:	83 e0       	ldi	r24, 0x03	; 3
    1bbe:	61 e0       	ldi	r22, 0x01	; 1
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_voidWriteVal>

}
    1bc6:	6d 96       	adiw	r28, 0x1d	; 29
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <LCD_Init>:

void LCD_Init(void)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	aa 97       	sbiw	r28, 0x2a	; 42
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetDir(PortD,Pin0,Output); /*RS(DDRD,0) output*/
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_voidSetDir>
	DIO_voidSetDir(PortD,Pin1,Output); /*E(DDRD,1) output*/
    1bf6:	83 e0       	ldi	r24, 0x03	; 3
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	41 e0       	ldi	r20, 0x01	; 1
    1bfc:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_voidSetDir>
	/*LCD Data Bus as output */
	DIO_voidSetDir(PortC,Pin4,Output);
    1c00:	82 e0       	ldi	r24, 0x02	; 2
    1c02:	64 e0       	ldi	r22, 0x04	; 4
    1c04:	41 e0       	ldi	r20, 0x01	; 1
    1c06:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin5,Output);
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	65 e0       	ldi	r22, 0x05	; 5
    1c0e:	41 e0       	ldi	r20, 0x01	; 1
    1c10:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin6,Output);
    1c14:	82 e0       	ldi	r24, 0x02	; 2
    1c16:	66 e0       	ldi	r22, 0x06	; 6
    1c18:	41 e0       	ldi	r20, 0x01	; 1
    1c1a:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin7,Output);
    1c1e:	82 e0       	ldi	r24, 0x02	; 2
    1c20:	67 e0       	ldi	r22, 0x07	; 7
    1c22:	41 e0       	ldi	r20, 0x01	; 1
    1c24:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_voidSetDir>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a8 e4       	ldi	r26, 0x48	; 72
    1c2e:	b2 e4       	ldi	r27, 0x42	; 66
    1c30:	8f a3       	std	Y+39, r24	; 0x27
    1c32:	98 a7       	std	Y+40, r25	; 0x28
    1c34:	a9 a7       	std	Y+41, r26	; 0x29
    1c36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c38:	6f a1       	ldd	r22, Y+39	; 0x27
    1c3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a e7       	ldi	r20, 0x7A	; 122
    1c46:	53 e4       	ldi	r21, 0x43	; 67
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8b a3       	std	Y+35, r24	; 0x23
    1c52:	9c a3       	std	Y+36, r25	; 0x24
    1c54:	ad a3       	std	Y+37, r26	; 0x25
    1c56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c58:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <LCD_Init+0xa2>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9a a3       	std	Y+34, r25	; 0x22
    1c76:	89 a3       	std	Y+33, r24	; 0x21
    1c78:	3f c0       	rjmp	.+126    	; 0x1cf8 <LCD_Init+0x120>
	else if (__tmp > 65535)
    1c7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c80:	9e a1       	ldd	r25, Y+38	; 0x26
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	3f ef       	ldi	r19, 0xFF	; 255
    1c86:	4f e7       	ldi	r20, 0x7F	; 127
    1c88:	57 e4       	ldi	r21, 0x47	; 71
    1c8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c8e:	18 16       	cp	r1, r24
    1c90:	4c f5       	brge	.+82     	; 0x1ce4 <LCD_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	6f a1       	ldd	r22, Y+39	; 0x27
    1c94:	78 a5       	ldd	r23, Y+40	; 0x28
    1c96:	89 a5       	ldd	r24, Y+41	; 0x29
    1c98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9a a3       	std	Y+34, r25	; 0x22
    1cb8:	89 a3       	std	Y+33, r24	; 0x21
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <LCD_Init+0x102>
    1cbc:	89 e1       	ldi	r24, 0x19	; 25
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	98 a3       	std	Y+32, r25	; 0x20
    1cc2:	8f 8f       	std	Y+31, r24	; 0x1f
    1cc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cc6:	98 a1       	ldd	r25, Y+32	; 0x20
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <LCD_Init+0xf0>
    1ccc:	98 a3       	std	Y+32, r25	; 0x20
    1cce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	9a a3       	std	Y+34, r25	; 0x22
    1cd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cda:	89 a1       	ldd	r24, Y+33	; 0x21
    1cdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	69 f7       	brne	.-38     	; 0x1cbc <LCD_Init+0xe4>
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <LCD_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cea:	9e a1       	ldd	r25, Y+38	; 0x26
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9a a3       	std	Y+34, r25	; 0x22
    1cf6:	89 a3       	std	Y+33, r24	; 0x21
    1cf8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfa:	9a a1       	ldd	r25, Y+34	; 0x22
    1cfc:	9e 8f       	std	Y+30, r25	; 0x1e
    1cfe:	8d 8f       	std	Y+29, r24	; 0x1d
    1d00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_Init+0x12c>
    1d08:	9e 8f       	std	Y+30, r25	; 0x1e
    1d0a:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(50);
	LCD_WriteCommand(0x02);
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_WriteCommand>

	/*LCD_WriteCommand(0x20); for 1 line*/
	LCD_WriteCommand(0x28); /*for 2 lines*/
    1d12:	88 e2       	ldi	r24, 0x28	; 40
    1d14:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_WriteCommand>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	a0 e2       	ldi	r26, 0x20	; 32
    1d1e:	b1 e4       	ldi	r27, 0x41	; 65
    1d20:	89 8f       	std	Y+25, r24	; 0x19
    1d22:	9a 8f       	std	Y+26, r25	; 0x1a
    1d24:	ab 8f       	std	Y+27, r26	; 0x1b
    1d26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d28:	69 8d       	ldd	r22, Y+25	; 0x19
    1d2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	4a e7       	ldi	r20, 0x7A	; 122
    1d36:	53 e4       	ldi	r21, 0x43	; 67
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	8d 8b       	std	Y+21, r24	; 0x15
    1d42:	9e 8b       	std	Y+22, r25	; 0x16
    1d44:	af 8b       	std	Y+23, r26	; 0x17
    1d46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d48:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e8       	ldi	r20, 0x80	; 128
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d5c:	88 23       	and	r24, r24
    1d5e:	2c f4       	brge	.+10     	; 0x1d6a <LCD_Init+0x192>
		__ticks = 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	9c 8b       	std	Y+20, r25	; 0x14
    1d66:	8b 8b       	std	Y+19, r24	; 0x13
    1d68:	3f c0       	rjmp	.+126    	; 0x1de8 <LCD_Init+0x210>
	else if (__tmp > 65535)
    1d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d70:	98 8d       	ldd	r25, Y+24	; 0x18
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	3f ef       	ldi	r19, 0xFF	; 255
    1d76:	4f e7       	ldi	r20, 0x7F	; 127
    1d78:	57 e4       	ldi	r21, 0x47	; 71
    1d7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d7e:	18 16       	cp	r1, r24
    1d80:	4c f5       	brge	.+82     	; 0x1dd4 <LCD_Init+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d82:	69 8d       	ldd	r22, Y+25	; 0x19
    1d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e2       	ldi	r20, 0x20	; 32
    1d90:	51 e4       	ldi	r21, 0x41	; 65
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	bc 01       	movw	r22, r24
    1d9c:	cd 01       	movw	r24, r26
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9c 8b       	std	Y+20, r25	; 0x14
    1da8:	8b 8b       	std	Y+19, r24	; 0x13
    1daa:	0f c0       	rjmp	.+30     	; 0x1dca <LCD_Init+0x1f2>
    1dac:	89 e1       	ldi	r24, 0x19	; 25
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9a 8b       	std	Y+18, r25	; 0x12
    1db2:	89 8b       	std	Y+17, r24	; 0x11
    1db4:	89 89       	ldd	r24, Y+17	; 0x11
    1db6:	9a 89       	ldd	r25, Y+18	; 0x12
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <LCD_Init+0x1e0>
    1dbc:	9a 8b       	std	Y+18, r25	; 0x12
    1dbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	9c 8b       	std	Y+20, r25	; 0x14
    1dc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dca:	8b 89       	ldd	r24, Y+19	; 0x13
    1dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	69 f7       	brne	.-38     	; 0x1dac <LCD_Init+0x1d4>
    1dd2:	14 c0       	rjmp	.+40     	; 0x1dfc <LCD_Init+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dda:	98 8d       	ldd	r25, Y+24	; 0x18
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9c 8b       	std	Y+20, r25	; 0x14
    1de6:	8b 8b       	std	Y+19, r24	; 0x13
    1de8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dea:	9c 89       	ldd	r25, Y+20	; 0x14
    1dec:	98 8b       	std	Y+16, r25	; 0x10
    1dee:	8f 87       	std	Y+15, r24	; 0x0f
    1df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df2:	98 89       	ldd	r25, Y+16	; 0x10
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_Init+0x21c>
    1df8:	98 8b       	std	Y+16, r25	; 0x10
    1dfa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_WriteCommand(0x0c);
    1dfc:	8c e0       	ldi	r24, 0x0C	; 12
    1dfe:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_WriteCommand>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a0 e2       	ldi	r26, 0x20	; 32
    1e08:	b1 e4       	ldi	r27, 0x41	; 65
    1e0a:	8b 87       	std	Y+11, r24	; 0x0b
    1e0c:	9c 87       	std	Y+12, r25	; 0x0c
    1e0e:	ad 87       	std	Y+13, r26	; 0x0d
    1e10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	4a e7       	ldi	r20, 0x7A	; 122
    1e20:	53 e4       	ldi	r21, 0x43	; 67
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	8f 83       	std	Y+7, r24	; 0x07
    1e2c:	98 87       	std	Y+8, r25	; 0x08
    1e2e:	a9 87       	std	Y+9, r26	; 0x09
    1e30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e32:	6f 81       	ldd	r22, Y+7	; 0x07
    1e34:	78 85       	ldd	r23, Y+8	; 0x08
    1e36:	89 85       	ldd	r24, Y+9	; 0x09
    1e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e8       	ldi	r20, 0x80	; 128
    1e40:	5f e3       	ldi	r21, 0x3F	; 63
    1e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e46:	88 23       	and	r24, r24
    1e48:	2c f4       	brge	.+10     	; 0x1e54 <LCD_Init+0x27c>
		__ticks = 1;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	3f c0       	rjmp	.+126    	; 0x1ed2 <LCD_Init+0x2fa>
	else if (__tmp > 65535)
    1e54:	6f 81       	ldd	r22, Y+7	; 0x07
    1e56:	78 85       	ldd	r23, Y+8	; 0x08
    1e58:	89 85       	ldd	r24, Y+9	; 0x09
    1e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	3f ef       	ldi	r19, 0xFF	; 255
    1e60:	4f e7       	ldi	r20, 0x7F	; 127
    1e62:	57 e4       	ldi	r21, 0x47	; 71
    1e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e68:	18 16       	cp	r1, r24
    1e6a:	4c f5       	brge	.+82     	; 0x1ebe <LCD_Init+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9e 83       	std	Y+6, r25	; 0x06
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	0f c0       	rjmp	.+30     	; 0x1eb4 <LCD_Init+0x2dc>
    1e96:	89 e1       	ldi	r24, 0x19	; 25
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9c 83       	std	Y+4, r25	; 0x04
    1e9c:	8b 83       	std	Y+3, r24	; 0x03
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_Init+0x2ca>
    1ea6:	9c 83       	std	Y+4, r25	; 0x04
    1ea8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1eac:	9e 81       	ldd	r25, Y+6	; 0x06
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	9e 83       	std	Y+6, r25	; 0x06
    1eb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	69 f7       	brne	.-38     	; 0x1e96 <LCD_Init+0x2be>
    1ebc:	14 c0       	rjmp	.+40     	; 0x1ee6 <LCD_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec0:	78 85       	ldd	r23, Y+8	; 0x08
    1ec2:	89 85       	ldd	r24, Y+9	; 0x09
    1ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9e 83       	std	Y+6, r25	; 0x06
    1ed0:	8d 83       	std	Y+5, r24	; 0x05
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <LCD_Init+0x306>
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	LCD_CLear();
    1ee6:	0e 94 c2 10 	call	0x2184	; 0x2184 <LCD_CLear>
	LCD_Set_Entry_Mode(1);
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_Set_Entry_Mode>

}
    1ef0:	aa 96       	adiw	r28, 0x2a	; 42
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <LCD_WriteData>:

void LCD_WriteData(u8 com)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	6d 97       	sbiw	r28, 0x1d	; 29
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	8d 8f       	std	Y+29, r24	; 0x1d

	Set_Bit(PORTD,0); /*RS*/
    1f18:	a2 e3       	ldi	r26, 0x32	; 50
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e2 e3       	ldi	r30, 0x32	; 50
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	81 60       	ori	r24, 0x01	; 1
    1f24:	8c 93       	st	X, r24

	Assign_Nibble_High(PORTC,(Get_Nibble_High(com)));
    1f26:	a5 e3       	ldi	r26, 0x35	; 53
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e5 e3       	ldi	r30, 0x35	; 53
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	28 2f       	mov	r18, r24
    1f32:	2f 70       	andi	r18, 0x0F	; 15
    1f34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f36:	82 95       	swap	r24
    1f38:	8f 70       	andi	r24, 0x0F	; 15
    1f3a:	88 2f       	mov	r24, r24
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	90 70       	andi	r25, 0x00	; 0
    1f40:	82 95       	swap	r24
    1f42:	92 95       	swap	r25
    1f44:	90 7f       	andi	r25, 0xF0	; 240
    1f46:	98 27       	eor	r25, r24
    1f48:	80 7f       	andi	r24, 0xF0	; 240
    1f4a:	98 27       	eor	r25, r24
    1f4c:	82 2b       	or	r24, r18
    1f4e:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    1f50:	83 e0       	ldi	r24, 0x03	; 3
    1f52:	61 e0       	ldi	r22, 0x01	; 1
    1f54:	41 e0       	ldi	r20, 0x01	; 1
    1f56:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_voidWriteVal>
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 ea       	ldi	r26, 0xA0	; 160
    1f60:	b1 e4       	ldi	r27, 0x41	; 65
    1f62:	89 8f       	std	Y+25, r24	; 0x19
    1f64:	9a 8f       	std	Y+26, r25	; 0x1a
    1f66:	ab 8f       	std	Y+27, r26	; 0x1b
    1f68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	4a e7       	ldi	r20, 0x7A	; 122
    1f78:	53 e4       	ldi	r21, 0x43	; 67
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	8d 8b       	std	Y+21, r24	; 0x15
    1f84:	9e 8b       	std	Y+22, r25	; 0x16
    1f86:	af 8b       	std	Y+23, r26	; 0x17
    1f88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f90:	98 8d       	ldd	r25, Y+24	; 0x18
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e8       	ldi	r20, 0x80	; 128
    1f98:	5f e3       	ldi	r21, 0x3F	; 63
    1f9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f9e:	88 23       	and	r24, r24
    1fa0:	2c f4       	brge	.+10     	; 0x1fac <LCD_WriteData+0xaa>
		__ticks = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9c 8b       	std	Y+20, r25	; 0x14
    1fa8:	8b 8b       	std	Y+19, r24	; 0x13
    1faa:	3f c0       	rjmp	.+126    	; 0x202a <LCD_WriteData+0x128>
	else if (__tmp > 65535)
    1fac:	6d 89       	ldd	r22, Y+21	; 0x15
    1fae:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	3f ef       	ldi	r19, 0xFF	; 255
    1fb8:	4f e7       	ldi	r20, 0x7F	; 127
    1fba:	57 e4       	ldi	r21, 0x47	; 71
    1fbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc0:	18 16       	cp	r1, r24
    1fc2:	4c f5       	brge	.+82     	; 0x2016 <LCD_WriteData+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e2       	ldi	r20, 0x20	; 32
    1fd2:	51 e4       	ldi	r21, 0x41	; 65
    1fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9c 8b       	std	Y+20, r25	; 0x14
    1fea:	8b 8b       	std	Y+19, r24	; 0x13
    1fec:	0f c0       	rjmp	.+30     	; 0x200c <LCD_WriteData+0x10a>
    1fee:	89 e1       	ldi	r24, 0x19	; 25
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	9a 8b       	std	Y+18, r25	; 0x12
    1ff4:	89 8b       	std	Y+17, r24	; 0x11
    1ff6:	89 89       	ldd	r24, Y+17	; 0x11
    1ff8:	9a 89       	ldd	r25, Y+18	; 0x12
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_WriteData+0xf8>
    1ffe:	9a 8b       	std	Y+18, r25	; 0x12
    2000:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2002:	8b 89       	ldd	r24, Y+19	; 0x13
    2004:	9c 89       	ldd	r25, Y+20	; 0x14
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	9c 8b       	std	Y+20, r25	; 0x14
    200a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200c:	8b 89       	ldd	r24, Y+19	; 0x13
    200e:	9c 89       	ldd	r25, Y+20	; 0x14
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	69 f7       	brne	.-38     	; 0x1fee <LCD_WriteData+0xec>
    2014:	14 c0       	rjmp	.+40     	; 0x203e <LCD_WriteData+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2016:	6d 89       	ldd	r22, Y+21	; 0x15
    2018:	7e 89       	ldd	r23, Y+22	; 0x16
    201a:	8f 89       	ldd	r24, Y+23	; 0x17
    201c:	98 8d       	ldd	r25, Y+24	; 0x18
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	9c 8b       	std	Y+20, r25	; 0x14
    2028:	8b 8b       	std	Y+19, r24	; 0x13
    202a:	8b 89       	ldd	r24, Y+19	; 0x13
    202c:	9c 89       	ldd	r25, Y+20	; 0x14
    202e:	98 8b       	std	Y+16, r25	; 0x10
    2030:	8f 87       	std	Y+15, r24	; 0x0f
    2032:	8f 85       	ldd	r24, Y+15	; 0x0f
    2034:	98 89       	ldd	r25, Y+16	; 0x10
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <LCD_WriteData+0x134>
    203a:	98 8b       	std	Y+16, r25	; 0x10
    203c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    203e:	83 e0       	ldi	r24, 0x03	; 3
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_Low(com)));
    2048:	a5 e3       	ldi	r26, 0x35	; 53
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e5 e3       	ldi	r30, 0x35	; 53
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	28 2f       	mov	r18, r24
    2054:	2f 70       	andi	r18, 0x0F	; 15
    2056:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2058:	88 2f       	mov	r24, r24
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	8f 70       	andi	r24, 0x0F	; 15
    205e:	90 70       	andi	r25, 0x00	; 0
    2060:	82 95       	swap	r24
    2062:	92 95       	swap	r25
    2064:	90 7f       	andi	r25, 0xF0	; 240
    2066:	98 27       	eor	r25, r24
    2068:	80 7f       	andi	r24, 0xF0	; 240
    206a:	98 27       	eor	r25, r24
    206c:	82 2b       	or	r24, r18
    206e:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    2070:	83 e0       	ldi	r24, 0x03	; 3
    2072:	61 e0       	ldi	r22, 0x01	; 1
    2074:	41 e0       	ldi	r20, 0x01	; 1
    2076:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_voidWriteVal>
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	a0 ea       	ldi	r26, 0xA0	; 160
    2080:	b1 e4       	ldi	r27, 0x41	; 65
    2082:	8b 87       	std	Y+11, r24	; 0x0b
    2084:	9c 87       	std	Y+12, r25	; 0x0c
    2086:	ad 87       	std	Y+13, r26	; 0x0d
    2088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208a:	6b 85       	ldd	r22, Y+11	; 0x0b
    208c:	7c 85       	ldd	r23, Y+12	; 0x0c
    208e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2090:	9e 85       	ldd	r25, Y+14	; 0x0e
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	4a e7       	ldi	r20, 0x7A	; 122
    2098:	53 e4       	ldi	r21, 0x43	; 67
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	8f 83       	std	Y+7, r24	; 0x07
    20a4:	98 87       	std	Y+8, r25	; 0x08
    20a6:	a9 87       	std	Y+9, r26	; 0x09
    20a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20be:	88 23       	and	r24, r24
    20c0:	2c f4       	brge	.+10     	; 0x20cc <LCD_WriteData+0x1ca>
		__ticks = 1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
    20ca:	3f c0       	rjmp	.+126    	; 0x214a <LCD_WriteData+0x248>
	else if (__tmp > 65535)
    20cc:	6f 81       	ldd	r22, Y+7	; 0x07
    20ce:	78 85       	ldd	r23, Y+8	; 0x08
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	3f ef       	ldi	r19, 0xFF	; 255
    20d8:	4f e7       	ldi	r20, 0x7F	; 127
    20da:	57 e4       	ldi	r21, 0x47	; 71
    20dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e0:	18 16       	cp	r1, r24
    20e2:	4c f5       	brge	.+82     	; 0x2136 <LCD_WriteData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e2       	ldi	r20, 0x20	; 32
    20f2:	51 e4       	ldi	r21, 0x41	; 65
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9e 83       	std	Y+6, r25	; 0x06
    210a:	8d 83       	std	Y+5, r24	; 0x05
    210c:	0f c0       	rjmp	.+30     	; 0x212c <LCD_WriteData+0x22a>
    210e:	89 e1       	ldi	r24, 0x19	; 25
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9c 83       	std	Y+4, r25	; 0x04
    2114:	8b 83       	std	Y+3, r24	; 0x03
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <LCD_WriteData+0x218>
    211e:	9c 83       	std	Y+4, r25	; 0x04
    2120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	69 f7       	brne	.-38     	; 0x210e <LCD_WriteData+0x20c>
    2134:	14 c0       	rjmp	.+40     	; 0x215e <LCD_WriteData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2136:	6f 81       	ldd	r22, Y+7	; 0x07
    2138:	78 85       	ldd	r23, Y+8	; 0x08
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9e 83       	std	Y+6, r25	; 0x06
    2148:	8d 83       	std	Y+5, r24	; 0x05
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	9e 81       	ldd	r25, Y+6	; 0x06
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	9a 81       	ldd	r25, Y+2	; 0x02
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <LCD_WriteData+0x254>
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    215e:	83 e0       	ldi	r24, 0x03	; 3
    2160:	61 e0       	ldi	r22, 0x01	; 1
    2162:	40 e0       	ldi	r20, 0x00	; 0
    2164:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_voidWriteVal>
	English_Char++;
    2168:	80 91 72 00 	lds	r24, 0x0072
    216c:	8f 5f       	subi	r24, 0xFF	; 255
    216e:	80 93 72 00 	sts	0x0072, r24

}
    2172:	6d 96       	adiw	r28, 0x1d	; 29
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <LCD_CLear>:

void LCD_CLear()
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	2e 97       	sbiw	r28, 0x0e	; 14
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x01);
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_WriteCommand>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 ea       	ldi	r26, 0xA0	; 160
    21a4:	b1 e4       	ldi	r27, 0x41	; 65
    21a6:	8b 87       	std	Y+11, r24	; 0x0b
    21a8:	9c 87       	std	Y+12, r25	; 0x0c
    21aa:	ad 87       	std	Y+13, r26	; 0x0d
    21ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a e7       	ldi	r20, 0x7A	; 122
    21bc:	53 e4       	ldi	r21, 0x43	; 67
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8f 83       	std	Y+7, r24	; 0x07
    21c8:	98 87       	std	Y+8, r25	; 0x08
    21ca:	a9 87       	std	Y+9, r26	; 0x09
    21cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	2c f4       	brge	.+10     	; 0x21f0 <LCD_CLear+0x6c>
		__ticks = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
    21ee:	3f c0       	rjmp	.+126    	; 0x226e <LCD_CLear+0xea>
	else if (__tmp > 65535)
    21f0:	6f 81       	ldd	r22, Y+7	; 0x07
    21f2:	78 85       	ldd	r23, Y+8	; 0x08
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	3f ef       	ldi	r19, 0xFF	; 255
    21fc:	4f e7       	ldi	r20, 0x7F	; 127
    21fe:	57 e4       	ldi	r21, 0x47	; 71
    2200:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2204:	18 16       	cp	r1, r24
    2206:	4c f5       	brge	.+82     	; 0x225a <LCD_CLear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2208:	6b 85       	ldd	r22, Y+11	; 0x0b
    220a:	7c 85       	ldd	r23, Y+12	; 0x0c
    220c:	8d 85       	ldd	r24, Y+13	; 0x0d
    220e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e2       	ldi	r20, 0x20	; 32
    2216:	51 e4       	ldi	r21, 0x41	; 65
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	8d 83       	std	Y+5, r24	; 0x05
    2230:	0f c0       	rjmp	.+30     	; 0x2250 <LCD_CLear+0xcc>
    2232:	89 e1       	ldi	r24, 0x19	; 25
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	9c 83       	std	Y+4, r25	; 0x04
    2238:	8b 83       	std	Y+3, r24	; 0x03
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <LCD_CLear+0xba>
    2242:	9c 83       	std	Y+4, r25	; 0x04
    2244:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	9e 81       	ldd	r25, Y+6	; 0x06
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2250:	8d 81       	ldd	r24, Y+5	; 0x05
    2252:	9e 81       	ldd	r25, Y+6	; 0x06
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	69 f7       	brne	.-38     	; 0x2232 <LCD_CLear+0xae>
    2258:	14 c0       	rjmp	.+40     	; 0x2282 <LCD_CLear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225a:	6f 81       	ldd	r22, Y+7	; 0x07
    225c:	78 85       	ldd	r23, Y+8	; 0x08
    225e:	89 85       	ldd	r24, Y+9	; 0x09
    2260:	9a 85       	ldd	r25, Y+10	; 0x0a
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	8d 81       	ldd	r24, Y+5	; 0x05
    2270:	9e 81       	ldd	r25, Y+6	; 0x06
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_CLear+0xf6>
    227e:	9a 83       	std	Y+2, r25	; 0x02
    2280:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	charact_number=0;
    2282:	10 92 70 00 	sts	0x0070, r1
}
    2286:	2e 96       	adiw	r28, 0x0e	; 14
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <LCD_GoTo>:

void LCD_GoTo(u8 x, u8 y)
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	00 d0       	rcall	.+0      	; 0x229e <LCD_GoTo+0x6>
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	6a 83       	std	Y+2, r22	; 0x02
	if(y)
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	88 23       	and	r24, r24
    22aa:	29 f0       	breq	.+10     	; 0x22b6 <LCD_GoTo+0x1e>
		English_Char=4*16+x;
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	80 5c       	subi	r24, 0xC0	; 192
    22b0:	80 93 72 00 	sts	0x0072, r24
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <LCD_GoTo+0x24>
	else
		English_Char=x;
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	80 93 72 00 	sts	0x0072, r24

	LCD_Set_DD_Add(English_Char);
    22bc:	80 91 72 00 	lds	r24, 0x0072
    22c0:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_Set_DD_Add>

}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <LCD_WrtireString>:


u8 LCD_WrtireString(u8* str)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <LCD_WrtireString+0x6>
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <LCD_WrtireString+0x8>
    22d6:	0f 92       	push	r0
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	9c 83       	std	Y+4, r25	; 0x04
    22de:	8b 83       	std	Y+3, r24	; 0x03
	u8 count=0;
    22e0:	1a 82       	std	Y+2, r1	; 0x02
	u8 size=0;
    22e2:	19 82       	std	Y+1, r1	; 0x01
    22e4:	06 c0       	rjmp	.+12     	; 0x22f2 <LCD_WrtireString+0x24>

	while( (!((*(str+count))=='\0')) && size<=16)
	{
		count++;
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	8f 5f       	subi	r24, 0xFF	; 255
    22ea:	8a 83       	std	Y+2, r24	; 0x02
		size++;
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	89 83       	std	Y+1, r24	; 0x01
u8 LCD_WrtireString(u8* str)
{
	u8 count=0;
	u8 size=0;

	while( (!((*(str+count))=='\0')) && size<=16)
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	fc 01       	movw	r30, r24
    22fe:	e2 0f       	add	r30, r18
    2300:	f3 1f       	adc	r31, r19
    2302:	80 81       	ld	r24, Z
    2304:	88 23       	and	r24, r24
    2306:	19 f0       	breq	.+6      	; 0x230e <LCD_WrtireString+0x40>
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	81 31       	cpi	r24, 0x11	; 17
    230c:	60 f3       	brcs	.-40     	; 0x22e6 <LCD_WrtireString+0x18>
	{
		count++;
		size++;
	}

	if(size<=16)
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	81 31       	cpi	r24, 0x11	; 17
    2312:	b8 f4       	brcc	.+46     	; 0x2342 <LCD_WrtireString+0x74>
	{
		for(count=0;count<size;count++)
    2314:	1a 82       	std	Y+2, r1	; 0x02
    2316:	0e c0       	rjmp	.+28     	; 0x2334 <LCD_WrtireString+0x66>
			LCD_WriteData(*(str+count));
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	fc 01       	movw	r30, r24
    2324:	e2 0f       	add	r30, r18
    2326:	f3 1f       	adc	r31, r19
    2328:	80 81       	ld	r24, Z
    232a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
		size++;
	}

	if(size<=16)
	{
		for(count=0;count<size;count++)
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	8f 5f       	subi	r24, 0xFF	; 255
    2332:	8a 83       	std	Y+2, r24	; 0x02
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	98 17       	cp	r25, r24
    233a:	70 f3       	brcs	.-36     	; 0x2318 <LCD_WrtireString+0x4a>
			LCD_WriteData(*(str+count));
		return 1;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <LCD_WrtireString+0x76>
	}
	else
		return 0;
    2342:	1d 82       	std	Y+5, r1	; 0x05
    2344:	8d 81       	ldd	r24, Y+5	; 0x05

}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <LCD_Set_CG_Add>:


void LCD_Set_CG_Add(u8 add)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	2f 97       	sbiw	r28, 0x0f	; 15
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_WriteCommand(add);
    236c:	8f 85       	ldd	r24, Y+15	; 0x0f
    236e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_WriteCommand>
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	a0 e2       	ldi	r26, 0x20	; 32
    2378:	b1 e4       	ldi	r27, 0x41	; 65
    237a:	8b 87       	std	Y+11, r24	; 0x0b
    237c:	9c 87       	std	Y+12, r25	; 0x0c
    237e:	ad 87       	std	Y+13, r26	; 0x0d
    2380:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2382:	6b 85       	ldd	r22, Y+11	; 0x0b
    2384:	7c 85       	ldd	r23, Y+12	; 0x0c
    2386:	8d 85       	ldd	r24, Y+13	; 0x0d
    2388:	9e 85       	ldd	r25, Y+14	; 0x0e
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	4a e7       	ldi	r20, 0x7A	; 122
    2390:	53 e4       	ldi	r21, 0x43	; 67
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	8f 83       	std	Y+7, r24	; 0x07
    239c:	98 87       	std	Y+8, r25	; 0x08
    239e:	a9 87       	std	Y+9, r26	; 0x09
    23a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a2:	6f 81       	ldd	r22, Y+7	; 0x07
    23a4:	78 85       	ldd	r23, Y+8	; 0x08
    23a6:	89 85       	ldd	r24, Y+9	; 0x09
    23a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e8       	ldi	r20, 0x80	; 128
    23b0:	5f e3       	ldi	r21, 0x3F	; 63
    23b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b6:	88 23       	and	r24, r24
    23b8:	2c f4       	brge	.+10     	; 0x23c4 <LCD_Set_CG_Add+0x6e>
		__ticks = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
    23c2:	3f c0       	rjmp	.+126    	; 0x2442 <LCD_Set_CG_Add+0xec>
	else if (__tmp > 65535)
    23c4:	6f 81       	ldd	r22, Y+7	; 0x07
    23c6:	78 85       	ldd	r23, Y+8	; 0x08
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	3f ef       	ldi	r19, 0xFF	; 255
    23d0:	4f e7       	ldi	r20, 0x7F	; 127
    23d2:	57 e4       	ldi	r21, 0x47	; 71
    23d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d8:	18 16       	cp	r1, r24
    23da:	4c f5       	brge	.+82     	; 0x242e <LCD_Set_CG_Add+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23de:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e2       	ldi	r20, 0x20	; 32
    23ea:	51 e4       	ldi	r21, 0x41	; 65
    23ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
    2404:	0f c0       	rjmp	.+30     	; 0x2424 <LCD_Set_CG_Add+0xce>
    2406:	89 e1       	ldi	r24, 0x19	; 25
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9c 83       	std	Y+4, r25	; 0x04
    240c:	8b 83       	std	Y+3, r24	; 0x03
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <LCD_Set_CG_Add+0xbc>
    2416:	9c 83       	std	Y+4, r25	; 0x04
    2418:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241a:	8d 81       	ldd	r24, Y+5	; 0x05
    241c:	9e 81       	ldd	r25, Y+6	; 0x06
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	69 f7       	brne	.-38     	; 0x2406 <LCD_Set_CG_Add+0xb0>
    242c:	14 c0       	rjmp	.+40     	; 0x2456 <LCD_Set_CG_Add+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9e 83       	std	Y+6, r25	; 0x06
    2440:	8d 83       	std	Y+5, r24	; 0x05
    2442:	8d 81       	ldd	r24, Y+5	; 0x05
    2444:	9e 81       	ldd	r25, Y+6	; 0x06
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	89 83       	std	Y+1, r24	; 0x01
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <LCD_Set_CG_Add+0xf8>
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    2456:	2f 96       	adiw	r28, 0x0f	; 15
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <LCD_Shift>:

void LCD_Shift()
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	2e 97       	sbiw	r28, 0x0e	; 14
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x1c);
    247c:	8c e1       	ldi	r24, 0x1C	; 28
    247e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_WriteCommand>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a0 e2       	ldi	r26, 0x20	; 32
    2488:	b1 e4       	ldi	r27, 0x41	; 65
    248a:	8b 87       	std	Y+11, r24	; 0x0b
    248c:	9c 87       	std	Y+12, r25	; 0x0c
    248e:	ad 87       	std	Y+13, r26	; 0x0d
    2490:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2492:	6b 85       	ldd	r22, Y+11	; 0x0b
    2494:	7c 85       	ldd	r23, Y+12	; 0x0c
    2496:	8d 85       	ldd	r24, Y+13	; 0x0d
    2498:	9e 85       	ldd	r25, Y+14	; 0x0e
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a e7       	ldi	r20, 0x7A	; 122
    24a0:	53 e4       	ldi	r21, 0x43	; 67
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8f 83       	std	Y+7, r24	; 0x07
    24ac:	98 87       	std	Y+8, r25	; 0x08
    24ae:	a9 87       	std	Y+9, r26	; 0x09
    24b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24b2:	6f 81       	ldd	r22, Y+7	; 0x07
    24b4:	78 85       	ldd	r23, Y+8	; 0x08
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	5f e3       	ldi	r21, 0x3F	; 63
    24c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	2c f4       	brge	.+10     	; 0x24d4 <LCD_Shift+0x6c>
		__ticks = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8d 83       	std	Y+5, r24	; 0x05
    24d2:	3f c0       	rjmp	.+126    	; 0x2552 <LCD_Shift+0xea>
	else if (__tmp > 65535)
    24d4:	6f 81       	ldd	r22, Y+7	; 0x07
    24d6:	78 85       	ldd	r23, Y+8	; 0x08
    24d8:	89 85       	ldd	r24, Y+9	; 0x09
    24da:	9a 85       	ldd	r25, Y+10	; 0x0a
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	3f ef       	ldi	r19, 0xFF	; 255
    24e0:	4f e7       	ldi	r20, 0x7F	; 127
    24e2:	57 e4       	ldi	r21, 0x47	; 71
    24e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	4c f5       	brge	.+82     	; 0x253e <LCD_Shift+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
    2514:	0f c0       	rjmp	.+30     	; 0x2534 <LCD_Shift+0xcc>
    2516:	89 e1       	ldi	r24, 0x19	; 25
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	8b 83       	std	Y+3, r24	; 0x03
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	9c 81       	ldd	r25, Y+4	; 0x04
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_Shift+0xba>
    2526:	9c 83       	std	Y+4, r25	; 0x04
    2528:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	9e 83       	std	Y+6, r25	; 0x06
    2532:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2534:	8d 81       	ldd	r24, Y+5	; 0x05
    2536:	9e 81       	ldd	r25, Y+6	; 0x06
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	69 f7       	brne	.-38     	; 0x2516 <LCD_Shift+0xae>
    253c:	14 c0       	rjmp	.+40     	; 0x2566 <LCD_Shift+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253e:	6f 81       	ldd	r22, Y+7	; 0x07
    2540:	78 85       	ldd	r23, Y+8	; 0x08
    2542:	89 85       	ldd	r24, Y+9	; 0x09
    2544:	9a 85       	ldd	r25, Y+10	; 0x0a
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	8d 83       	std	Y+5, r24	; 0x05
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	9e 81       	ldd	r25, Y+6	; 0x06
    2556:	9a 83       	std	Y+2, r25	; 0x02
    2558:	89 83       	std	Y+1, r24	; 0x01
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	9a 81       	ldd	r25, Y+2	; 0x02
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_Shift+0xf6>
    2562:	9a 83       	std	Y+2, r25	; 0x02
    2564:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2566:	2e 96       	adiw	r28, 0x0e	; 14
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	de bf       	out	0x3e, r29	; 62
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	cd bf       	out	0x3d, r28	; 61
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <LCD_Set_Entry_Mode>:
void LCD_Set_Entry_Mode(u8 I_D)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	2f 97       	sbiw	r28, 0x0f	; 15
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	cd bf       	out	0x3d, r28	; 61
    258c:	8f 87       	std	Y+15, r24	; 0x0f
	if(I_D)
    258e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2590:	88 23       	and	r24, r24
    2592:	21 f0       	breq	.+8      	; 0x259c <LCD_Set_Entry_Mode+0x24>
		LCD_WriteCommand(0x06);
    2594:	86 e0       	ldi	r24, 0x06	; 6
    2596:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_WriteCommand>
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <LCD_Set_Entry_Mode+0x2a>
	else
		LCD_WriteCommand(0x07);
    259c:	87 e0       	ldi	r24, 0x07	; 7
    259e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_WriteCommand>
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	a0 e2       	ldi	r26, 0x20	; 32
    25a8:	b1 e4       	ldi	r27, 0x41	; 65
    25aa:	8b 87       	std	Y+11, r24	; 0x0b
    25ac:	9c 87       	std	Y+12, r25	; 0x0c
    25ae:	ad 87       	std	Y+13, r26	; 0x0d
    25b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	4a e7       	ldi	r20, 0x7A	; 122
    25c0:	53 e4       	ldi	r21, 0x43	; 67
    25c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	8f 83       	std	Y+7, r24	; 0x07
    25cc:	98 87       	std	Y+8, r25	; 0x08
    25ce:	a9 87       	std	Y+9, r26	; 0x09
    25d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25d2:	6f 81       	ldd	r22, Y+7	; 0x07
    25d4:	78 85       	ldd	r23, Y+8	; 0x08
    25d6:	89 85       	ldd	r24, Y+9	; 0x09
    25d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e8       	ldi	r20, 0x80	; 128
    25e0:	5f e3       	ldi	r21, 0x3F	; 63
    25e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e6:	88 23       	and	r24, r24
    25e8:	2c f4       	brge	.+10     	; 0x25f4 <LCD_Set_Entry_Mode+0x7c>
		__ticks = 1;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9e 83       	std	Y+6, r25	; 0x06
    25f0:	8d 83       	std	Y+5, r24	; 0x05
    25f2:	3f c0       	rjmp	.+126    	; 0x2672 <LCD_Set_Entry_Mode+0xfa>
	else if (__tmp > 65535)
    25f4:	6f 81       	ldd	r22, Y+7	; 0x07
    25f6:	78 85       	ldd	r23, Y+8	; 0x08
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	3f ef       	ldi	r19, 0xFF	; 255
    2600:	4f e7       	ldi	r20, 0x7F	; 127
    2602:	57 e4       	ldi	r21, 0x47	; 71
    2604:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2608:	18 16       	cp	r1, r24
    260a:	4c f5       	brge	.+82     	; 0x265e <LCD_Set_Entry_Mode+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260c:	6b 85       	ldd	r22, Y+11	; 0x0b
    260e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2610:	8d 85       	ldd	r24, Y+13	; 0x0d
    2612:	9e 85       	ldd	r25, Y+14	; 0x0e
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e2       	ldi	r20, 0x20	; 32
    261a:	51 e4       	ldi	r21, 0x41	; 65
    261c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
    2634:	0f c0       	rjmp	.+30     	; 0x2654 <LCD_Set_Entry_Mode+0xdc>
    2636:	89 e1       	ldi	r24, 0x19	; 25
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9c 83       	std	Y+4, r25	; 0x04
    263c:	8b 83       	std	Y+3, r24	; 0x03
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <LCD_Set_Entry_Mode+0xca>
    2646:	9c 83       	std	Y+4, r25	; 0x04
    2648:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	9e 83       	std	Y+6, r25	; 0x06
    2652:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	69 f7       	brne	.-38     	; 0x2636 <LCD_Set_Entry_Mode+0xbe>
    265c:	14 c0       	rjmp	.+40     	; 0x2686 <LCD_Set_Entry_Mode+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265e:	6f 81       	ldd	r22, Y+7	; 0x07
    2660:	78 85       	ldd	r23, Y+8	; 0x08
    2662:	89 85       	ldd	r24, Y+9	; 0x09
    2664:	9a 85       	ldd	r25, Y+10	; 0x0a
    2666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	9e 83       	std	Y+6, r25	; 0x06
    2670:	8d 83       	std	Y+5, r24	; 0x05
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	9e 81       	ldd	r25, Y+6	; 0x06
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	9a 81       	ldd	r25, Y+2	; 0x02
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <LCD_Set_Entry_Mode+0x106>
    2682:	9a 83       	std	Y+2, r25	; 0x02
    2684:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2686:	2f 96       	adiw	r28, 0x0f	; 15
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	08 95       	ret

00002698 <LCD_Set_DD_Add>:

void LCD_Set_DD_Add(u8 add)
{
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	2f 97       	sbiw	r28, 0x0f	; 15
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_WriteCommand(add);
    26ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_WriteCommand>
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	a0 e2       	ldi	r26, 0x20	; 32
    26ba:	b1 e4       	ldi	r27, 0x41	; 65
    26bc:	8b 87       	std	Y+11, r24	; 0x0b
    26be:	9c 87       	std	Y+12, r25	; 0x0c
    26c0:	ad 87       	std	Y+13, r26	; 0x0d
    26c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	4a e7       	ldi	r20, 0x7A	; 122
    26d2:	53 e4       	ldi	r21, 0x43	; 67
    26d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	8f 83       	std	Y+7, r24	; 0x07
    26de:	98 87       	std	Y+8, r25	; 0x08
    26e0:	a9 87       	std	Y+9, r26	; 0x09
    26e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e4:	6f 81       	ldd	r22, Y+7	; 0x07
    26e6:	78 85       	ldd	r23, Y+8	; 0x08
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e8       	ldi	r20, 0x80	; 128
    26f2:	5f e3       	ldi	r21, 0x3F	; 63
    26f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f8:	88 23       	and	r24, r24
    26fa:	2c f4       	brge	.+10     	; 0x2706 <LCD_Set_DD_Add+0x6e>
		__ticks = 1;
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
    2704:	3f c0       	rjmp	.+126    	; 0x2784 <LCD_Set_DD_Add+0xec>
	else if (__tmp > 65535)
    2706:	6f 81       	ldd	r22, Y+7	; 0x07
    2708:	78 85       	ldd	r23, Y+8	; 0x08
    270a:	89 85       	ldd	r24, Y+9	; 0x09
    270c:	9a 85       	ldd	r25, Y+10	; 0x0a
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	3f ef       	ldi	r19, 0xFF	; 255
    2712:	4f e7       	ldi	r20, 0x7F	; 127
    2714:	57 e4       	ldi	r21, 0x47	; 71
    2716:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271a:	18 16       	cp	r1, r24
    271c:	4c f5       	brge	.+82     	; 0x2770 <LCD_Set_DD_Add+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2720:	7c 85       	ldd	r23, Y+12	; 0x0c
    2722:	8d 85       	ldd	r24, Y+13	; 0x0d
    2724:	9e 85       	ldd	r25, Y+14	; 0x0e
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e2       	ldi	r20, 0x20	; 32
    272c:	51 e4       	ldi	r21, 0x41	; 65
    272e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	bc 01       	movw	r22, r24
    2738:	cd 01       	movw	r24, r26
    273a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	9e 83       	std	Y+6, r25	; 0x06
    2744:	8d 83       	std	Y+5, r24	; 0x05
    2746:	0f c0       	rjmp	.+30     	; 0x2766 <LCD_Set_DD_Add+0xce>
    2748:	89 e1       	ldi	r24, 0x19	; 25
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9c 83       	std	Y+4, r25	; 0x04
    274e:	8b 83       	std	Y+3, r24	; 0x03
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	9c 81       	ldd	r25, Y+4	; 0x04
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <LCD_Set_DD_Add+0xbc>
    2758:	9c 83       	std	Y+4, r25	; 0x04
    275a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275c:	8d 81       	ldd	r24, Y+5	; 0x05
    275e:	9e 81       	ldd	r25, Y+6	; 0x06
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2766:	8d 81       	ldd	r24, Y+5	; 0x05
    2768:	9e 81       	ldd	r25, Y+6	; 0x06
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	69 f7       	brne	.-38     	; 0x2748 <LCD_Set_DD_Add+0xb0>
    276e:	14 c0       	rjmp	.+40     	; 0x2798 <LCD_Set_DD_Add+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2770:	6f 81       	ldd	r22, Y+7	; 0x07
    2772:	78 85       	ldd	r23, Y+8	; 0x08
    2774:	89 85       	ldd	r24, Y+9	; 0x09
    2776:	9a 85       	ldd	r25, Y+10	; 0x0a
    2778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	9e 83       	std	Y+6, r25	; 0x06
    2782:	8d 83       	std	Y+5, r24	; 0x05
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	9a 83       	std	Y+2, r25	; 0x02
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_Set_DD_Add+0xf8>
    2794:	9a 83       	std	Y+2, r25	; 0x02
    2796:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2798:	2f 96       	adiw	r28, 0x0f	; 15
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <LCD_Arabic_Dict>:


void LCD_Arabic_Dict(u8 charact)
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <LCD_Arabic_Dict+0x6>
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <LCD_Arabic_Dict+0x8>
    27b2:	0f 92       	push	r0
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	8b 83       	std	Y+3, r24	; 0x03
	LCD_Set_CG_Add(0x40+8*charact_number);
    27ba:	80 91 70 00 	lds	r24, 0x0070
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	08 96       	adiw	r24, 0x08	; 8
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	88 0f       	add	r24, r24
    27ce:	99 1f       	adc	r25, r25
    27d0:	0e 94 ab 11 	call	0x2356	; 0x2356 <LCD_Set_CG_Add>
	switch (charact)
    27d4:	8b 81       	ldd	r24, Y+3	; 0x03
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	3d 83       	std	Y+5, r19	; 0x05
    27dc:	2c 83       	std	Y+4, r18	; 0x04
    27de:	8c 81       	ldd	r24, Y+4	; 0x04
    27e0:	9d 81       	ldd	r25, Y+5	; 0x05
    27e2:	8e 30       	cpi	r24, 0x0E	; 14
    27e4:	91 05       	cpc	r25, r1
    27e6:	09 f4       	brne	.+2      	; 0x27ea <LCD_Arabic_Dict+0x40>
    27e8:	fc c1       	rjmp	.+1016   	; 0x2be2 <LCD_Arabic_Dict+0x438>
    27ea:	2c 81       	ldd	r18, Y+4	; 0x04
    27ec:	3d 81       	ldd	r19, Y+5	; 0x05
    27ee:	2f 30       	cpi	r18, 0x0F	; 15
    27f0:	31 05       	cpc	r19, r1
    27f2:	0c f0       	brlt	.+2      	; 0x27f6 <LCD_Arabic_Dict+0x4c>
    27f4:	55 c0       	rjmp	.+170    	; 0x28a0 <LCD_Arabic_Dict+0xf6>
    27f6:	8c 81       	ldd	r24, Y+4	; 0x04
    27f8:	9d 81       	ldd	r25, Y+5	; 0x05
    27fa:	87 30       	cpi	r24, 0x07	; 7
    27fc:	91 05       	cpc	r25, r1
    27fe:	09 f4       	brne	.+2      	; 0x2802 <LCD_Arabic_Dict+0x58>
    2800:	41 c1       	rjmp	.+642    	; 0x2a84 <LCD_Arabic_Dict+0x2da>
    2802:	2c 81       	ldd	r18, Y+4	; 0x04
    2804:	3d 81       	ldd	r19, Y+5	; 0x05
    2806:	28 30       	cpi	r18, 0x08	; 8
    2808:	31 05       	cpc	r19, r1
    280a:	2c f5       	brge	.+74     	; 0x2856 <LCD_Arabic_Dict+0xac>
    280c:	8c 81       	ldd	r24, Y+4	; 0x04
    280e:	9d 81       	ldd	r25, Y+5	; 0x05
    2810:	83 30       	cpi	r24, 0x03	; 3
    2812:	91 05       	cpc	r25, r1
    2814:	09 f4       	brne	.+2      	; 0x2818 <LCD_Arabic_Dict+0x6e>
    2816:	d2 c0       	rjmp	.+420    	; 0x29bc <LCD_Arabic_Dict+0x212>
    2818:	2c 81       	ldd	r18, Y+4	; 0x04
    281a:	3d 81       	ldd	r19, Y+5	; 0x05
    281c:	24 30       	cpi	r18, 0x04	; 4
    281e:	31 05       	cpc	r19, r1
    2820:	6c f4       	brge	.+26     	; 0x283c <LCD_Arabic_Dict+0x92>
    2822:	8c 81       	ldd	r24, Y+4	; 0x04
    2824:	9d 81       	ldd	r25, Y+5	; 0x05
    2826:	81 30       	cpi	r24, 0x01	; 1
    2828:	91 05       	cpc	r25, r1
    282a:	09 f4       	brne	.+2      	; 0x282e <LCD_Arabic_Dict+0x84>
    282c:	94 c0       	rjmp	.+296    	; 0x2956 <LCD_Arabic_Dict+0x1ac>
    282e:	2c 81       	ldd	r18, Y+4	; 0x04
    2830:	3d 81       	ldd	r19, Y+5	; 0x05
    2832:	22 30       	cpi	r18, 0x02	; 2
    2834:	31 05       	cpc	r19, r1
    2836:	09 f4       	brne	.+2      	; 0x283a <LCD_Arabic_Dict+0x90>
    2838:	a8 c0       	rjmp	.+336    	; 0x298a <LCD_Arabic_Dict+0x1e0>
    283a:	49 c3       	rjmp	.+1682   	; 0x2ece <LCD_Arabic_Dict+0x724>
    283c:	8c 81       	ldd	r24, Y+4	; 0x04
    283e:	9d 81       	ldd	r25, Y+5	; 0x05
    2840:	85 30       	cpi	r24, 0x05	; 5
    2842:	91 05       	cpc	r25, r1
    2844:	09 f4       	brne	.+2      	; 0x2848 <LCD_Arabic_Dict+0x9e>
    2846:	ec c0       	rjmp	.+472    	; 0x2a20 <LCD_Arabic_Dict+0x276>
    2848:	2c 81       	ldd	r18, Y+4	; 0x04
    284a:	3d 81       	ldd	r19, Y+5	; 0x05
    284c:	26 30       	cpi	r18, 0x06	; 6
    284e:	31 05       	cpc	r19, r1
    2850:	0c f0       	brlt	.+2      	; 0x2854 <LCD_Arabic_Dict+0xaa>
    2852:	ff c0       	rjmp	.+510    	; 0x2a52 <LCD_Arabic_Dict+0x2a8>
    2854:	cc c0       	rjmp	.+408    	; 0x29ee <LCD_Arabic_Dict+0x244>
    2856:	8c 81       	ldd	r24, Y+4	; 0x04
    2858:	9d 81       	ldd	r25, Y+5	; 0x05
    285a:	8a 30       	cpi	r24, 0x0A	; 10
    285c:	91 05       	cpc	r25, r1
    285e:	09 f4       	brne	.+2      	; 0x2862 <LCD_Arabic_Dict+0xb8>
    2860:	5c c1       	rjmp	.+696    	; 0x2b1a <LCD_Arabic_Dict+0x370>
    2862:	2c 81       	ldd	r18, Y+4	; 0x04
    2864:	3d 81       	ldd	r19, Y+5	; 0x05
    2866:	2b 30       	cpi	r18, 0x0B	; 11
    2868:	31 05       	cpc	r19, r1
    286a:	6c f4       	brge	.+26     	; 0x2886 <LCD_Arabic_Dict+0xdc>
    286c:	8c 81       	ldd	r24, Y+4	; 0x04
    286e:	9d 81       	ldd	r25, Y+5	; 0x05
    2870:	88 30       	cpi	r24, 0x08	; 8
    2872:	91 05       	cpc	r25, r1
    2874:	09 f4       	brne	.+2      	; 0x2878 <LCD_Arabic_Dict+0xce>
    2876:	1f c1       	rjmp	.+574    	; 0x2ab6 <LCD_Arabic_Dict+0x30c>
    2878:	2c 81       	ldd	r18, Y+4	; 0x04
    287a:	3d 81       	ldd	r19, Y+5	; 0x05
    287c:	29 30       	cpi	r18, 0x09	; 9
    287e:	31 05       	cpc	r19, r1
    2880:	09 f4       	brne	.+2      	; 0x2884 <LCD_Arabic_Dict+0xda>
    2882:	32 c1       	rjmp	.+612    	; 0x2ae8 <LCD_Arabic_Dict+0x33e>
    2884:	24 c3       	rjmp	.+1608   	; 0x2ece <LCD_Arabic_Dict+0x724>
    2886:	8c 81       	ldd	r24, Y+4	; 0x04
    2888:	9d 81       	ldd	r25, Y+5	; 0x05
    288a:	8c 30       	cpi	r24, 0x0C	; 12
    288c:	91 05       	cpc	r25, r1
    288e:	09 f4       	brne	.+2      	; 0x2892 <LCD_Arabic_Dict+0xe8>
    2890:	76 c1       	rjmp	.+748    	; 0x2b7e <LCD_Arabic_Dict+0x3d4>
    2892:	2c 81       	ldd	r18, Y+4	; 0x04
    2894:	3d 81       	ldd	r19, Y+5	; 0x05
    2896:	2d 30       	cpi	r18, 0x0D	; 13
    2898:	31 05       	cpc	r19, r1
    289a:	0c f0       	brlt	.+2      	; 0x289e <LCD_Arabic_Dict+0xf4>
    289c:	89 c1       	rjmp	.+786    	; 0x2bb0 <LCD_Arabic_Dict+0x406>
    289e:	56 c1       	rjmp	.+684    	; 0x2b4c <LCD_Arabic_Dict+0x3a2>
    28a0:	8c 81       	ldd	r24, Y+4	; 0x04
    28a2:	9d 81       	ldd	r25, Y+5	; 0x05
    28a4:	85 31       	cpi	r24, 0x15	; 21
    28a6:	91 05       	cpc	r25, r1
    28a8:	09 f4       	brne	.+2      	; 0x28ac <LCD_Arabic_Dict+0x102>
    28aa:	4a c2       	rjmp	.+1172   	; 0x2d40 <LCD_Arabic_Dict+0x596>
    28ac:	2c 81       	ldd	r18, Y+4	; 0x04
    28ae:	3d 81       	ldd	r19, Y+5	; 0x05
    28b0:	26 31       	cpi	r18, 0x16	; 22
    28b2:	31 05       	cpc	r19, r1
    28b4:	2c f5       	brge	.+74     	; 0x2900 <LCD_Arabic_Dict+0x156>
    28b6:	8c 81       	ldd	r24, Y+4	; 0x04
    28b8:	9d 81       	ldd	r25, Y+5	; 0x05
    28ba:	81 31       	cpi	r24, 0x11	; 17
    28bc:	91 05       	cpc	r25, r1
    28be:	09 f4       	brne	.+2      	; 0x28c2 <LCD_Arabic_Dict+0x118>
    28c0:	db c1       	rjmp	.+950    	; 0x2c78 <LCD_Arabic_Dict+0x4ce>
    28c2:	2c 81       	ldd	r18, Y+4	; 0x04
    28c4:	3d 81       	ldd	r19, Y+5	; 0x05
    28c6:	22 31       	cpi	r18, 0x12	; 18
    28c8:	31 05       	cpc	r19, r1
    28ca:	6c f4       	brge	.+26     	; 0x28e6 <LCD_Arabic_Dict+0x13c>
    28cc:	8c 81       	ldd	r24, Y+4	; 0x04
    28ce:	9d 81       	ldd	r25, Y+5	; 0x05
    28d0:	8f 30       	cpi	r24, 0x0F	; 15
    28d2:	91 05       	cpc	r25, r1
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <LCD_Arabic_Dict+0x12e>
    28d6:	9e c1       	rjmp	.+828    	; 0x2c14 <LCD_Arabic_Dict+0x46a>
    28d8:	2c 81       	ldd	r18, Y+4	; 0x04
    28da:	3d 81       	ldd	r19, Y+5	; 0x05
    28dc:	20 31       	cpi	r18, 0x10	; 16
    28de:	31 05       	cpc	r19, r1
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <LCD_Arabic_Dict+0x13a>
    28e2:	b1 c1       	rjmp	.+866    	; 0x2c46 <LCD_Arabic_Dict+0x49c>
    28e4:	f4 c2       	rjmp	.+1512   	; 0x2ece <LCD_Arabic_Dict+0x724>
    28e6:	8c 81       	ldd	r24, Y+4	; 0x04
    28e8:	9d 81       	ldd	r25, Y+5	; 0x05
    28ea:	83 31       	cpi	r24, 0x13	; 19
    28ec:	91 05       	cpc	r25, r1
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <LCD_Arabic_Dict+0x148>
    28f0:	f5 c1       	rjmp	.+1002   	; 0x2cdc <LCD_Arabic_Dict+0x532>
    28f2:	2c 81       	ldd	r18, Y+4	; 0x04
    28f4:	3d 81       	ldd	r19, Y+5	; 0x05
    28f6:	24 31       	cpi	r18, 0x14	; 20
    28f8:	31 05       	cpc	r19, r1
    28fa:	0c f0       	brlt	.+2      	; 0x28fe <LCD_Arabic_Dict+0x154>
    28fc:	08 c2       	rjmp	.+1040   	; 0x2d0e <LCD_Arabic_Dict+0x564>
    28fe:	d5 c1       	rjmp	.+938    	; 0x2caa <LCD_Arabic_Dict+0x500>
    2900:	8c 81       	ldd	r24, Y+4	; 0x04
    2902:	9d 81       	ldd	r25, Y+5	; 0x05
    2904:	89 31       	cpi	r24, 0x19	; 25
    2906:	91 05       	cpc	r25, r1
    2908:	09 f4       	brne	.+2      	; 0x290c <LCD_Arabic_Dict+0x162>
    290a:	7e c2       	rjmp	.+1276   	; 0x2e08 <LCD_Arabic_Dict+0x65e>
    290c:	2c 81       	ldd	r18, Y+4	; 0x04
    290e:	3d 81       	ldd	r19, Y+5	; 0x05
    2910:	2a 31       	cpi	r18, 0x1A	; 26
    2912:	31 05       	cpc	r19, r1
    2914:	6c f4       	brge	.+26     	; 0x2930 <LCD_Arabic_Dict+0x186>
    2916:	8c 81       	ldd	r24, Y+4	; 0x04
    2918:	9d 81       	ldd	r25, Y+5	; 0x05
    291a:	87 31       	cpi	r24, 0x17	; 23
    291c:	91 05       	cpc	r25, r1
    291e:	09 f4       	brne	.+2      	; 0x2922 <LCD_Arabic_Dict+0x178>
    2920:	41 c2       	rjmp	.+1154   	; 0x2da4 <LCD_Arabic_Dict+0x5fa>
    2922:	2c 81       	ldd	r18, Y+4	; 0x04
    2924:	3d 81       	ldd	r19, Y+5	; 0x05
    2926:	28 31       	cpi	r18, 0x18	; 24
    2928:	31 05       	cpc	r19, r1
    292a:	0c f0       	brlt	.+2      	; 0x292e <LCD_Arabic_Dict+0x184>
    292c:	54 c2       	rjmp	.+1192   	; 0x2dd6 <LCD_Arabic_Dict+0x62c>
    292e:	21 c2       	rjmp	.+1090   	; 0x2d72 <LCD_Arabic_Dict+0x5c8>
    2930:	8c 81       	ldd	r24, Y+4	; 0x04
    2932:	9d 81       	ldd	r25, Y+5	; 0x05
    2934:	8b 31       	cpi	r24, 0x1B	; 27
    2936:	91 05       	cpc	r25, r1
    2938:	09 f4       	brne	.+2      	; 0x293c <LCD_Arabic_Dict+0x192>
    293a:	98 c2       	rjmp	.+1328   	; 0x2e6c <LCD_Arabic_Dict+0x6c2>
    293c:	2c 81       	ldd	r18, Y+4	; 0x04
    293e:	3d 81       	ldd	r19, Y+5	; 0x05
    2940:	2b 31       	cpi	r18, 0x1B	; 27
    2942:	31 05       	cpc	r19, r1
    2944:	0c f4       	brge	.+2      	; 0x2948 <LCD_Arabic_Dict+0x19e>
    2946:	79 c2       	rjmp	.+1266   	; 0x2e3a <LCD_Arabic_Dict+0x690>
    2948:	8c 81       	ldd	r24, Y+4	; 0x04
    294a:	9d 81       	ldd	r25, Y+5	; 0x05
    294c:	8c 31       	cpi	r24, 0x1C	; 28
    294e:	91 05       	cpc	r25, r1
    2950:	09 f4       	brne	.+2      	; 0x2954 <LCD_Arabic_Dict+0x1aa>
    2952:	a5 c2       	rjmp	.+1354   	; 0x2e9e <LCD_Arabic_Dict+0x6f4>
    2954:	bc c2       	rjmp	.+1400   	; 0x2ece <LCD_Arabic_Dict+0x724>
	{
	int count;
	case 1:
		/* alf */
	    for(count=0;count<5;count++)
    2956:	1a 82       	std	Y+2, r1	; 0x02
    2958:	19 82       	std	Y+1, r1	; 0x01
    295a:	08 c0       	rjmp	.+16     	; 0x296c <LCD_Arabic_Dict+0x1c2>
	    	LCD_WriteData(0x04);
    295c:	84 e0       	ldi	r24, 0x04	; 4
    295e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	switch (charact)
	{
	int count;
	case 1:
		/* alf */
	    for(count=0;count<5;count++)
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	9a 81       	ldd	r25, Y+2	; 0x02
    2966:	01 96       	adiw	r24, 0x01	; 1
    2968:	9a 83       	std	Y+2, r25	; 0x02
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	9a 81       	ldd	r25, Y+2	; 0x02
    2970:	85 30       	cpi	r24, 0x05	; 5
    2972:	91 05       	cpc	r25, r1
    2974:	9c f3       	brlt	.-26     	; 0x295c <LCD_Arabic_Dict+0x1b2>
	    	LCD_WriteData(0x04);
	    LCD_WriteData(0x07);
    2976:	87 e0       	ldi	r24, 0x07	; 7
    2978:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2988:	a2 c2       	rjmp	.+1348   	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 2:
		/* ba2 */
	    LCD_WriteData(0x00);
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0xff);
    29a8:	8f ef       	ldi	r24, 0xFF	; 255
    29aa:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    29ba:	89 c2       	rjmp	.+1298   	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 3:
		/* ta2 */
	    LCD_WriteData(0x00);
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0xf5);
    29ce:	85 ef       	ldi	r24, 0xF5	; 245
    29d0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0xff);
    29da:	8f ef       	ldi	r24, 0xFF	; 255
    29dc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    29ec:	70 c2       	rjmp	.+1248   	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 4:
		/* tha2 */
	    LCD_WriteData(0x00);
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x08);
    29fa:	88 e0       	ldi	r24, 0x08	; 8
    29fc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0xf5);
    2a00:	85 ef       	ldi	r24, 0xF5	; 245
    2a02:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0xff);
    2a0c:	8f ef       	ldi	r24, 0xFF	; 255
    2a0e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2a1e:	57 c2       	rjmp	.+1198   	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 5:
		/* gem */
	    LCD_WriteData(0x00);
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x0c);
    2a2c:	8c e0       	ldi	r24, 0x0C	; 12
    2a2e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0xf2);
    2a32:	82 ef       	ldi	r24, 0xF2	; 242
    2a34:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0xff);
    2a3e:	8f ef       	ldi	r24, 0xFF	; 255
    2a40:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2a50:	3e c2       	rjmp	.+1148   	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 6:
		/* 7a2 */
	    LCD_WriteData(0x00);
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x0c);
    2a5e:	8c e0       	ldi	r24, 0x0C	; 12
    2a60:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0xf2);
    2a64:	82 ef       	ldi	r24, 0xF2	; 242
    2a66:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0xff);
    2a70:	8f ef       	ldi	r24, 0xFF	; 255
    2a72:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2a82:	25 c2       	rjmp	.+1098   	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 7:
		/* kha2 */
	    LCD_WriteData(0x04);
    2a84:	84 e0       	ldi	r24, 0x04	; 4
    2a86:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x0c);
    2a90:	8c e0       	ldi	r24, 0x0C	; 12
    2a92:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0xf2);
    2a96:	82 ef       	ldi	r24, 0xF2	; 242
    2a98:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0xff);
    2aa2:	8f ef       	ldi	r24, 0xFF	; 255
    2aa4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2ab4:	0c c2       	rjmp	.+1048   	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 8:
		/* dal */
	    LCD_WriteData(0x00);
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x0f);
    2ad4:	8f e0       	ldi	r24, 0x0F	; 15
    2ad6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2ae6:	f3 c1       	rjmp	.+998    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 9:
		/* zal */
	    LCD_WriteData(0x00);
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x0f);
    2b06:	8f e0       	ldi	r24, 0x0F	; 15
    2b08:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2b18:	da c1       	rjmp	.+948    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 10:
		/* ra2 */
	    LCD_WriteData(0x00);
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2b38:	83 e0       	ldi	r24, 0x03	; 3
    2b3a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x02);
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x04);
    2b44:	84 e0       	ldi	r24, 0x04	; 4
    2b46:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2b4a:	c1 c1       	rjmp	.+898    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 11:
		/* zan */
	    LCD_WriteData(0x00);
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x02);
    2b5e:	82 e0       	ldi	r24, 0x02	; 2
    2b60:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2b6a:	83 e0       	ldi	r24, 0x03	; 3
    2b6c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x02);
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x04);
    2b76:	84 e0       	ldi	r24, 0x04	; 4
    2b78:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2b7c:	a8 c1       	rjmp	.+848    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 12:
		/* seen */
	    LCD_WriteData(0x00);
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x15);
    2b90:	85 e1       	ldi	r24, 0x15	; 21
    2b92:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x15);
    2b96:	85 e1       	ldi	r24, 0x15	; 21
    2b98:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2b9c:	8f e1       	ldi	r24, 0x1F	; 31
    2b9e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2bae:	8f c1       	rjmp	.+798    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 13:
		/* sheen */
	    LCD_WriteData(0x04);
    2bb0:	84 e0       	ldi	r24, 0x04	; 4
    2bb2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x0a);
    2bb6:	8a e0       	ldi	r24, 0x0A	; 10
    2bb8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x15);
    2bc2:	85 e1       	ldi	r24, 0x15	; 21
    2bc4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x15);
    2bc8:	85 e1       	ldi	r24, 0x15	; 21
    2bca:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2bce:	8f e1       	ldi	r24, 0x1F	; 31
    2bd0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2be0:	76 c1       	rjmp	.+748    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 14:
		/* saad */
	    LCD_WriteData(0x00);
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x06);
    2bf4:	86 e0       	ldi	r24, 0x06	; 6
    2bf6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x09);
    2bfa:	89 e0       	ldi	r24, 0x09	; 9
    2bfc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2c00:	8f e1       	ldi	r24, 0x1F	; 31
    2c02:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2c12:	5d c1       	rjmp	.+698    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 15:
		/* daad */
	    LCD_WriteData(0x00);
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x04);
    2c1a:	84 e0       	ldi	r24, 0x04	; 4
    2c1c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x06);
    2c26:	86 e0       	ldi	r24, 0x06	; 6
    2c28:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x09);
    2c2c:	89 e0       	ldi	r24, 0x09	; 9
    2c2e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2c32:	8f e1       	ldi	r24, 0x1F	; 31
    2c34:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2c44:	44 c1       	rjmp	.+648    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 16:
		/* taah */
	    LCD_WriteData(0x00);
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2c4c:	88 e0       	ldi	r24, 0x08	; 8
    2c4e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2c52:	88 e0       	ldi	r24, 0x08	; 8
    2c54:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x0e);
    2c58:	8e e0       	ldi	r24, 0x0E	; 14
    2c5a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x09);
    2c5e:	89 e0       	ldi	r24, 0x09	; 9
    2c60:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2c64:	8f e1       	ldi	r24, 0x1F	; 31
    2c66:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2c76:	2b c1       	rjmp	.+598    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 17:
	    /* zaah */
	    LCD_WriteData(0x00);
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x0a);
    2c7e:	8a e0       	ldi	r24, 0x0A	; 10
    2c80:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2c84:	88 e0       	ldi	r24, 0x08	; 8
    2c86:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x0e);
    2c8a:	8e e0       	ldi	r24, 0x0E	; 14
    2c8c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x09);
    2c90:	89 e0       	ldi	r24, 0x09	; 9
    2c92:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2c96:	8f e1       	ldi	r24, 0x1F	; 31
    2c98:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2ca8:	12 c1       	rjmp	.+548    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 18:
		/* 3een */
	    LCD_WriteData(0x00);
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x07);
    2cb6:	87 e0       	ldi	r24, 0x07	; 7
    2cb8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2cbc:	88 e0       	ldi	r24, 0x08	; 8
    2cbe:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2cc2:	88 e0       	ldi	r24, 0x08	; 8
    2cc4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2cc8:	8f e1       	ldi	r24, 0x1F	; 31
    2cca:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2cda:	f9 c0       	rjmp	.+498    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 19:
		/* 3'een */
	    LCD_WriteData(0x04);
    2cdc:	84 e0       	ldi	r24, 0x04	; 4
    2cde:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x07);
    2ce8:	87 e0       	ldi	r24, 0x07	; 7
    2cea:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2cee:	88 e0       	ldi	r24, 0x08	; 8
    2cf0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2cf4:	88 e0       	ldi	r24, 0x08	; 8
    2cf6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2cfa:	8f e1       	ldi	r24, 0x1F	; 31
    2cfc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2d0c:	e0 c0       	rjmp	.+448    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 20:
		/* faa2 */
	    LCD_WriteData(0x02);
    2d0e:	82 e0       	ldi	r24, 0x02	; 2
    2d10:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2d1a:	83 e0       	ldi	r24, 0x03	; 3
    2d1c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2d20:	83 e0       	ldi	r24, 0x03	; 3
    2d22:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2d2c:	8f e1       	ldi	r24, 0x1F	; 31
    2d2e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2d3e:	c7 c0       	rjmp	.+398    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 21:
		/* k'aaf */
	    LCD_WriteData(0x03);
    2d40:	83 e0       	ldi	r24, 0x03	; 3
    2d42:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2d4c:	83 e0       	ldi	r24, 0x03	; 3
    2d4e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2d52:	83 e0       	ldi	r24, 0x03	; 3
    2d54:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2d5e:	8f e1       	ldi	r24, 0x1F	; 31
    2d60:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2d70:	ae c0       	rjmp	.+348    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 22:
		/* kaaf */
	    LCD_WriteData(0x00);
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x0f);
    2d78:	8f e0       	ldi	r24, 0x0F	; 15
    2d7a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x04);
    2d7e:	84 e0       	ldi	r24, 0x04	; 4
    2d80:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x02);
    2d84:	82 e0       	ldi	r24, 0x02	; 2
    2d86:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2d90:	8f e1       	ldi	r24, 0x1F	; 31
    2d92:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2da2:	95 c0       	rjmp	.+298    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 23:
		/* laam */
	    LCD_WriteData(0x00);
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2dc2:	8f e1       	ldi	r24, 0x1F	; 31
    2dc4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2dd4:	7c c0       	rjmp	.+248    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 24:
		/* meem */
	    LCD_WriteData(0x00);
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2dee:	83 e0       	ldi	r24, 0x03	; 3
    2df0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2df4:	8f e1       	ldi	r24, 0x1F	; 31
    2df6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2dfa:	83 e0       	ldi	r24, 0x03	; 3
    2dfc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2e06:	63 c0       	rjmp	.+198    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 25:
		/* noon */
	    LCD_WriteData(0x00);
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x05);
    2e1a:	85 e0       	ldi	r24, 0x05	; 5
    2e1c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2e26:	8f e1       	ldi	r24, 0x1F	; 31
    2e28:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2e38:	4a c0       	rjmp	.+148    	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 26:
		/* heeh */
	    LCD_WriteData(0x00);
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x06);
    2e52:	86 e0       	ldi	r24, 0x06	; 6
    2e54:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2e58:	8f e1       	ldi	r24, 0x1F	; 31
    2e5a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x06);
    2e5e:	86 e0       	ldi	r24, 0x06	; 6
    2e60:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2e6a:	31 c0       	rjmp	.+98     	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 27:
		/* waaw */
	    LCD_WriteData(0x00);
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2e84:	83 e0       	ldi	r24, 0x03	; 3
    2e86:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2e8a:	83 e0       	ldi	r24, 0x03	; 3
    2e8c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x02);
    2e96:	82 e0       	ldi	r24, 0x02	; 2
    2e98:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
    2e9c:	18 c0       	rjmp	.+48     	; 0x2ece <LCD_Arabic_Dict+0x724>
	    break;

	case 28:
		/* yaah */
	    LCD_WriteData(0x00);
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2ebc:	8f e1       	ldi	r24, 0x1F	; 31
    2ebe:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    LCD_WriteData(0x0a);
    2ec8:	8a e0       	ldi	r24, 0x0A	; 10
    2eca:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	}
	English_Char-=8;
    2ece:	80 91 72 00 	lds	r24, 0x0072
    2ed2:	88 50       	subi	r24, 0x08	; 8
    2ed4:	80 93 72 00 	sts	0x0072, r24
	LCD_Set_DD_Add(0x80+charact_number+English_Char);
    2ed8:	90 91 70 00 	lds	r25, 0x0070
    2edc:	80 91 72 00 	lds	r24, 0x0072
    2ee0:	89 0f       	add	r24, r25
    2ee2:	80 58       	subi	r24, 0x80	; 128
    2ee4:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_Set_DD_Add>

}
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	08 95       	ret

00002ef8 <LCD_WriteArabicData>:
void LCD_WriteArabicData(u8 data)
{
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	0f 92       	push	r0
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	89 83       	std	Y+1, r24	; 0x01
	if(!(IS_WRITTEN(data)))
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <IS_WRITTEN>
    2f0a:	88 23       	and	r24, r24
    2f0c:	99 f4       	brne	.+38     	; 0x2f34 <LCD_WriteArabicData+0x3c>
	{
		LCD_Arabic_Dict(data);
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_Arabic_Dict>
		LCD_WriteData(charact_number);
    2f14:	80 91 70 00 	lds	r24, 0x0070
    2f18:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	    charact_number++;
    2f1c:	80 91 70 00 	lds	r24, 0x0070
    2f20:	8f 5f       	subi	r24, 0xFF	; 255
    2f22:	80 93 70 00 	sts	0x0070, r24
	    if(charact_number>7)
    2f26:	80 91 70 00 	lds	r24, 0x0070
    2f2a:	88 30       	cpi	r24, 0x08	; 8
    2f2c:	38 f0       	brcs	.+14     	; 0x2f3c <LCD_WriteArabicData+0x44>
	    	charact_number=0;
    2f2e:	10 92 70 00 	sts	0x0070, r1
    2f32:	04 c0       	rjmp	.+8      	; 0x2f3c <LCD_WriteArabicData+0x44>
	}
	else
		LCD_WriteData(current_charact);
    2f34:	80 91 71 00 	lds	r24, 0x0071
    2f38:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
	English_Char--;
    2f3c:	80 91 72 00 	lds	r24, 0x0072
    2f40:	81 50       	subi	r24, 0x01	; 1
    2f42:	80 93 72 00 	sts	0x0072, r24

}
    2f46:	0f 90       	pop	r0
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <IS_WRITTEN>:

u8 IS_WRITTEN(u8 data)
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <IS_WRITTEN+0x6>
    2f54:	00 d0       	rcall	.+0      	; 0x2f56 <IS_WRITTEN+0x8>
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    2f5a:	8b 83       	std	Y+3, r24	; 0x03
	int count;
	for(count=0;count<8;count++)
    2f5c:	1a 82       	std	Y+2, r1	; 0x02
    2f5e:	19 82       	std	Y+1, r1	; 0x01
    2f60:	14 c0       	rjmp	.+40     	; 0x2f8a <IS_WRITTEN+0x3c>
		if(charact_prev[count]==data)
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	9a 81       	ldd	r25, Y+2	; 0x02
    2f66:	fc 01       	movw	r30, r24
    2f68:	e8 59       	subi	r30, 0x98	; 152
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	90 81       	ld	r25, Z
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	98 17       	cp	r25, r24
    2f72:	31 f4       	brne	.+12     	; 0x2f80 <IS_WRITTEN+0x32>
		{
			current_charact=count;
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	80 93 71 00 	sts	0x0071, r24
			return 1;
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	8c 83       	std	Y+4, r24	; 0x04
    2f7e:	14 c0       	rjmp	.+40     	; 0x2fa8 <IS_WRITTEN+0x5a>
}

u8 IS_WRITTEN(u8 data)
{
	int count;
	for(count=0;count<8;count++)
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	9a 81       	ldd	r25, Y+2	; 0x02
    2f84:	01 96       	adiw	r24, 0x01	; 1
    2f86:	9a 83       	std	Y+2, r25	; 0x02
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8e:	88 30       	cpi	r24, 0x08	; 8
    2f90:	91 05       	cpc	r25, r1
    2f92:	3c f3       	brlt	.-50     	; 0x2f62 <IS_WRITTEN+0x14>
		if(charact_prev[count]==data)
		{
			current_charact=count;
			return 1;
		}
	charact_prev[charact_number]=data;
    2f94:	80 91 70 00 	lds	r24, 0x0070
    2f98:	88 2f       	mov	r24, r24
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	e8 59       	subi	r30, 0x98	; 152
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	80 83       	st	Z, r24

	return 0;
    2fa6:	1c 82       	std	Y+4, r1	; 0x04
    2fa8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	08 95       	ret

00002fb8 <LCD_WrtireString_Arabic>:

u8 LCD_WrtireString_Arabic(u8* str)
{
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	00 d0       	rcall	.+0      	; 0x2fbe <LCD_WrtireString_Arabic+0x6>
    2fbe:	00 d0       	rcall	.+0      	; 0x2fc0 <LCD_WrtireString_Arabic+0x8>
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <LCD_WrtireString_Arabic+0xa>
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	9d 83       	std	Y+5, r25	; 0x05
    2fc8:	8c 83       	std	Y+4, r24	; 0x04
	if(English_Char>6*16+7)
    2fca:	80 91 72 00 	lds	r24, 0x0072
    2fce:	88 36       	cpi	r24, 0x68	; 104
    2fd0:	10 f0       	brcs	.+4      	; 0x2fd6 <LCD_WrtireString_Arabic+0x1e>
		English_Char=0;
    2fd2:	10 92 72 00 	sts	0x0072, r1

	int count=0;
    2fd6:	1b 82       	std	Y+3, r1	; 0x03
    2fd8:	1a 82       	std	Y+2, r1	; 0x02
	u8 size=0;
    2fda:	19 82       	std	Y+1, r1	; 0x01
    2fdc:	08 c0       	rjmp	.+16     	; 0x2fee <LCD_WrtireString_Arabic+0x36>

	while( (!((*(str+count))=='\0')) && size<=16)
	{
		count++;
    2fde:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe2:	01 96       	adiw	r24, 0x01	; 1
    2fe4:	9b 83       	std	Y+3, r25	; 0x03
    2fe6:	8a 83       	std	Y+2, r24	; 0x02
		size++;
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	8f 5f       	subi	r24, 0xFF	; 255
    2fec:	89 83       	std	Y+1, r24	; 0x01
		English_Char=0;

	int count=0;
	u8 size=0;

	while( (!((*(str+count))=='\0')) && size<=16)
    2fee:	2a 81       	ldd	r18, Y+2	; 0x02
    2ff0:	3b 81       	ldd	r19, Y+3	; 0x03
    2ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	e2 0f       	add	r30, r18
    2ffa:	f3 1f       	adc	r31, r19
    2ffc:	80 81       	ld	r24, Z
    2ffe:	88 23       	and	r24, r24
    3000:	19 f0       	breq	.+6      	; 0x3008 <LCD_WrtireString_Arabic+0x50>
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	81 31       	cpi	r24, 0x11	; 17
    3006:	58 f3       	brcs	.-42     	; 0x2fde <LCD_WrtireString_Arabic+0x26>
	{
		count++;
		size++;
	}

		if(size<=16)
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	81 31       	cpi	r24, 0x11	; 17
    300c:	90 f5       	brcc	.+100    	; 0x3072 <LCD_WrtireString_Arabic+0xba>
		{
			for(count=size-1;count>=0;count--)
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	88 2f       	mov	r24, r24
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	9b 83       	std	Y+3, r25	; 0x03
    3018:	8a 83       	std	Y+2, r24	; 0x02
    301a:	24 c0       	rjmp	.+72     	; 0x3064 <LCD_WrtireString_Arabic+0xac>
			{
				if((*(str+count))<=28)
    301c:	2a 81       	ldd	r18, Y+2	; 0x02
    301e:	3b 81       	ldd	r19, Y+3	; 0x03
    3020:	8c 81       	ldd	r24, Y+4	; 0x04
    3022:	9d 81       	ldd	r25, Y+5	; 0x05
    3024:	fc 01       	movw	r30, r24
    3026:	e2 0f       	add	r30, r18
    3028:	f3 1f       	adc	r31, r19
    302a:	80 81       	ld	r24, Z
    302c:	8d 31       	cpi	r24, 0x1D	; 29
    302e:	58 f4       	brcc	.+22     	; 0x3046 <LCD_WrtireString_Arabic+0x8e>
					LCD_WriteArabicData(*(str+count));
    3030:	2a 81       	ldd	r18, Y+2	; 0x02
    3032:	3b 81       	ldd	r19, Y+3	; 0x03
    3034:	8c 81       	ldd	r24, Y+4	; 0x04
    3036:	9d 81       	ldd	r25, Y+5	; 0x05
    3038:	fc 01       	movw	r30, r24
    303a:	e2 0f       	add	r30, r18
    303c:	f3 1f       	adc	r31, r19
    303e:	80 81       	ld	r24, Z
    3040:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <LCD_WriteArabicData>
    3044:	0a c0       	rjmp	.+20     	; 0x305a <LCD_WrtireString_Arabic+0xa2>
				else
					LCD_WriteData(*(str+count));
    3046:	2a 81       	ldd	r18, Y+2	; 0x02
    3048:	3b 81       	ldd	r19, Y+3	; 0x03
    304a:	8c 81       	ldd	r24, Y+4	; 0x04
    304c:	9d 81       	ldd	r25, Y+5	; 0x05
    304e:	fc 01       	movw	r30, r24
    3050:	e2 0f       	add	r30, r18
    3052:	f3 1f       	adc	r31, r19
    3054:	80 81       	ld	r24, Z
    3056:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_WriteData>
		size++;
	}

		if(size<=16)
		{
			for(count=size-1;count>=0;count--)
    305a:	8a 81       	ldd	r24, Y+2	; 0x02
    305c:	9b 81       	ldd	r25, Y+3	; 0x03
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	9b 83       	std	Y+3, r25	; 0x03
    3062:	8a 83       	std	Y+2, r24	; 0x02
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	9b 81       	ldd	r25, Y+3	; 0x03
    3068:	99 23       	and	r25, r25
    306a:	c4 f6       	brge	.-80     	; 0x301c <LCD_WrtireString_Arabic+0x64>
				if((*(str+count))<=28)
					LCD_WriteArabicData(*(str+count));
				else
					LCD_WriteData(*(str+count));
			}
			return 1;
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	8e 83       	std	Y+6, r24	; 0x06
    3070:	01 c0       	rjmp	.+2      	; 0x3074 <LCD_WrtireString_Arabic+0xbc>
		}
		else
			return 0;
    3072:	1e 82       	std	Y+6, r1	; 0x06
    3074:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3076:	26 96       	adiw	r28, 0x06	; 6
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	08 95       	ret

00003088 <main>:

#include "I2C_Master.h"
#include "avr/delay.h"

int main()
{
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	00 d0       	rcall	.+0      	; 0x308e <main+0x6>
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
	u8 Trans=2,Add=0x20;
    3092:	82 e0       	ldi	r24, 0x02	; 2
    3094:	8a 83       	std	Y+2, r24	; 0x02
    3096:	80 e2       	ldi	r24, 0x20	; 32
    3098:	89 83       	std	Y+1, r24	; 0x01
	I2C_MasterInit();
    309a:	0e 94 07 0c 	call	0x180e	; 0x180e <I2C_MasterInit>

	while(1)
	{
		I2C_MasterStartSequence();
    309e:	0e 94 20 0c 	call	0x1840	; 0x1840 <I2C_MasterStartSequence>
		I2C_MasterSend(Add,Trans);
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	6a 81       	ldd	r22, Y+2	; 0x02
    30a6:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <I2C_MasterSend>
		I2C_MasterStopSequence();
    30aa:	0e 94 9d 0c 	call	0x193a	; 0x193a <I2C_MasterStopSequence>
    30ae:	f7 cf       	rjmp	.-18     	; 0x309e <main+0x16>

000030b0 <__prologue_saves__>:
    30b0:	2f 92       	push	r2
    30b2:	3f 92       	push	r3
    30b4:	4f 92       	push	r4
    30b6:	5f 92       	push	r5
    30b8:	6f 92       	push	r6
    30ba:	7f 92       	push	r7
    30bc:	8f 92       	push	r8
    30be:	9f 92       	push	r9
    30c0:	af 92       	push	r10
    30c2:	bf 92       	push	r11
    30c4:	cf 92       	push	r12
    30c6:	df 92       	push	r13
    30c8:	ef 92       	push	r14
    30ca:	ff 92       	push	r15
    30cc:	0f 93       	push	r16
    30ce:	1f 93       	push	r17
    30d0:	cf 93       	push	r28
    30d2:	df 93       	push	r29
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
    30d8:	ca 1b       	sub	r28, r26
    30da:	db 0b       	sbc	r29, r27
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	f8 94       	cli
    30e0:	de bf       	out	0x3e, r29	; 62
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	cd bf       	out	0x3d, r28	; 61
    30e6:	09 94       	ijmp

000030e8 <__epilogue_restores__>:
    30e8:	2a 88       	ldd	r2, Y+18	; 0x12
    30ea:	39 88       	ldd	r3, Y+17	; 0x11
    30ec:	48 88       	ldd	r4, Y+16	; 0x10
    30ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    30f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    30f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    30f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    30f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    30f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    30fa:	b9 84       	ldd	r11, Y+9	; 0x09
    30fc:	c8 84       	ldd	r12, Y+8	; 0x08
    30fe:	df 80       	ldd	r13, Y+7	; 0x07
    3100:	ee 80       	ldd	r14, Y+6	; 0x06
    3102:	fd 80       	ldd	r15, Y+5	; 0x05
    3104:	0c 81       	ldd	r16, Y+4	; 0x04
    3106:	1b 81       	ldd	r17, Y+3	; 0x03
    3108:	aa 81       	ldd	r26, Y+2	; 0x02
    310a:	b9 81       	ldd	r27, Y+1	; 0x01
    310c:	ce 0f       	add	r28, r30
    310e:	d1 1d       	adc	r29, r1
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	ed 01       	movw	r28, r26
    311c:	08 95       	ret

0000311e <_exit>:
    311e:	f8 94       	cli

00003120 <__stop_program>:
    3120:	ff cf       	rjmp	.-2      	; 0x3120 <__stop_program>
