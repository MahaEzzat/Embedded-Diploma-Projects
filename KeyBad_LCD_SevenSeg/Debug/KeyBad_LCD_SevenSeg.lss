
KeyBad_LCD_SevenSeg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00003fce  00004062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800070  00800070  00004072  2**0
                  ALLOC
  3 .stab         00003c18  00000000  00000000  00004074  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ce0  00000000  00000000  00007c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000896c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a865  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c500  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c8ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d0bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <main>
      8a:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ae 1f 	jmp	0x3f5c	; 0x3f5c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d6 1f 	jmp	0x3fac	; 0x3fac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d6 1f 	jmp	0x3fac	; 0x3fac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ae 1f 	jmp	0x3f5c	; 0x3f5c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d6 1f 	jmp	0x3fac	; 0x3fac <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d6 1f 	jmp	0x3fac	; 0x3fac <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d6 1f 	jmp	0x3fac	; 0x3fac <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 be 1f 	jmp	0x3f7c	; 0x3f7c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_Init>:
#include "Buzzer.h"
#include "DIO.h"
#include "avr/delay.h"

void Buzzer_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDir(PortD,Pin7,Output); /* Set pin 7D as an output pin (buzzer)*/
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidWriteVal(PortD,Pin7,Zero_Volt); /* Set pin 7D to 0V */
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer>:
void Buzzer(u8 u8State)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	0f 92       	push	r0
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidWriteVal(PortD,Pin7,u8State);
     b74:	83 e0       	ldi	r24, 0x03	; 3
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	49 81       	ldd	r20, Y+1	; 0x01
     b7a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
}
     b7e:	0f 90       	pop	r0
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <Buzzer_Mode>:

void Buzzer_Mode(u8 u8Freq1, u8 u8Freq2)
{
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	c8 55       	subi	r28, 0x58	; 88
     b94:	d0 40       	sbci	r29, 0x00	; 0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	fe 01       	movw	r30, r28
     ba2:	e9 5a       	subi	r30, 0xA9	; 169
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	80 83       	st	Z, r24
     ba8:	fe 01       	movw	r30, r28
     baa:	e8 5a       	subi	r30, 0xA8	; 168
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	60 83       	st	Z, r22
		int count;
		for(count=0; count<u8Freq1; count++)
     bb0:	fe 01       	movw	r30, r28
     bb2:	eb 5a       	subi	r30, 0xAB	; 171
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	11 82       	std	Z+1, r1	; 0x01
     bb8:	10 82       	st	Z, r1
     bba:	4a c1       	rjmp	.+660    	; 0xe50 <Buzzer_Mode+0x2ca>
		{
			Buzzer(ON);
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer>
     bc2:	fe 01       	movw	r30, r28
     bc4:	ef 5a       	subi	r30, 0xAF	; 175
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e8       	ldi	r26, 0x80	; 128
     bce:	bf e3       	ldi	r27, 0x3F	; 63
     bd0:	80 83       	st	Z, r24
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	a2 83       	std	Z+2, r26	; 0x02
     bd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd8:	8e 01       	movw	r16, r28
     bda:	03 5b       	subi	r16, 0xB3	; 179
     bdc:	1f 4f       	sbci	r17, 0xFF	; 255
     bde:	fe 01       	movw	r30, r28
     be0:	ef 5a       	subi	r30, 0xAF	; 175
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	60 81       	ld	r22, Z
     be6:	71 81       	ldd	r23, Z+1	; 0x01
     be8:	82 81       	ldd	r24, Z+2	; 0x02
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	4a e7       	ldi	r20, 0x7A	; 122
     bf2:	53 e4       	ldi	r21, 0x43	; 67
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	f8 01       	movw	r30, r16
     bfe:	80 83       	st	Z, r24
     c00:	91 83       	std	Z+1, r25	; 0x01
     c02:	a2 83       	std	Z+2, r26	; 0x02
     c04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c06:	fe 01       	movw	r30, r28
     c08:	e3 5b       	subi	r30, 0xB3	; 179
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	60 81       	ld	r22, Z
     c0e:	71 81       	ldd	r23, Z+1	; 0x01
     c10:	82 81       	ldd	r24, Z+2	; 0x02
     c12:	93 81       	ldd	r25, Z+3	; 0x03
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e8       	ldi	r20, 0x80	; 128
     c1a:	5f e3       	ldi	r21, 0x3F	; 63
     c1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c20:	88 23       	and	r24, r24
     c22:	44 f4       	brge	.+16     	; 0xc34 <Buzzer_Mode+0xae>
		__ticks = 1;
     c24:	fe 01       	movw	r30, r28
     c26:	e5 5b       	subi	r30, 0xB5	; 181
     c28:	ff 4f       	sbci	r31, 0xFF	; 255
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	91 83       	std	Z+1, r25	; 0x01
     c30:	80 83       	st	Z, r24
     c32:	64 c0       	rjmp	.+200    	; 0xcfc <Buzzer_Mode+0x176>
	else if (__tmp > 65535)
     c34:	fe 01       	movw	r30, r28
     c36:	e3 5b       	subi	r30, 0xB3	; 179
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	60 81       	ld	r22, Z
     c3c:	71 81       	ldd	r23, Z+1	; 0x01
     c3e:	82 81       	ldd	r24, Z+2	; 0x02
     c40:	93 81       	ldd	r25, Z+3	; 0x03
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	3f ef       	ldi	r19, 0xFF	; 255
     c46:	4f e7       	ldi	r20, 0x7F	; 127
     c48:	57 e4       	ldi	r21, 0x47	; 71
     c4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c4e:	18 16       	cp	r1, r24
     c50:	0c f0       	brlt	.+2      	; 0xc54 <Buzzer_Mode+0xce>
     c52:	43 c0       	rjmp	.+134    	; 0xcda <Buzzer_Mode+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c54:	fe 01       	movw	r30, r28
     c56:	ef 5a       	subi	r30, 0xAF	; 175
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	60 81       	ld	r22, Z
     c5c:	71 81       	ldd	r23, Z+1	; 0x01
     c5e:	82 81       	ldd	r24, Z+2	; 0x02
     c60:	93 81       	ldd	r25, Z+3	; 0x03
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 e2       	ldi	r20, 0x20	; 32
     c68:	51 e4       	ldi	r21, 0x41	; 65
     c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	8e 01       	movw	r16, r28
     c74:	05 5b       	subi	r16, 0xB5	; 181
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	bc 01       	movw	r22, r24
     c7a:	cd 01       	movw	r24, r26
     c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	f8 01       	movw	r30, r16
     c86:	91 83       	std	Z+1, r25	; 0x01
     c88:	80 83       	st	Z, r24
     c8a:	1f c0       	rjmp	.+62     	; 0xcca <Buzzer_Mode+0x144>
     c8c:	fe 01       	movw	r30, r28
     c8e:	e7 5b       	subi	r30, 0xB7	; 183
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	89 e1       	ldi	r24, 0x19	; 25
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9a:	fe 01       	movw	r30, r28
     c9c:	e7 5b       	subi	r30, 0xB7	; 183
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	f1 f7       	brne	.-4      	; 0xca4 <Buzzer_Mode+0x11e>
     ca8:	fe 01       	movw	r30, r28
     caa:	e7 5b       	subi	r30, 0xB7	; 183
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb2:	de 01       	movw	r26, r28
     cb4:	a5 5b       	subi	r26, 0xB5	; 181
     cb6:	bf 4f       	sbci	r27, 0xFF	; 255
     cb8:	fe 01       	movw	r30, r28
     cba:	e5 5b       	subi	r30, 0xB5	; 181
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	11 96       	adiw	r26, 0x01	; 1
     cc6:	9c 93       	st	X, r25
     cc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cca:	fe 01       	movw	r30, r28
     ccc:	e5 5b       	subi	r30, 0xB5	; 181
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	d1 f6       	brne	.-76     	; 0xc8c <Buzzer_Mode+0x106>
     cd8:	27 c0       	rjmp	.+78     	; 0xd28 <Buzzer_Mode+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cda:	8e 01       	movw	r16, r28
     cdc:	05 5b       	subi	r16, 0xB5	; 181
     cde:	1f 4f       	sbci	r17, 0xFF	; 255
     ce0:	fe 01       	movw	r30, r28
     ce2:	e3 5b       	subi	r30, 0xB3	; 179
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	93 81       	ldd	r25, Z+3	; 0x03
     cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	f8 01       	movw	r30, r16
     cf8:	91 83       	std	Z+1, r25	; 0x01
     cfa:	80 83       	st	Z, r24
     cfc:	de 01       	movw	r26, r28
     cfe:	a9 5b       	subi	r26, 0xB9	; 185
     d00:	bf 4f       	sbci	r27, 0xFF	; 255
     d02:	fe 01       	movw	r30, r28
     d04:	e5 5b       	subi	r30, 0xB5	; 181
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	80 81       	ld	r24, Z
     d0a:	91 81       	ldd	r25, Z+1	; 0x01
     d0c:	8d 93       	st	X+, r24
     d0e:	9c 93       	st	X, r25
     d10:	fe 01       	movw	r30, r28
     d12:	e9 5b       	subi	r30, 0xB9	; 185
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	80 81       	ld	r24, Z
     d18:	91 81       	ldd	r25, Z+1	; 0x01
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <Buzzer_Mode+0x194>
     d1e:	fe 01       	movw	r30, r28
     d20:	e9 5b       	subi	r30, 0xB9	; 185
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	91 83       	std	Z+1, r25	; 0x01
     d26:	80 83       	st	Z, r24
			_delay_ms(1);
			Buzzer(OFF);
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer>
     d2e:	fe 01       	movw	r30, r28
     d30:	ed 5b       	subi	r30, 0xBD	; 189
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	a0 e2       	ldi	r26, 0x20	; 32
     d3a:	b1 e4       	ldi	r27, 0x41	; 65
     d3c:	80 83       	st	Z, r24
     d3e:	91 83       	std	Z+1, r25	; 0x01
     d40:	a2 83       	std	Z+2, r26	; 0x02
     d42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d44:	8e 01       	movw	r16, r28
     d46:	01 5c       	subi	r16, 0xC1	; 193
     d48:	1f 4f       	sbci	r17, 0xFF	; 255
     d4a:	fe 01       	movw	r30, r28
     d4c:	ed 5b       	subi	r30, 0xBD	; 189
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	4a e7       	ldi	r20, 0x7A	; 122
     d5e:	53 e4       	ldi	r21, 0x43	; 67
     d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	f8 01       	movw	r30, r16
     d6a:	80 83       	st	Z, r24
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	a2 83       	std	Z+2, r26	; 0x02
     d70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d72:	fe 01       	movw	r30, r28
     d74:	ff 96       	adiw	r30, 0x3f	; 63
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	93 81       	ldd	r25, Z+3	; 0x03
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e8       	ldi	r20, 0x80	; 128
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d8a:	88 23       	and	r24, r24
     d8c:	2c f4       	brge	.+10     	; 0xd98 <Buzzer_Mode+0x212>
		__ticks = 1;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	9e af       	std	Y+62, r25	; 0x3e
     d94:	8d af       	std	Y+61, r24	; 0x3d
     d96:	46 c0       	rjmp	.+140    	; 0xe24 <Buzzer_Mode+0x29e>
	else if (__tmp > 65535)
     d98:	fe 01       	movw	r30, r28
     d9a:	ff 96       	adiw	r30, 0x3f	; 63
     d9c:	60 81       	ld	r22, Z
     d9e:	71 81       	ldd	r23, Z+1	; 0x01
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	3f ef       	ldi	r19, 0xFF	; 255
     da8:	4f e7       	ldi	r20, 0x7F	; 127
     daa:	57 e4       	ldi	r21, 0x47	; 71
     dac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     db0:	18 16       	cp	r1, r24
     db2:	64 f5       	brge	.+88     	; 0xe0c <Buzzer_Mode+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db4:	fe 01       	movw	r30, r28
     db6:	ed 5b       	subi	r30, 0xBD	; 189
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e2       	ldi	r20, 0x20	; 32
     dc8:	51 e4       	ldi	r21, 0x41	; 65
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	bc 01       	movw	r22, r24
     dd4:	cd 01       	movw	r24, r26
     dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	9e af       	std	Y+62, r25	; 0x3e
     de0:	8d af       	std	Y+61, r24	; 0x3d
     de2:	0f c0       	rjmp	.+30     	; 0xe02 <Buzzer_Mode+0x27c>
     de4:	89 e1       	ldi	r24, 0x19	; 25
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9c af       	std	Y+60, r25	; 0x3c
     dea:	8b af       	std	Y+59, r24	; 0x3b
     dec:	8b ad       	ldd	r24, Y+59	; 0x3b
     dee:	9c ad       	ldd	r25, Y+60	; 0x3c
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <Buzzer_Mode+0x26a>
     df4:	9c af       	std	Y+60, r25	; 0x3c
     df6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df8:	8d ad       	ldd	r24, Y+61	; 0x3d
     dfa:	9e ad       	ldd	r25, Y+62	; 0x3e
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9e af       	std	Y+62, r25	; 0x3e
     e00:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	8d ad       	ldd	r24, Y+61	; 0x3d
     e04:	9e ad       	ldd	r25, Y+62	; 0x3e
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	69 f7       	brne	.-38     	; 0xde4 <Buzzer_Mode+0x25e>
     e0a:	16 c0       	rjmp	.+44     	; 0xe38 <Buzzer_Mode+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0c:	fe 01       	movw	r30, r28
     e0e:	ff 96       	adiw	r30, 0x3f	; 63
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	93 81       	ldd	r25, Z+3	; 0x03
     e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	9e af       	std	Y+62, r25	; 0x3e
     e22:	8d af       	std	Y+61, r24	; 0x3d
     e24:	8d ad       	ldd	r24, Y+61	; 0x3d
     e26:	9e ad       	ldd	r25, Y+62	; 0x3e
     e28:	9a af       	std	Y+58, r25	; 0x3a
     e2a:	89 af       	std	Y+57, r24	; 0x39
     e2c:	89 ad       	ldd	r24, Y+57	; 0x39
     e2e:	9a ad       	ldd	r25, Y+58	; 0x3a
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <Buzzer_Mode+0x2aa>
     e34:	9a af       	std	Y+58, r25	; 0x3a
     e36:	89 af       	std	Y+57, r24	; 0x39
}

void Buzzer_Mode(u8 u8Freq1, u8 u8Freq2)
{
		int count;
		for(count=0; count<u8Freq1; count++)
     e38:	de 01       	movw	r26, r28
     e3a:	ab 5a       	subi	r26, 0xAB	; 171
     e3c:	bf 4f       	sbci	r27, 0xFF	; 255
     e3e:	fe 01       	movw	r30, r28
     e40:	eb 5a       	subi	r30, 0xAB	; 171
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	9c 93       	st	X, r25
     e4e:	8e 93       	st	-X, r24
     e50:	fe 01       	movw	r30, r28
     e52:	e9 5a       	subi	r30, 0xA9	; 169
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	80 81       	ld	r24, Z
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	fe 01       	movw	r30, r28
     e5e:	eb 5a       	subi	r30, 0xAB	; 171
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	82 17       	cp	r24, r18
     e68:	93 07       	cpc	r25, r19
     e6a:	0c f4       	brge	.+2      	; 0xe6e <Buzzer_Mode+0x2e8>
     e6c:	a7 ce       	rjmp	.-690    	; 0xbbc <Buzzer_Mode+0x36>
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	aa e7       	ldi	r26, 0x7A	; 122
     e74:	b4 e4       	ldi	r27, 0x44	; 68
     e76:	8d ab       	std	Y+53, r24	; 0x35
     e78:	9e ab       	std	Y+54, r25	; 0x36
     e7a:	af ab       	std	Y+55, r26	; 0x37
     e7c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7e:	6d a9       	ldd	r22, Y+53	; 0x35
     e80:	7e a9       	ldd	r23, Y+54	; 0x36
     e82:	8f a9       	ldd	r24, Y+55	; 0x37
     e84:	98 ad       	ldd	r25, Y+56	; 0x38
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	4a e7       	ldi	r20, 0x7A	; 122
     e8c:	53 e4       	ldi	r21, 0x43	; 67
     e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	89 ab       	std	Y+49, r24	; 0x31
     e98:	9a ab       	std	Y+50, r25	; 0x32
     e9a:	ab ab       	std	Y+51, r26	; 0x33
     e9c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e9e:	69 a9       	ldd	r22, Y+49	; 0x31
     ea0:	7a a9       	ldd	r23, Y+50	; 0x32
     ea2:	8b a9       	ldd	r24, Y+51	; 0x33
     ea4:	9c a9       	ldd	r25, Y+52	; 0x34
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e8       	ldi	r20, 0x80	; 128
     eac:	5f e3       	ldi	r21, 0x3F	; 63
     eae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eb2:	88 23       	and	r24, r24
     eb4:	2c f4       	brge	.+10     	; 0xec0 <Buzzer_Mode+0x33a>
		__ticks = 1;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	98 ab       	std	Y+48, r25	; 0x30
     ebc:	8f a7       	std	Y+47, r24	; 0x2f
     ebe:	3f c0       	rjmp	.+126    	; 0xf3e <Buzzer_Mode+0x3b8>
	else if (__tmp > 65535)
     ec0:	69 a9       	ldd	r22, Y+49	; 0x31
     ec2:	7a a9       	ldd	r23, Y+50	; 0x32
     ec4:	8b a9       	ldd	r24, Y+51	; 0x33
     ec6:	9c a9       	ldd	r25, Y+52	; 0x34
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	3f ef       	ldi	r19, 0xFF	; 255
     ecc:	4f e7       	ldi	r20, 0x7F	; 127
     ece:	57 e4       	ldi	r21, 0x47	; 71
     ed0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed4:	18 16       	cp	r1, r24
     ed6:	4c f5       	brge	.+82     	; 0xf2a <Buzzer_Mode+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed8:	6d a9       	ldd	r22, Y+53	; 0x35
     eda:	7e a9       	ldd	r23, Y+54	; 0x36
     edc:	8f a9       	ldd	r24, Y+55	; 0x37
     ede:	98 ad       	ldd	r25, Y+56	; 0x38
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e2       	ldi	r20, 0x20	; 32
     ee6:	51 e4       	ldi	r21, 0x41	; 65
     ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	bc 01       	movw	r22, r24
     ef2:	cd 01       	movw	r24, r26
     ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	98 ab       	std	Y+48, r25	; 0x30
     efe:	8f a7       	std	Y+47, r24	; 0x2f
     f00:	0f c0       	rjmp	.+30     	; 0xf20 <Buzzer_Mode+0x39a>
     f02:	89 e1       	ldi	r24, 0x19	; 25
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9e a7       	std	Y+46, r25	; 0x2e
     f08:	8d a7       	std	Y+45, r24	; 0x2d
     f0a:	8d a5       	ldd	r24, Y+45	; 0x2d
     f0c:	9e a5       	ldd	r25, Y+46	; 0x2e
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <Buzzer_Mode+0x388>
     f12:	9e a7       	std	Y+46, r25	; 0x2e
     f14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f16:	8f a5       	ldd	r24, Y+47	; 0x2f
     f18:	98 a9       	ldd	r25, Y+48	; 0x30
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	98 ab       	std	Y+48, r25	; 0x30
     f1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f20:	8f a5       	ldd	r24, Y+47	; 0x2f
     f22:	98 a9       	ldd	r25, Y+48	; 0x30
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	69 f7       	brne	.-38     	; 0xf02 <Buzzer_Mode+0x37c>
     f28:	14 c0       	rjmp	.+40     	; 0xf52 <Buzzer_Mode+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f2a:	69 a9       	ldd	r22, Y+49	; 0x31
     f2c:	7a a9       	ldd	r23, Y+50	; 0x32
     f2e:	8b a9       	ldd	r24, Y+51	; 0x33
     f30:	9c a9       	ldd	r25, Y+52	; 0x34
     f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	98 ab       	std	Y+48, r25	; 0x30
     f3c:	8f a7       	std	Y+47, r24	; 0x2f
     f3e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f40:	98 a9       	ldd	r25, Y+48	; 0x30
     f42:	9c a7       	std	Y+44, r25	; 0x2c
     f44:	8b a7       	std	Y+43, r24	; 0x2b
     f46:	8b a5       	ldd	r24, Y+43	; 0x2b
     f48:	9c a5       	ldd	r25, Y+44	; 0x2c
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <Buzzer_Mode+0x3c4>
     f4e:	9c a7       	std	Y+44, r25	; 0x2c
     f50:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			Buzzer(OFF);
			_delay_ms(10);
		}
		_delay_ms(1000);
		for(count=0; count<u8Freq2; count++)
     f52:	fe 01       	movw	r30, r28
     f54:	eb 5a       	subi	r30, 0xAB	; 171
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	11 82       	std	Z+1, r1	; 0x01
     f5a:	10 82       	st	Z, r1
     f5c:	f6 c0       	rjmp	.+492    	; 0x114a <Buzzer_Mode+0x5c4>
		{
			Buzzer(ON);
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer>
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a0 e2       	ldi	r26, 0x20	; 32
     f6a:	b1 e4       	ldi	r27, 0x41	; 65
     f6c:	8f a3       	std	Y+39, r24	; 0x27
     f6e:	98 a7       	std	Y+40, r25	; 0x28
     f70:	a9 a7       	std	Y+41, r26	; 0x29
     f72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f74:	6f a1       	ldd	r22, Y+39	; 0x27
     f76:	78 a5       	ldd	r23, Y+40	; 0x28
     f78:	89 a5       	ldd	r24, Y+41	; 0x29
     f7a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	4a e7       	ldi	r20, 0x7A	; 122
     f82:	53 e4       	ldi	r21, 0x43	; 67
     f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	8b a3       	std	Y+35, r24	; 0x23
     f8e:	9c a3       	std	Y+36, r25	; 0x24
     f90:	ad a3       	std	Y+37, r26	; 0x25
     f92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f94:	6b a1       	ldd	r22, Y+35	; 0x23
     f96:	7c a1       	ldd	r23, Y+36	; 0x24
     f98:	8d a1       	ldd	r24, Y+37	; 0x25
     f9a:	9e a1       	ldd	r25, Y+38	; 0x26
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e8       	ldi	r20, 0x80	; 128
     fa2:	5f e3       	ldi	r21, 0x3F	; 63
     fa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa8:	88 23       	and	r24, r24
     faa:	2c f4       	brge	.+10     	; 0xfb6 <Buzzer_Mode+0x430>
		__ticks = 1;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9a a3       	std	Y+34, r25	; 0x22
     fb2:	89 a3       	std	Y+33, r24	; 0x21
     fb4:	3f c0       	rjmp	.+126    	; 0x1034 <Buzzer_Mode+0x4ae>
	else if (__tmp > 65535)
     fb6:	6b a1       	ldd	r22, Y+35	; 0x23
     fb8:	7c a1       	ldd	r23, Y+36	; 0x24
     fba:	8d a1       	ldd	r24, Y+37	; 0x25
     fbc:	9e a1       	ldd	r25, Y+38	; 0x26
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	3f ef       	ldi	r19, 0xFF	; 255
     fc2:	4f e7       	ldi	r20, 0x7F	; 127
     fc4:	57 e4       	ldi	r21, 0x47	; 71
     fc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fca:	18 16       	cp	r1, r24
     fcc:	4c f5       	brge	.+82     	; 0x1020 <Buzzer_Mode+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fce:	6f a1       	ldd	r22, Y+39	; 0x27
     fd0:	78 a5       	ldd	r23, Y+40	; 0x28
     fd2:	89 a5       	ldd	r24, Y+41	; 0x29
     fd4:	9a a5       	ldd	r25, Y+42	; 0x2a
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e2       	ldi	r20, 0x20	; 32
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9a a3       	std	Y+34, r25	; 0x22
     ff4:	89 a3       	std	Y+33, r24	; 0x21
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <Buzzer_Mode+0x490>
     ff8:	89 e1       	ldi	r24, 0x19	; 25
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	98 a3       	std	Y+32, r25	; 0x20
     ffe:	8f 8f       	std	Y+31, r24	; 0x1f
    1000:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1002:	98 a1       	ldd	r25, Y+32	; 0x20
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <Buzzer_Mode+0x47e>
    1008:	98 a3       	std	Y+32, r25	; 0x20
    100a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100c:	89 a1       	ldd	r24, Y+33	; 0x21
    100e:	9a a1       	ldd	r25, Y+34	; 0x22
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	9a a3       	std	Y+34, r25	; 0x22
    1014:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1016:	89 a1       	ldd	r24, Y+33	; 0x21
    1018:	9a a1       	ldd	r25, Y+34	; 0x22
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	69 f7       	brne	.-38     	; 0xff8 <Buzzer_Mode+0x472>
    101e:	14 c0       	rjmp	.+40     	; 0x1048 <Buzzer_Mode+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1020:	6b a1       	ldd	r22, Y+35	; 0x23
    1022:	7c a1       	ldd	r23, Y+36	; 0x24
    1024:	8d a1       	ldd	r24, Y+37	; 0x25
    1026:	9e a1       	ldd	r25, Y+38	; 0x26
    1028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	9a a3       	std	Y+34, r25	; 0x22
    1032:	89 a3       	std	Y+33, r24	; 0x21
    1034:	89 a1       	ldd	r24, Y+33	; 0x21
    1036:	9a a1       	ldd	r25, Y+34	; 0x22
    1038:	9e 8f       	std	Y+30, r25	; 0x1e
    103a:	8d 8f       	std	Y+29, r24	; 0x1d
    103c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    103e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <Buzzer_Mode+0x4ba>
    1044:	9e 8f       	std	Y+30, r25	; 0x1e
    1046:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			Buzzer(OFF);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e8       	ldi	r26, 0x80	; 128
    1054:	bf e3       	ldi	r27, 0x3F	; 63
    1056:	89 8f       	std	Y+25, r24	; 0x19
    1058:	9a 8f       	std	Y+26, r25	; 0x1a
    105a:	ab 8f       	std	Y+27, r26	; 0x1b
    105c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105e:	69 8d       	ldd	r22, Y+25	; 0x19
    1060:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1062:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1064:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	4a e7       	ldi	r20, 0x7A	; 122
    106c:	53 e4       	ldi	r21, 0x43	; 67
    106e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	8d 8b       	std	Y+21, r24	; 0x15
    1078:	9e 8b       	std	Y+22, r25	; 0x16
    107a:	af 8b       	std	Y+23, r26	; 0x17
    107c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    107e:	6d 89       	ldd	r22, Y+21	; 0x15
    1080:	7e 89       	ldd	r23, Y+22	; 0x16
    1082:	8f 89       	ldd	r24, Y+23	; 0x17
    1084:	98 8d       	ldd	r25, Y+24	; 0x18
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1092:	88 23       	and	r24, r24
    1094:	2c f4       	brge	.+10     	; 0x10a0 <Buzzer_Mode+0x51a>
		__ticks = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9c 8b       	std	Y+20, r25	; 0x14
    109c:	8b 8b       	std	Y+19, r24	; 0x13
    109e:	3f c0       	rjmp	.+126    	; 0x111e <Buzzer_Mode+0x598>
	else if (__tmp > 65535)
    10a0:	6d 89       	ldd	r22, Y+21	; 0x15
    10a2:	7e 89       	ldd	r23, Y+22	; 0x16
    10a4:	8f 89       	ldd	r24, Y+23	; 0x17
    10a6:	98 8d       	ldd	r25, Y+24	; 0x18
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	3f ef       	ldi	r19, 0xFF	; 255
    10ac:	4f e7       	ldi	r20, 0x7F	; 127
    10ae:	57 e4       	ldi	r21, 0x47	; 71
    10b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b4:	18 16       	cp	r1, r24
    10b6:	4c f5       	brge	.+82     	; 0x110a <Buzzer_Mode+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b8:	69 8d       	ldd	r22, Y+25	; 0x19
    10ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e2       	ldi	r20, 0x20	; 32
    10c6:	51 e4       	ldi	r21, 0x41	; 65
    10c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	9c 8b       	std	Y+20, r25	; 0x14
    10de:	8b 8b       	std	Y+19, r24	; 0x13
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <Buzzer_Mode+0x57a>
    10e2:	89 e1       	ldi	r24, 0x19	; 25
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9a 8b       	std	Y+18, r25	; 0x12
    10e8:	89 8b       	std	Y+17, r24	; 0x11
    10ea:	89 89       	ldd	r24, Y+17	; 0x11
    10ec:	9a 89       	ldd	r25, Y+18	; 0x12
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <Buzzer_Mode+0x568>
    10f2:	9a 8b       	std	Y+18, r25	; 0x12
    10f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f6:	8b 89       	ldd	r24, Y+19	; 0x13
    10f8:	9c 89       	ldd	r25, Y+20	; 0x14
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	9c 8b       	std	Y+20, r25	; 0x14
    10fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	9c 89       	ldd	r25, Y+20	; 0x14
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	69 f7       	brne	.-38     	; 0x10e2 <Buzzer_Mode+0x55c>
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <Buzzer_Mode+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110a:	6d 89       	ldd	r22, Y+21	; 0x15
    110c:	7e 89       	ldd	r23, Y+22	; 0x16
    110e:	8f 89       	ldd	r24, Y+23	; 0x17
    1110:	98 8d       	ldd	r25, Y+24	; 0x18
    1112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9c 8b       	std	Y+20, r25	; 0x14
    111c:	8b 8b       	std	Y+19, r24	; 0x13
    111e:	8b 89       	ldd	r24, Y+19	; 0x13
    1120:	9c 89       	ldd	r25, Y+20	; 0x14
    1122:	98 8b       	std	Y+16, r25	; 0x10
    1124:	8f 87       	std	Y+15, r24	; 0x0f
    1126:	8f 85       	ldd	r24, Y+15	; 0x0f
    1128:	98 89       	ldd	r25, Y+16	; 0x10
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <Buzzer_Mode+0x5a4>
    112e:	98 8b       	std	Y+16, r25	; 0x10
    1130:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			Buzzer(OFF);
			_delay_ms(10);
		}
		_delay_ms(1000);
		for(count=0; count<u8Freq2; count++)
    1132:	de 01       	movw	r26, r28
    1134:	ab 5a       	subi	r26, 0xAB	; 171
    1136:	bf 4f       	sbci	r27, 0xFF	; 255
    1138:	fe 01       	movw	r30, r28
    113a:	eb 5a       	subi	r30, 0xAB	; 171
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	80 81       	ld	r24, Z
    1140:	91 81       	ldd	r25, Z+1	; 0x01
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	11 96       	adiw	r26, 0x01	; 1
    1146:	9c 93       	st	X, r25
    1148:	8e 93       	st	-X, r24
    114a:	fe 01       	movw	r30, r28
    114c:	e8 5a       	subi	r30, 0xA8	; 168
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	fe 01       	movw	r30, r28
    1158:	eb 5a       	subi	r30, 0xAB	; 171
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	80 81       	ld	r24, Z
    115e:	91 81       	ldd	r25, Z+1	; 0x01
    1160:	82 17       	cp	r24, r18
    1162:	93 07       	cpc	r25, r19
    1164:	0c f4       	brge	.+2      	; 0x1168 <Buzzer_Mode+0x5e2>
    1166:	fb ce       	rjmp	.-522    	; 0xf5e <Buzzer_Mode+0x3d8>
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a8 ec       	ldi	r26, 0xC8	; 200
    116e:	b2 e4       	ldi	r27, 0x42	; 66
    1170:	8b 87       	std	Y+11, r24	; 0x0b
    1172:	9c 87       	std	Y+12, r25	; 0x0c
    1174:	ad 87       	std	Y+13, r26	; 0x0d
    1176:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1178:	6b 85       	ldd	r22, Y+11	; 0x0b
    117a:	7c 85       	ldd	r23, Y+12	; 0x0c
    117c:	8d 85       	ldd	r24, Y+13	; 0x0d
    117e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	4a e7       	ldi	r20, 0x7A	; 122
    1186:	53 e4       	ldi	r21, 0x43	; 67
    1188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	8f 83       	std	Y+7, r24	; 0x07
    1192:	98 87       	std	Y+8, r25	; 0x08
    1194:	a9 87       	std	Y+9, r26	; 0x09
    1196:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1198:	6f 81       	ldd	r22, Y+7	; 0x07
    119a:	78 85       	ldd	r23, Y+8	; 0x08
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e8       	ldi	r20, 0x80	; 128
    11a6:	5f e3       	ldi	r21, 0x3F	; 63
    11a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ac:	88 23       	and	r24, r24
    11ae:	2c f4       	brge	.+10     	; 0x11ba <Buzzer_Mode+0x634>
		__ticks = 1;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
    11b8:	3f c0       	rjmp	.+126    	; 0x1238 <Buzzer_Mode+0x6b2>
	else if (__tmp > 65535)
    11ba:	6f 81       	ldd	r22, Y+7	; 0x07
    11bc:	78 85       	ldd	r23, Y+8	; 0x08
    11be:	89 85       	ldd	r24, Y+9	; 0x09
    11c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	3f ef       	ldi	r19, 0xFF	; 255
    11c6:	4f e7       	ldi	r20, 0x7F	; 127
    11c8:	57 e4       	ldi	r21, 0x47	; 71
    11ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ce:	18 16       	cp	r1, r24
    11d0:	4c f5       	brge	.+82     	; 0x1224 <Buzzer_Mode+0x69e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e2       	ldi	r20, 0x20	; 32
    11e0:	51 e4       	ldi	r21, 0x41	; 65
    11e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	bc 01       	movw	r22, r24
    11ec:	cd 01       	movw	r24, r26
    11ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	0f c0       	rjmp	.+30     	; 0x121a <Buzzer_Mode+0x694>
    11fc:	89 e1       	ldi	r24, 0x19	; 25
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	9c 83       	std	Y+4, r25	; 0x04
    1202:	8b 83       	std	Y+3, r24	; 0x03
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <Buzzer_Mode+0x682>
    120c:	9c 83       	std	Y+4, r25	; 0x04
    120e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	9e 83       	std	Y+6, r25	; 0x06
    1218:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    121a:	8d 81       	ldd	r24, Y+5	; 0x05
    121c:	9e 81       	ldd	r25, Y+6	; 0x06
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	69 f7       	brne	.-38     	; 0x11fc <Buzzer_Mode+0x676>
    1222:	14 c0       	rjmp	.+40     	; 0x124c <Buzzer_Mode+0x6c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1224:	6f 81       	ldd	r22, Y+7	; 0x07
    1226:	78 85       	ldd	r23, Y+8	; 0x08
    1228:	89 85       	ldd	r24, Y+9	; 0x09
    122a:	9a 85       	ldd	r25, Y+10	; 0x0a
    122c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	9a 83       	std	Y+2, r25	; 0x02
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	9a 81       	ldd	r25, Y+2	; 0x02
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	f1 f7       	brne	.-4      	; 0x1244 <Buzzer_Mode+0x6be>
    1248:	9a 83       	std	Y+2, r25	; 0x02
    124a:	89 83       	std	Y+1, r24	; 0x01
			Buzzer(OFF);
			_delay_ms(1);
		}
		_delay_ms(100);

}
    124c:	c8 5a       	subi	r28, 0xA8	; 168
    124e:	df 4f       	sbci	r29, 0xFF	; 255
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	08 95       	ret

00001264 <DIO_voidInit>:

#include "DIO.h"
#include "Utils.h"

void DIO_voidInit()
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
	Clr_Nibble_High(DDRA);
    126c:	aa e3       	ldi	r26, 0x3A	; 58
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ea e3       	ldi	r30, 0x3A	; 58
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	8f 70       	andi	r24, 0x0F	; 15
    1278:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRA);
    127a:	aa e3       	ldi	r26, 0x3A	; 58
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	ea e3       	ldi	r30, 0x3A	; 58
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	80 7f       	andi	r24, 0xF0	; 240
    1286:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRB);
    1288:	a7 e3       	ldi	r26, 0x37	; 55
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e7 e3       	ldi	r30, 0x37	; 55
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8f 70       	andi	r24, 0x0F	; 15
    1294:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRB);
    1296:	a7 e3       	ldi	r26, 0x37	; 55
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e7 e3       	ldi	r30, 0x37	; 55
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	80 7f       	andi	r24, 0xF0	; 240
    12a2:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRC);
    12a4:	a4 e3       	ldi	r26, 0x34	; 52
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e4 e3       	ldi	r30, 0x34	; 52
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	8f 70       	andi	r24, 0x0F	; 15
    12b0:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRC);
    12b2:	a4 e3       	ldi	r26, 0x34	; 52
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e4 e3       	ldi	r30, 0x34	; 52
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	80 7f       	andi	r24, 0xF0	; 240
    12be:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRD);
    12c0:	a1 e3       	ldi	r26, 0x31	; 49
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e1 e3       	ldi	r30, 0x31	; 49
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8f 70       	andi	r24, 0x0F	; 15
    12cc:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRD);
    12ce:	a1 e3       	ldi	r26, 0x31	; 49
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e1 e3       	ldi	r30, 0x31	; 49
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 7f       	andi	r24, 0xF0	; 240
    12da:	8c 93       	st	X, r24
}
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <DIO_u8GetVal>:

u8 DIO_u8GetVal(u8 u8Port, u8 u8Pin)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <DIO_u8GetVal+0x6>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <DIO_u8GetVal+0x8>
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Return;
	switch (u8Port)
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3d 83       	std	Y+5, r19	; 0x05
    12fc:	2c 83       	std	Y+4, r18	; 0x04
    12fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1300:	5d 81       	ldd	r21, Y+5	; 0x05
    1302:	41 30       	cpi	r20, 0x01	; 1
    1304:	51 05       	cpc	r21, r1
    1306:	b1 f1       	breq	.+108    	; 0x1374 <DIO_u8GetVal+0x92>
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	9d 81       	ldd	r25, Y+5	; 0x05
    130c:	82 30       	cpi	r24, 0x02	; 2
    130e:	91 05       	cpc	r25, r1
    1310:	34 f4       	brge	.+12     	; 0x131e <DIO_u8GetVal+0x3c>
    1312:	2c 81       	ldd	r18, Y+4	; 0x04
    1314:	3d 81       	ldd	r19, Y+5	; 0x05
    1316:	21 15       	cp	r18, r1
    1318:	31 05       	cpc	r19, r1
    131a:	71 f0       	breq	.+28     	; 0x1338 <DIO_u8GetVal+0x56>
    131c:	84 c0       	rjmp	.+264    	; 0x1426 <DIO_u8GetVal+0x144>
    131e:	4c 81       	ldd	r20, Y+4	; 0x04
    1320:	5d 81       	ldd	r21, Y+5	; 0x05
    1322:	42 30       	cpi	r20, 0x02	; 2
    1324:	51 05       	cpc	r21, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <DIO_u8GetVal+0x48>
    1328:	43 c0       	rjmp	.+134    	; 0x13b0 <DIO_u8GetVal+0xce>
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	91 05       	cpc	r25, r1
    1332:	09 f4       	brne	.+2      	; 0x1336 <DIO_u8GetVal+0x54>
    1334:	5b c0       	rjmp	.+182    	; 0x13ec <DIO_u8GetVal+0x10a>
    1336:	77 c0       	rjmp	.+238    	; 0x1426 <DIO_u8GetVal+0x144>
	{
	case 0:
		Local_u8Return=Get_Bit(PINA,u8Pin);
    1338:	e9 e3       	ldi	r30, 0x39	; 57
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_u8GetVal+0x70>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	2a 95       	dec	r18
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_u8GetVal+0x6c>
    1356:	9a 01       	movw	r18, r20
    1358:	28 23       	and	r18, r24
    135a:	39 23       	and	r19, r25
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	a9 01       	movw	r20, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <DIO_u8GetVal+0x88>
    1366:	55 95       	asr	r21
    1368:	47 95       	ror	r20
    136a:	8a 95       	dec	r24
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <DIO_u8GetVal+0x84>
    136e:	ca 01       	movw	r24, r20
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	59 c0       	rjmp	.+178    	; 0x1426 <DIO_u8GetVal+0x144>
		break;
	case 1:
		Local_u8Return=Get_Bit(PINB,u8Pin);
    1374:	e6 e3       	ldi	r30, 0x36	; 54
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_u8GetVal+0xac>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	2a 95       	dec	r18
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_u8GetVal+0xa8>
    1392:	9a 01       	movw	r18, r20
    1394:	28 23       	and	r18, r24
    1396:	39 23       	and	r19, r25
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a9 01       	movw	r20, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_u8GetVal+0xc4>
    13a2:	55 95       	asr	r21
    13a4:	47 95       	ror	r20
    13a6:	8a 95       	dec	r24
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_u8GetVal+0xc0>
    13aa:	ca 01       	movw	r24, r20
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	3b c0       	rjmp	.+118    	; 0x1426 <DIO_u8GetVal+0x144>
		break;
	case 2:
		Local_u8Return=Get_Bit(PINC,u8Pin);
    13b0:	e3 e3       	ldi	r30, 0x33	; 51
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_u8GetVal+0xe8>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	2a 95       	dec	r18
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_u8GetVal+0xe4>
    13ce:	9a 01       	movw	r18, r20
    13d0:	28 23       	and	r18, r24
    13d2:	39 23       	and	r19, r25
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	a9 01       	movw	r20, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_u8GetVal+0x100>
    13de:	55 95       	asr	r21
    13e0:	47 95       	ror	r20
    13e2:	8a 95       	dec	r24
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_u8GetVal+0xfc>
    13e6:	ca 01       	movw	r24, r20
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	1d c0       	rjmp	.+58     	; 0x1426 <DIO_u8GetVal+0x144>
		break;
	case 3:
		Local_u8Return=Get_Bit(PIND,u8Pin);
    13ec:	e0 e3       	ldi	r30, 0x30	; 48
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_u8GetVal+0x124>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	2a 95       	dec	r18
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_u8GetVal+0x120>
    140a:	9a 01       	movw	r18, r20
    140c:	28 23       	and	r18, r24
    140e:	39 23       	and	r19, r25
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_u8GetVal+0x13c>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_u8GetVal+0x138>
    1422:	ca 01       	movw	r24, r20
    1424:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Return;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
}
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <DIO_voidWriteVal>:

void DIO_voidWriteVal(u8 u8Port, u8 u8Pin, u8 u8Val)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	00 d0       	rcall	.+0      	; 0x143e <DIO_voidWriteVal+0x6>
    143e:	00 d0       	rcall	.+0      	; 0x1440 <DIO_voidWriteVal+0x8>
    1440:	0f 92       	push	r0
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	6a 83       	std	Y+2, r22	; 0x02
    144a:	4b 83       	std	Y+3, r20	; 0x03
	switch (u8Port)
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	3d 83       	std	Y+5, r19	; 0x05
    1454:	2c 83       	std	Y+4, r18	; 0x04
    1456:	8c 81       	ldd	r24, Y+4	; 0x04
    1458:	9d 81       	ldd	r25, Y+5	; 0x05
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	91 05       	cpc	r25, r1
    145e:	09 f4       	brne	.+2      	; 0x1462 <DIO_voidWriteVal+0x2a>
    1460:	46 c0       	rjmp	.+140    	; 0x14ee <DIO_voidWriteVal+0xb6>
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	2c f4       	brge	.+10     	; 0x1476 <DIO_voidWriteVal+0x3e>
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	9d 81       	ldd	r25, Y+5	; 0x05
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	71 f0       	breq	.+28     	; 0x1490 <DIO_voidWriteVal+0x58>
    1474:	c7 c0       	rjmp	.+398    	; 0x1604 <DIO_voidWriteVal+0x1cc>
    1476:	2c 81       	ldd	r18, Y+4	; 0x04
    1478:	3d 81       	ldd	r19, Y+5	; 0x05
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	09 f4       	brne	.+2      	; 0x1482 <DIO_voidWriteVal+0x4a>
    1480:	65 c0       	rjmp	.+202    	; 0x154c <DIO_voidWriteVal+0x114>
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	9d 81       	ldd	r25, Y+5	; 0x05
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	91 05       	cpc	r25, r1
    148a:	09 f4       	brne	.+2      	; 0x148e <DIO_voidWriteVal+0x56>
    148c:	8e c0       	rjmp	.+284    	; 0x15aa <DIO_voidWriteVal+0x172>
    148e:	ba c0       	rjmp	.+372    	; 0x1604 <DIO_voidWriteVal+0x1cc>
		{
		case 0:
			Assign_Bit(PORTA,u8Pin,u8Val);
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	88 23       	and	r24, r24
    1494:	a1 f4       	brne	.+40     	; 0x14be <DIO_voidWriteVal+0x86>
    1496:	ab e3       	ldi	r26, 0x3B	; 59
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	eb e3       	ldi	r30, 0x3B	; 59
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_voidWriteVal+0x7c>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_voidWriteVal+0x78>
    14b8:	80 95       	com	r24
    14ba:	84 23       	and	r24, r20
    14bc:	8c 93       	st	X, r24
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <DIO_voidWriteVal+0x8e>
    14c4:	9f c0       	rjmp	.+318    	; 0x1604 <DIO_voidWriteVal+0x1cc>
    14c6:	ab e3       	ldi	r26, 0x3B	; 59
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	eb e3       	ldi	r30, 0x3B	; 59
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_voidWriteVal+0xac>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_voidWriteVal+0xa8>
    14e8:	84 2b       	or	r24, r20
    14ea:	8c 93       	st	X, r24
    14ec:	8b c0       	rjmp	.+278    	; 0x1604 <DIO_voidWriteVal+0x1cc>
			break;
		case 1:
			Assign_Bit(PORTB,u8Pin,u8Val);
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	88 23       	and	r24, r24
    14f2:	a1 f4       	brne	.+40     	; 0x151c <DIO_voidWriteVal+0xe4>
    14f4:	a8 e3       	ldi	r26, 0x38	; 56
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e8 e3       	ldi	r30, 0x38	; 56
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_voidWriteVal+0xda>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_voidWriteVal+0xd6>
    1516:	80 95       	com	r24
    1518:	84 23       	and	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	09 f0       	breq	.+2      	; 0x1524 <DIO_voidWriteVal+0xec>
    1522:	70 c0       	rjmp	.+224    	; 0x1604 <DIO_voidWriteVal+0x1cc>
    1524:	a8 e3       	ldi	r26, 0x38	; 56
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e8 e3       	ldi	r30, 0x38	; 56
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_voidWriteVal+0x10a>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DIO_voidWriteVal+0x106>
    1546:	84 2b       	or	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	5c c0       	rjmp	.+184    	; 0x1604 <DIO_voidWriteVal+0x1cc>
			break;
		case 2:
			Assign_Bit(PORTC,u8Pin,u8Val);
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 23       	and	r24, r24
    1550:	a1 f4       	brne	.+40     	; 0x157a <DIO_voidWriteVal+0x142>
    1552:	a5 e3       	ldi	r26, 0x35	; 53
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e5 e3       	ldi	r30, 0x35	; 53
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_voidWriteVal+0x138>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_voidWriteVal+0x134>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	09 f0       	breq	.+2      	; 0x1582 <DIO_voidWriteVal+0x14a>
    1580:	41 c0       	rjmp	.+130    	; 0x1604 <DIO_voidWriteVal+0x1cc>
    1582:	a5 e3       	ldi	r26, 0x35	; 53
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e3       	ldi	r30, 0x35	; 53
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_voidWriteVal+0x168>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_voidWriteVal+0x164>
    15a4:	84 2b       	or	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	2d c0       	rjmp	.+90     	; 0x1604 <DIO_voidWriteVal+0x1cc>
			break;
		case 3:
			Assign_Bit(PORTD,u8Pin,u8Val);
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	88 23       	and	r24, r24
    15ae:	a1 f4       	brne	.+40     	; 0x15d8 <DIO_voidWriteVal+0x1a0>
    15b0:	a2 e3       	ldi	r26, 0x32	; 50
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e2 e3       	ldi	r30, 0x32	; 50
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 2e       	mov	r0, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <DIO_voidWriteVal+0x196>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <DIO_voidWriteVal+0x192>
    15d2:	80 95       	com	r24
    15d4:	84 23       	and	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	99 f4       	brne	.+38     	; 0x1604 <DIO_voidWriteVal+0x1cc>
    15de:	a2 e3       	ldi	r26, 0x32	; 50
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e2 e3       	ldi	r30, 0x32	; 50
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_voidWriteVal+0x1c4>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <DIO_voidWriteVal+0x1c0>
    1600:	84 2b       	or	r24, r20
    1602:	8c 93       	st	X, r24
		}

}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <DIO_voidSetDir>:

void DIO_voidSetDir(u8 u8Port, u8 u8Pin, u8 u8Dir)
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	00 d0       	rcall	.+0      	; 0x161a <DIO_voidSetDir+0x6>
    161a:	00 d0       	rcall	.+0      	; 0x161c <DIO_voidSetDir+0x8>
    161c:	0f 92       	push	r0
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	6a 83       	std	Y+2, r22	; 0x02
    1626:	4b 83       	std	Y+3, r20	; 0x03
	switch (u8Port)
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	3d 83       	std	Y+5, r19	; 0x05
    1630:	2c 83       	std	Y+4, r18	; 0x04
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	91 05       	cpc	r25, r1
    163a:	09 f4       	brne	.+2      	; 0x163e <DIO_voidSetDir+0x2a>
    163c:	46 c0       	rjmp	.+140    	; 0x16ca <DIO_voidSetDir+0xb6>
    163e:	2c 81       	ldd	r18, Y+4	; 0x04
    1640:	3d 81       	ldd	r19, Y+5	; 0x05
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	2c f4       	brge	.+10     	; 0x1652 <DIO_voidSetDir+0x3e>
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	9d 81       	ldd	r25, Y+5	; 0x05
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	71 f0       	breq	.+28     	; 0x166c <DIO_voidSetDir+0x58>
    1650:	c7 c0       	rjmp	.+398    	; 0x17e0 <DIO_voidSetDir+0x1cc>
    1652:	2c 81       	ldd	r18, Y+4	; 0x04
    1654:	3d 81       	ldd	r19, Y+5	; 0x05
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	09 f4       	brne	.+2      	; 0x165e <DIO_voidSetDir+0x4a>
    165c:	65 c0       	rjmp	.+202    	; 0x1728 <DIO_voidSetDir+0x114>
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	9d 81       	ldd	r25, Y+5	; 0x05
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	91 05       	cpc	r25, r1
    1666:	09 f4       	brne	.+2      	; 0x166a <DIO_voidSetDir+0x56>
    1668:	8e c0       	rjmp	.+284    	; 0x1786 <DIO_voidSetDir+0x172>
    166a:	ba c0       	rjmp	.+372    	; 0x17e0 <DIO_voidSetDir+0x1cc>
		{
		case 0:
			Assign_Bit(DDRA,u8Pin,u8Dir);
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	88 23       	and	r24, r24
    1670:	a1 f4       	brne	.+40     	; 0x169a <DIO_voidSetDir+0x86>
    1672:	aa e3       	ldi	r26, 0x3A	; 58
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	ea e3       	ldi	r30, 0x3A	; 58
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_voidSetDir+0x7c>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_voidSetDir+0x78>
    1694:	80 95       	com	r24
    1696:	84 23       	and	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	09 f0       	breq	.+2      	; 0x16a2 <DIO_voidSetDir+0x8e>
    16a0:	9f c0       	rjmp	.+318    	; 0x17e0 <DIO_voidSetDir+0x1cc>
    16a2:	aa e3       	ldi	r26, 0x3A	; 58
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ea e3       	ldi	r30, 0x3A	; 58
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_voidSetDir+0xac>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DIO_voidSetDir+0xa8>
    16c4:	84 2b       	or	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	8b c0       	rjmp	.+278    	; 0x17e0 <DIO_voidSetDir+0x1cc>
			break;
		case 1:
			Assign_Bit(DDRB,u8Pin,u8Dir);
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	88 23       	and	r24, r24
    16ce:	a1 f4       	brne	.+40     	; 0x16f8 <DIO_voidSetDir+0xe4>
    16d0:	a7 e3       	ldi	r26, 0x37	; 55
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e7 e3       	ldi	r30, 0x37	; 55
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <DIO_voidSetDir+0xda>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <DIO_voidSetDir+0xd6>
    16f2:	80 95       	com	r24
    16f4:	84 23       	and	r24, r20
    16f6:	8c 93       	st	X, r24
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	09 f0       	breq	.+2      	; 0x1700 <DIO_voidSetDir+0xec>
    16fe:	70 c0       	rjmp	.+224    	; 0x17e0 <DIO_voidSetDir+0x1cc>
    1700:	a7 e3       	ldi	r26, 0x37	; 55
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e7 e3       	ldi	r30, 0x37	; 55
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <DIO_voidSetDir+0x10a>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <DIO_voidSetDir+0x106>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	5c c0       	rjmp	.+184    	; 0x17e0 <DIO_voidSetDir+0x1cc>
			break;
		case 2:
			Assign_Bit(DDRC,u8Pin,u8Dir);
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 23       	and	r24, r24
    172c:	a1 f4       	brne	.+40     	; 0x1756 <DIO_voidSetDir+0x142>
    172e:	a4 e3       	ldi	r26, 0x34	; 52
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e4 e3       	ldi	r30, 0x34	; 52
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_voidSetDir+0x138>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_voidSetDir+0x134>
    1750:	80 95       	com	r24
    1752:	84 23       	and	r24, r20
    1754:	8c 93       	st	X, r24
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	09 f0       	breq	.+2      	; 0x175e <DIO_voidSetDir+0x14a>
    175c:	41 c0       	rjmp	.+130    	; 0x17e0 <DIO_voidSetDir+0x1cc>
    175e:	a4 e3       	ldi	r26, 0x34	; 52
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e4 e3       	ldi	r30, 0x34	; 52
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_voidSetDir+0x168>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_voidSetDir+0x164>
    1780:	84 2b       	or	r24, r20
    1782:	8c 93       	st	X, r24
    1784:	2d c0       	rjmp	.+90     	; 0x17e0 <DIO_voidSetDir+0x1cc>
			break;
		case 3:
			Assign_Bit(DDRD,u8Pin,u8Dir);
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	88 23       	and	r24, r24
    178a:	a1 f4       	brne	.+40     	; 0x17b4 <DIO_voidSetDir+0x1a0>
    178c:	a1 e3       	ldi	r26, 0x31	; 49
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e1 e3       	ldi	r30, 0x31	; 49
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	48 2f       	mov	r20, r24
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 2e       	mov	r0, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <DIO_voidSetDir+0x196>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <DIO_voidSetDir+0x192>
    17ae:	80 95       	com	r24
    17b0:	84 23       	and	r24, r20
    17b2:	8c 93       	st	X, r24
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	99 f4       	brne	.+38     	; 0x17e0 <DIO_voidSetDir+0x1cc>
    17ba:	a1 e3       	ldi	r26, 0x31	; 49
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e1 e3       	ldi	r30, 0x31	; 49
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_voidSetDir+0x1c4>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <DIO_voidSetDir+0x1c0>
    17dc:	84 2b       	or	r24, r20
    17de:	8c 93       	st	X, r24
		}

}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <KeyBad_Init>:
#include "KeyBad.h"
#include "DIO.h"
#include<avr/delay.h>

void KeyBad_Init()
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
	/*R*/
	DIO_voidSetDir(PortD,Pin2,Output);
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	62 e0       	ldi	r22, 0x02	; 2
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortD,Pin3,Output);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	63 e0       	ldi	r22, 0x03	; 3
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortD,Pin4,Output);
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	64 e0       	ldi	r22, 0x04	; 4
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>

	/*C*/
	DIO_voidSetDir(PortD,Pin5,Input);
    1816:	83 e0       	ldi	r24, 0x03	; 3
    1818:	65 e0       	ldi	r22, 0x05	; 5
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortD,Pin6,Input);
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	66 e0       	ldi	r22, 0x06	; 6
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortA,Pin3,Input);
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	63 e0       	ldi	r22, 0x03	; 3
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidWriteVal(PortD,Pin5,Five_Volt);
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	65 e0       	ldi	r22, 0x05	; 5
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortD,Pin6,Five_Volt);
    183e:	83 e0       	ldi	r24, 0x03	; 3
    1840:	66 e0       	ldi	r22, 0x06	; 6
    1842:	41 e0       	ldi	r20, 0x01	; 1
    1844:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortA,Pin3,Five_Volt);
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	63 e0       	ldi	r22, 0x03	; 3
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
}
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <KeyBad_Pressed>:

u8 KeyBad_Pressed(u8* key, u8 order)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	2a 97       	sbiw	r28, 0x0a	; 10
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	99 87       	std	Y+9, r25	; 0x09
    186e:	88 87       	std	Y+8, r24	; 0x08
    1870:	6a 87       	std	Y+10, r22	; 0x0a
	u8 u8return;
	if(order==1)
    1872:	8a 85       	ldd	r24, Y+10	; 0x0a
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	09 f0       	breq	.+2      	; 0x187a <KeyBad_Pressed+0x22>
    1878:	af c0       	rjmp	.+350    	; 0x19d8 <KeyBad_Pressed+0x180>
	{
		/*R1=0, R2=1, R3=1*/
		DIO_voidWriteVal(PortD,Pin2,Zero_Volt);
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	62 e0       	ldi	r22, 0x02	; 2
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortD,Pin3,Five_Volt);
    1884:	83 e0       	ldi	r24, 0x03	; 3
    1886:	63 e0       	ldi	r22, 0x03	; 3
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortD,Pin4,Five_Volt);
    188e:	83 e0       	ldi	r24, 0x03	; 3
    1890:	64 e0       	ldi	r22, 0x04	; 4
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>

		u8 C1=DIO_u8GetVal(PortA,Pin3);
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	63 e0       	ldi	r22, 0x03	; 3
    189c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    18a0:	8e 83       	std	Y+6, r24	; 0x06
		u8 C2=DIO_u8GetVal(PortD,Pin6);
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	66 e0       	ldi	r22, 0x06	; 6
    18a6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    18aa:	8d 83       	std	Y+5, r24	; 0x05
		u8 C3=DIO_u8GetVal(PortD,Pin5);
    18ac:	83 e0       	ldi	r24, 0x03	; 3
    18ae:	65 e0       	ldi	r22, 0x05	; 5
    18b0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    18b4:	8c 83       	std	Y+4, r24	; 0x04

		if(!C1)
    18b6:	8e 81       	ldd	r24, Y+6	; 0x06
    18b8:	88 23       	and	r24, r24
    18ba:	29 f4       	brne	.+10     	; 0x18c6 <KeyBad_Pressed+0x6e>
			*key='1';
    18bc:	e8 85       	ldd	r30, Y+8	; 0x08
    18be:	f9 85       	ldd	r31, Y+9	; 0x09
    18c0:	81 e3       	ldi	r24, 0x31	; 49
    18c2:	80 83       	st	Z, r24
    18c4:	7f c0       	rjmp	.+254    	; 0x19c4 <KeyBad_Pressed+0x16c>
		else if(!C2)
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	88 23       	and	r24, r24
    18ca:	29 f4       	brne	.+10     	; 0x18d6 <KeyBad_Pressed+0x7e>
			*key='2';
    18cc:	e8 85       	ldd	r30, Y+8	; 0x08
    18ce:	f9 85       	ldd	r31, Y+9	; 0x09
    18d0:	82 e3       	ldi	r24, 0x32	; 50
    18d2:	80 83       	st	Z, r24
    18d4:	77 c0       	rjmp	.+238    	; 0x19c4 <KeyBad_Pressed+0x16c>
		else if(!C3)
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	88 23       	and	r24, r24
    18da:	29 f4       	brne	.+10     	; 0x18e6 <KeyBad_Pressed+0x8e>
				*key='3';
    18dc:	e8 85       	ldd	r30, Y+8	; 0x08
    18de:	f9 85       	ldd	r31, Y+9	; 0x09
    18e0:	83 e3       	ldi	r24, 0x33	; 51
    18e2:	80 83       	st	Z, r24
    18e4:	6f c0       	rjmp	.+222    	; 0x19c4 <KeyBad_Pressed+0x16c>
		else
		{

		/*R1=1, R2=0, R3=1*/
		DIO_voidWriteVal(PortD,Pin2,Five_Volt);
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	62 e0       	ldi	r22, 0x02	; 2
    18ea:	41 e0       	ldi	r20, 0x01	; 1
    18ec:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortD,Pin3,Zero_Volt);
    18f0:	83 e0       	ldi	r24, 0x03	; 3
    18f2:	63 e0       	ldi	r22, 0x03	; 3
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortD,Pin4,Five_Volt);
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	64 e0       	ldi	r22, 0x04	; 4
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>

		C1=DIO_u8GetVal(PortA,Pin3);
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	63 e0       	ldi	r22, 0x03	; 3
    1908:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    190c:	8e 83       	std	Y+6, r24	; 0x06
		C2=DIO_u8GetVal(PortD,Pin6);
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	66 e0       	ldi	r22, 0x06	; 6
    1912:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    1916:	8d 83       	std	Y+5, r24	; 0x05
		C3=DIO_u8GetVal(PortD,Pin5);
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	65 e0       	ldi	r22, 0x05	; 5
    191c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    1920:	8c 83       	std	Y+4, r24	; 0x04

		if(!C1)
    1922:	8e 81       	ldd	r24, Y+6	; 0x06
    1924:	88 23       	and	r24, r24
    1926:	29 f4       	brne	.+10     	; 0x1932 <KeyBad_Pressed+0xda>
			*key='4';
    1928:	e8 85       	ldd	r30, Y+8	; 0x08
    192a:	f9 85       	ldd	r31, Y+9	; 0x09
    192c:	84 e3       	ldi	r24, 0x34	; 52
    192e:	80 83       	st	Z, r24
    1930:	49 c0       	rjmp	.+146    	; 0x19c4 <KeyBad_Pressed+0x16c>
		else if(!C2)
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	88 23       	and	r24, r24
    1936:	29 f4       	brne	.+10     	; 0x1942 <KeyBad_Pressed+0xea>
			*key='5';
    1938:	e8 85       	ldd	r30, Y+8	; 0x08
    193a:	f9 85       	ldd	r31, Y+9	; 0x09
    193c:	85 e3       	ldi	r24, 0x35	; 53
    193e:	80 83       	st	Z, r24
    1940:	41 c0       	rjmp	.+130    	; 0x19c4 <KeyBad_Pressed+0x16c>
		else if(!C3)
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	88 23       	and	r24, r24
    1946:	29 f4       	brne	.+10     	; 0x1952 <KeyBad_Pressed+0xfa>
			*key='6';
    1948:	e8 85       	ldd	r30, Y+8	; 0x08
    194a:	f9 85       	ldd	r31, Y+9	; 0x09
    194c:	86 e3       	ldi	r24, 0x36	; 54
    194e:	80 83       	st	Z, r24
    1950:	39 c0       	rjmp	.+114    	; 0x19c4 <KeyBad_Pressed+0x16c>
		else
		{

		/*R1=1, R2=1, R3=0*/
		DIO_voidWriteVal(PortD,Pin2,Five_Volt);
    1952:	83 e0       	ldi	r24, 0x03	; 3
    1954:	62 e0       	ldi	r22, 0x02	; 2
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortD,Pin3,Five_Volt);
    195c:	83 e0       	ldi	r24, 0x03	; 3
    195e:	63 e0       	ldi	r22, 0x03	; 3
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortD,Pin4,Zero_Volt);
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	64 e0       	ldi	r22, 0x04	; 4
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>

		C1=DIO_u8GetVal(PortA,Pin3);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	63 e0       	ldi	r22, 0x03	; 3
    1974:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    1978:	8e 83       	std	Y+6, r24	; 0x06
		C2=DIO_u8GetVal(PortD,Pin6);
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	66 e0       	ldi	r22, 0x06	; 6
    197e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    1982:	8d 83       	std	Y+5, r24	; 0x05
		C3=DIO_u8GetVal(PortD,Pin5);
    1984:	83 e0       	ldi	r24, 0x03	; 3
    1986:	65 e0       	ldi	r22, 0x05	; 5
    1988:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    198c:	8c 83       	std	Y+4, r24	; 0x04

		if(!C1)
    198e:	8e 81       	ldd	r24, Y+6	; 0x06
    1990:	88 23       	and	r24, r24
    1992:	29 f4       	brne	.+10     	; 0x199e <KeyBad_Pressed+0x146>
			*key='7';
    1994:	e8 85       	ldd	r30, Y+8	; 0x08
    1996:	f9 85       	ldd	r31, Y+9	; 0x09
    1998:	87 e3       	ldi	r24, 0x37	; 55
    199a:	80 83       	st	Z, r24
    199c:	13 c0       	rjmp	.+38     	; 0x19c4 <KeyBad_Pressed+0x16c>
		else if(!C2)
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	88 23       	and	r24, r24
    19a2:	29 f4       	brne	.+10     	; 0x19ae <KeyBad_Pressed+0x156>
			*key='8';
    19a4:	e8 85       	ldd	r30, Y+8	; 0x08
    19a6:	f9 85       	ldd	r31, Y+9	; 0x09
    19a8:	88 e3       	ldi	r24, 0x38	; 56
    19aa:	80 83       	st	Z, r24
    19ac:	0b c0       	rjmp	.+22     	; 0x19c4 <KeyBad_Pressed+0x16c>
		else if(!C3)
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	88 23       	and	r24, r24
    19b2:	29 f4       	brne	.+10     	; 0x19be <KeyBad_Pressed+0x166>
			*key='9';
    19b4:	e8 85       	ldd	r30, Y+8	; 0x08
    19b6:	f9 85       	ldd	r31, Y+9	; 0x09
    19b8:	89 e3       	ldi	r24, 0x39	; 57
    19ba:	80 83       	st	Z, r24
    19bc:	03 c0       	rjmp	.+6      	; 0x19c4 <KeyBad_Pressed+0x16c>
			else *key=0;
    19be:	e8 85       	ldd	r30, Y+8	; 0x08
    19c0:	f9 85       	ldd	r31, Y+9	; 0x09
    19c2:	10 82       	st	Z, r1
		}
	}

	if(*key)
    19c4:	e8 85       	ldd	r30, Y+8	; 0x08
    19c6:	f9 85       	ldd	r31, Y+9	; 0x09
    19c8:	80 81       	ld	r24, Z
    19ca:	88 23       	and	r24, r24
    19cc:	19 f0       	breq	.+6      	; 0x19d4 <KeyBad_Pressed+0x17c>
		u8return=1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	8f 83       	std	Y+7, r24	; 0x07
    19d2:	d9 c0       	rjmp	.+434    	; 0x1b86 <KeyBad_Pressed+0x32e>
	else
		u8return=0;
    19d4:	1f 82       	std	Y+7, r1	; 0x07
    19d6:	d7 c0       	rjmp	.+430    	; 0x1b86 <KeyBad_Pressed+0x32e>
	}
	else
	{
			/*R1=0, R2=1, R3=1*/
			DIO_voidWriteVal(PortD,Pin2,Zero_Volt);
    19d8:	83 e0       	ldi	r24, 0x03	; 3
    19da:	62 e0       	ldi	r22, 0x02	; 2
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
			DIO_voidWriteVal(PortD,Pin3,Five_Volt);
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	63 e0       	ldi	r22, 0x03	; 3
    19e6:	41 e0       	ldi	r20, 0x01	; 1
    19e8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
			DIO_voidWriteVal(PortD,Pin4,Five_Volt);
    19ec:	83 e0       	ldi	r24, 0x03	; 3
    19ee:	64 e0       	ldi	r22, 0x04	; 4
    19f0:	41 e0       	ldi	r20, 0x01	; 1
    19f2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>

			u8 C1=DIO_u8GetVal(PortA,Pin3);
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	63 e0       	ldi	r22, 0x03	; 3
    19fa:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    19fe:	8b 83       	std	Y+3, r24	; 0x03
			u8 C2=DIO_u8GetVal(PortD,Pin6);
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	66 e0       	ldi	r22, 0x06	; 6
    1a04:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    1a08:	8a 83       	std	Y+2, r24	; 0x02
			u8 C3=DIO_u8GetVal(PortD,Pin5);
    1a0a:	83 e0       	ldi	r24, 0x03	; 3
    1a0c:	65 e0       	ldi	r22, 0x05	; 5
    1a0e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    1a12:	89 83       	std	Y+1, r24	; 0x01

			if(!C1 && !(*key=='1'))
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	88 23       	and	r24, r24
    1a18:	51 f4       	brne	.+20     	; 0x1a2e <KeyBad_Pressed+0x1d6>
    1a1a:	e8 85       	ldd	r30, Y+8	; 0x08
    1a1c:	f9 85       	ldd	r31, Y+9	; 0x09
    1a1e:	80 81       	ld	r24, Z
    1a20:	81 33       	cpi	r24, 0x31	; 49
    1a22:	29 f0       	breq	.+10     	; 0x1a2e <KeyBad_Pressed+0x1d6>
				*key='1';
    1a24:	e8 85       	ldd	r30, Y+8	; 0x08
    1a26:	f9 85       	ldd	r31, Y+9	; 0x09
    1a28:	81 e3       	ldi	r24, 0x31	; 49
    1a2a:	80 83       	st	Z, r24
    1a2c:	a3 c0       	rjmp	.+326    	; 0x1b74 <KeyBad_Pressed+0x31c>
			else if(!C2 && !(*key=='2') )
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	88 23       	and	r24, r24
    1a32:	51 f4       	brne	.+20     	; 0x1a48 <KeyBad_Pressed+0x1f0>
    1a34:	e8 85       	ldd	r30, Y+8	; 0x08
    1a36:	f9 85       	ldd	r31, Y+9	; 0x09
    1a38:	80 81       	ld	r24, Z
    1a3a:	82 33       	cpi	r24, 0x32	; 50
    1a3c:	29 f0       	breq	.+10     	; 0x1a48 <KeyBad_Pressed+0x1f0>
				*key='2';
    1a3e:	e8 85       	ldd	r30, Y+8	; 0x08
    1a40:	f9 85       	ldd	r31, Y+9	; 0x09
    1a42:	82 e3       	ldi	r24, 0x32	; 50
    1a44:	80 83       	st	Z, r24
    1a46:	96 c0       	rjmp	.+300    	; 0x1b74 <KeyBad_Pressed+0x31c>
			else if(!C3 && !(*key=='3') )
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	88 23       	and	r24, r24
    1a4c:	51 f4       	brne	.+20     	; 0x1a62 <KeyBad_Pressed+0x20a>
    1a4e:	e8 85       	ldd	r30, Y+8	; 0x08
    1a50:	f9 85       	ldd	r31, Y+9	; 0x09
    1a52:	80 81       	ld	r24, Z
    1a54:	83 33       	cpi	r24, 0x33	; 51
    1a56:	29 f0       	breq	.+10     	; 0x1a62 <KeyBad_Pressed+0x20a>
					*key='3';
    1a58:	e8 85       	ldd	r30, Y+8	; 0x08
    1a5a:	f9 85       	ldd	r31, Y+9	; 0x09
    1a5c:	83 e3       	ldi	r24, 0x33	; 51
    1a5e:	80 83       	st	Z, r24
    1a60:	89 c0       	rjmp	.+274    	; 0x1b74 <KeyBad_Pressed+0x31c>
			else
			{

			/*R1=1, R2=0, R3=1*/
			DIO_voidWriteVal(PortD,Pin2,Five_Volt);
    1a62:	83 e0       	ldi	r24, 0x03	; 3
    1a64:	62 e0       	ldi	r22, 0x02	; 2
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
			DIO_voidWriteVal(PortD,Pin3,Zero_Volt);
    1a6c:	83 e0       	ldi	r24, 0x03	; 3
    1a6e:	63 e0       	ldi	r22, 0x03	; 3
    1a70:	40 e0       	ldi	r20, 0x00	; 0
    1a72:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
			DIO_voidWriteVal(PortD,Pin4,Five_Volt);
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	64 e0       	ldi	r22, 0x04	; 4
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>

			C1=DIO_u8GetVal(PortA,Pin3);
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	63 e0       	ldi	r22, 0x03	; 3
    1a84:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    1a88:	8b 83       	std	Y+3, r24	; 0x03
			C2=DIO_u8GetVal(PortD,Pin6);
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	66 e0       	ldi	r22, 0x06	; 6
    1a8e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    1a92:	8a 83       	std	Y+2, r24	; 0x02
			C3=DIO_u8GetVal(PortD,Pin5);
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	65 e0       	ldi	r22, 0x05	; 5
    1a98:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    1a9c:	89 83       	std	Y+1, r24	; 0x01

			if(!C1 && !(*key=='4') )
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	88 23       	and	r24, r24
    1aa2:	51 f4       	brne	.+20     	; 0x1ab8 <KeyBad_Pressed+0x260>
    1aa4:	e8 85       	ldd	r30, Y+8	; 0x08
    1aa6:	f9 85       	ldd	r31, Y+9	; 0x09
    1aa8:	80 81       	ld	r24, Z
    1aaa:	84 33       	cpi	r24, 0x34	; 52
    1aac:	29 f0       	breq	.+10     	; 0x1ab8 <KeyBad_Pressed+0x260>
				*key='4';
    1aae:	e8 85       	ldd	r30, Y+8	; 0x08
    1ab0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ab2:	84 e3       	ldi	r24, 0x34	; 52
    1ab4:	80 83       	st	Z, r24
    1ab6:	5e c0       	rjmp	.+188    	; 0x1b74 <KeyBad_Pressed+0x31c>
			else if(!C2 && !(*key=='5') )
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	88 23       	and	r24, r24
    1abc:	51 f4       	brne	.+20     	; 0x1ad2 <KeyBad_Pressed+0x27a>
    1abe:	e8 85       	ldd	r30, Y+8	; 0x08
    1ac0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ac2:	80 81       	ld	r24, Z
    1ac4:	85 33       	cpi	r24, 0x35	; 53
    1ac6:	29 f0       	breq	.+10     	; 0x1ad2 <KeyBad_Pressed+0x27a>
				*key='5';
    1ac8:	e8 85       	ldd	r30, Y+8	; 0x08
    1aca:	f9 85       	ldd	r31, Y+9	; 0x09
    1acc:	85 e3       	ldi	r24, 0x35	; 53
    1ace:	80 83       	st	Z, r24
    1ad0:	51 c0       	rjmp	.+162    	; 0x1b74 <KeyBad_Pressed+0x31c>
			else if(!C3 && !(*key=='6') )
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	88 23       	and	r24, r24
    1ad6:	51 f4       	brne	.+20     	; 0x1aec <KeyBad_Pressed+0x294>
    1ad8:	e8 85       	ldd	r30, Y+8	; 0x08
    1ada:	f9 85       	ldd	r31, Y+9	; 0x09
    1adc:	80 81       	ld	r24, Z
    1ade:	86 33       	cpi	r24, 0x36	; 54
    1ae0:	29 f0       	breq	.+10     	; 0x1aec <KeyBad_Pressed+0x294>
				*key='6';
    1ae2:	e8 85       	ldd	r30, Y+8	; 0x08
    1ae4:	f9 85       	ldd	r31, Y+9	; 0x09
    1ae6:	86 e3       	ldi	r24, 0x36	; 54
    1ae8:	80 83       	st	Z, r24
    1aea:	44 c0       	rjmp	.+136    	; 0x1b74 <KeyBad_Pressed+0x31c>
			else
			{

			/*R1=1, R2=1, R3=0*/
			DIO_voidWriteVal(PortD,Pin2,Five_Volt);
    1aec:	83 e0       	ldi	r24, 0x03	; 3
    1aee:	62 e0       	ldi	r22, 0x02	; 2
    1af0:	41 e0       	ldi	r20, 0x01	; 1
    1af2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
			DIO_voidWriteVal(PortD,Pin3,Five_Volt);
    1af6:	83 e0       	ldi	r24, 0x03	; 3
    1af8:	63 e0       	ldi	r22, 0x03	; 3
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
			DIO_voidWriteVal(PortD,Pin4,Zero_Volt);
    1b00:	83 e0       	ldi	r24, 0x03	; 3
    1b02:	64 e0       	ldi	r22, 0x04	; 4
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>

			C1=DIO_u8GetVal(PortA,Pin3);
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	63 e0       	ldi	r22, 0x03	; 3
    1b0e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    1b12:	8b 83       	std	Y+3, r24	; 0x03
			C2=DIO_u8GetVal(PortD,Pin6);
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	66 e0       	ldi	r22, 0x06	; 6
    1b18:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    1b1c:	8a 83       	std	Y+2, r24	; 0x02
			C3=DIO_u8GetVal(PortD,Pin5);
    1b1e:	83 e0       	ldi	r24, 0x03	; 3
    1b20:	65 e0       	ldi	r22, 0x05	; 5
    1b22:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DIO_u8GetVal>
    1b26:	89 83       	std	Y+1, r24	; 0x01

			if(!C1 && !(*key=='7') )
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	88 23       	and	r24, r24
    1b2c:	51 f4       	brne	.+20     	; 0x1b42 <KeyBad_Pressed+0x2ea>
    1b2e:	e8 85       	ldd	r30, Y+8	; 0x08
    1b30:	f9 85       	ldd	r31, Y+9	; 0x09
    1b32:	80 81       	ld	r24, Z
    1b34:	87 33       	cpi	r24, 0x37	; 55
    1b36:	29 f0       	breq	.+10     	; 0x1b42 <KeyBad_Pressed+0x2ea>
				*key='7';
    1b38:	e8 85       	ldd	r30, Y+8	; 0x08
    1b3a:	f9 85       	ldd	r31, Y+9	; 0x09
    1b3c:	87 e3       	ldi	r24, 0x37	; 55
    1b3e:	80 83       	st	Z, r24
    1b40:	19 c0       	rjmp	.+50     	; 0x1b74 <KeyBad_Pressed+0x31c>
			else if(!C2 && !(*key=='8') )
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	88 23       	and	r24, r24
    1b46:	51 f4       	brne	.+20     	; 0x1b5c <KeyBad_Pressed+0x304>
    1b48:	e8 85       	ldd	r30, Y+8	; 0x08
    1b4a:	f9 85       	ldd	r31, Y+9	; 0x09
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 33       	cpi	r24, 0x38	; 56
    1b50:	29 f0       	breq	.+10     	; 0x1b5c <KeyBad_Pressed+0x304>
				*key='8';
    1b52:	e8 85       	ldd	r30, Y+8	; 0x08
    1b54:	f9 85       	ldd	r31, Y+9	; 0x09
    1b56:	88 e3       	ldi	r24, 0x38	; 56
    1b58:	80 83       	st	Z, r24
    1b5a:	0c c0       	rjmp	.+24     	; 0x1b74 <KeyBad_Pressed+0x31c>
			else if(!C3 && !(*key=='9') )
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	88 23       	and	r24, r24
    1b60:	49 f4       	brne	.+18     	; 0x1b74 <KeyBad_Pressed+0x31c>
    1b62:	e8 85       	ldd	r30, Y+8	; 0x08
    1b64:	f9 85       	ldd	r31, Y+9	; 0x09
    1b66:	80 81       	ld	r24, Z
    1b68:	89 33       	cpi	r24, 0x39	; 57
    1b6a:	21 f0       	breq	.+8      	; 0x1b74 <KeyBad_Pressed+0x31c>
				*key='9';
    1b6c:	e8 85       	ldd	r30, Y+8	; 0x08
    1b6e:	f9 85       	ldd	r31, Y+9	; 0x09
    1b70:	89 e3       	ldi	r24, 0x39	; 57
    1b72:	80 83       	st	Z, r24
			}
		}

		if(*key)
    1b74:	e8 85       	ldd	r30, Y+8	; 0x08
    1b76:	f9 85       	ldd	r31, Y+9	; 0x09
    1b78:	80 81       	ld	r24, Z
    1b7a:	88 23       	and	r24, r24
    1b7c:	19 f0       	breq	.+6      	; 0x1b84 <KeyBad_Pressed+0x32c>
			u8return=1;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	8f 83       	std	Y+7, r24	; 0x07
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <KeyBad_Pressed+0x32e>
		else
			u8return=0;
    1b84:	1f 82       	std	Y+7, r1	; 0x07
		}
	return u8return;
    1b86:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1b88:	2a 96       	adiw	r28, 0x0a	; 10
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <KeyBad_LastPressed>:

u8 KeyBad_LastPressed(u8* key)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	62 97       	sbiw	r28, 0x12	; 18
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	9a 8b       	std	Y+18, r25	; 0x12
    1bb0:	89 8b       	std	Y+17, r24	; 0x11
	u8 key1,u8return;
	if(KeyBad_Pressed(key,1))
    1bb2:	89 89       	ldd	r24, Y+17	; 0x11
    1bb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb6:	61 e0       	ldi	r22, 0x01	; 1
    1bb8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <KeyBad_Pressed>
    1bbc:	88 23       	and	r24, r24
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <KeyBad_LastPressed+0x28>
    1bc0:	8b c0       	rjmp	.+278    	; 0x1cd8 <KeyBad_LastPressed+0x13e>
	{
		key1=*key;
    1bc2:	e9 89       	ldd	r30, Y+17	; 0x11
    1bc4:	fa 89       	ldd	r31, Y+18	; 0x12
    1bc6:	80 81       	ld	r24, Z
    1bc8:	88 8b       	std	Y+16, r24	; 0x10
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	a0 e8       	ldi	r26, 0x80	; 128
    1bd0:	bf e3       	ldi	r27, 0x3F	; 63
    1bd2:	8b 87       	std	Y+11, r24	; 0x0b
    1bd4:	9c 87       	std	Y+12, r25	; 0x0c
    1bd6:	ad 87       	std	Y+13, r26	; 0x0d
    1bd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4a e7       	ldi	r20, 0x7A	; 122
    1be8:	53 e4       	ldi	r21, 0x43	; 67
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8f 83       	std	Y+7, r24	; 0x07
    1bf4:	98 87       	std	Y+8, r25	; 0x08
    1bf6:	a9 87       	std	Y+9, r26	; 0x09
    1bf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfc:	78 85       	ldd	r23, Y+8	; 0x08
    1bfe:	89 85       	ldd	r24, Y+9	; 0x09
    1c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	5f e3       	ldi	r21, 0x3F	; 63
    1c0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0e:	88 23       	and	r24, r24
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <KeyBad_LastPressed+0x82>
		__ticks = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9e 83       	std	Y+6, r25	; 0x06
    1c18:	8d 83       	std	Y+5, r24	; 0x05
    1c1a:	3f c0       	rjmp	.+126    	; 0x1c9a <KeyBad_LastPressed+0x100>
	else if (__tmp > 65535)
    1c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1e:	78 85       	ldd	r23, Y+8	; 0x08
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	3f ef       	ldi	r19, 0xFF	; 255
    1c28:	4f e7       	ldi	r20, 0x7F	; 127
    1c2a:	57 e4       	ldi	r21, 0x47	; 71
    1c2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c30:	18 16       	cp	r1, r24
    1c32:	4c f5       	brge	.+82     	; 0x1c86 <KeyBad_LastPressed+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e2       	ldi	r20, 0x20	; 32
    1c42:	51 e4       	ldi	r21, 0x41	; 65
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	cd 01       	movw	r24, r26
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9e 83       	std	Y+6, r25	; 0x06
    1c5a:	8d 83       	std	Y+5, r24	; 0x05
    1c5c:	0f c0       	rjmp	.+30     	; 0x1c7c <KeyBad_LastPressed+0xe2>
    1c5e:	89 e1       	ldi	r24, 0x19	; 25
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9c 83       	std	Y+4, r25	; 0x04
    1c64:	8b 83       	std	Y+3, r24	; 0x03
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <KeyBad_LastPressed+0xd0>
    1c6e:	9c 83       	std	Y+4, r25	; 0x04
    1c70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
    1c74:	9e 81       	ldd	r25, Y+6	; 0x06
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	69 f7       	brne	.-38     	; 0x1c5e <KeyBad_LastPressed+0xc4>
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <KeyBad_LastPressed+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c86:	6f 81       	ldd	r22, Y+7	; 0x07
    1c88:	78 85       	ldd	r23, Y+8	; 0x08
    1c8a:	89 85       	ldd	r24, Y+9	; 0x09
    1c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9e 83       	std	Y+6, r25	; 0x06
    1c98:	8d 83       	std	Y+5, r24	; 0x05
    1c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <KeyBad_LastPressed+0x10c>
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		if(KeyBad_Pressed(key,2))
    1cae:	89 89       	ldd	r24, Y+17	; 0x11
    1cb0:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb2:	62 e0       	ldi	r22, 0x02	; 2
    1cb4:	0e 94 2c 0c 	call	0x1858	; 0x1858 <KeyBad_Pressed>
    1cb8:	88 23       	and	r24, r24
    1cba:	29 f0       	breq	.+10     	; 0x1cc6 <KeyBad_LastPressed+0x12c>
			u8return=*key;
    1cbc:	e9 89       	ldd	r30, Y+17	; 0x11
    1cbe:	fa 89       	ldd	r31, Y+18	; 0x12
    1cc0:	80 81       	ld	r24, Z
    1cc2:	8f 87       	std	Y+15, r24	; 0x0f
    1cc4:	0a c0       	rjmp	.+20     	; 0x1cda <KeyBad_LastPressed+0x140>
		else
		{
			*key=key1;
    1cc6:	e9 89       	ldd	r30, Y+17	; 0x11
    1cc8:	fa 89       	ldd	r31, Y+18	; 0x12
    1cca:	88 89       	ldd	r24, Y+16	; 0x10
    1ccc:	80 83       	st	Z, r24
			u8return=*key;
    1cce:	e9 89       	ldd	r30, Y+17	; 0x11
    1cd0:	fa 89       	ldd	r31, Y+18	; 0x12
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8f 87       	std	Y+15, r24	; 0x0f
    1cd6:	01 c0       	rjmp	.+2      	; 0x1cda <KeyBad_LastPressed+0x140>
		}
	}
	else u8return=0;
    1cd8:	1f 86       	std	Y+15, r1	; 0x0f

	return u8return;
    1cda:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1cdc:	62 96       	adiw	r28, 0x12	; 18
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <LCD_WriteCommand>:
static u8 charact_number=0;
static u8 current_charact=0;
static u8 English_Char=0;

void LCD_WriteCommand(u8 com)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	6d 97       	sbiw	r28, 0x1d	; 29
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_voidWriteVal(PortD,Pin0,Zero_Volt); /*RS=0*/
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_High(com)));
    1d0e:	a5 e3       	ldi	r26, 0x35	; 53
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e5 e3       	ldi	r30, 0x35	; 53
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	28 2f       	mov	r18, r24
    1d1a:	2f 70       	andi	r18, 0x0F	; 15
    1d1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d1e:	82 95       	swap	r24
    1d20:	8f 70       	andi	r24, 0x0F	; 15
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	90 70       	andi	r25, 0x00	; 0
    1d28:	82 95       	swap	r24
    1d2a:	92 95       	swap	r25
    1d2c:	90 7f       	andi	r25, 0xF0	; 240
    1d2e:	98 27       	eor	r25, r24
    1d30:	80 7f       	andi	r24, 0xF0	; 240
    1d32:	98 27       	eor	r25, r24
    1d34:	82 2b       	or	r24, r18
    1d36:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a0 e0       	ldi	r26, 0x00	; 0
    1d48:	b0 e4       	ldi	r27, 0x40	; 64
    1d4a:	89 8f       	std	Y+25, r24	; 0x19
    1d4c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d4e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	69 8d       	ldd	r22, Y+25	; 0x19
    1d54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a e7       	ldi	r20, 0x7A	; 122
    1d60:	53 e4       	ldi	r21, 0x43	; 67
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8d 8b       	std	Y+21, r24	; 0x15
    1d6c:	9e 8b       	std	Y+22, r25	; 0x16
    1d6e:	af 8b       	std	Y+23, r26	; 0x17
    1d70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d72:	6d 89       	ldd	r22, Y+21	; 0x15
    1d74:	7e 89       	ldd	r23, Y+22	; 0x16
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <LCD_WriteCommand+0xa6>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9c 8b       	std	Y+20, r25	; 0x14
    1d90:	8b 8b       	std	Y+19, r24	; 0x13
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <LCD_WriteCommand+0x124>
	else if (__tmp > 65535)
    1d94:	6d 89       	ldd	r22, Y+21	; 0x15
    1d96:	7e 89       	ldd	r23, Y+22	; 0x16
    1d98:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <LCD_WriteCommand+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	69 8d       	ldd	r22, Y+25	; 0x19
    1dae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9c 8b       	std	Y+20, r25	; 0x14
    1dd2:	8b 8b       	std	Y+19, r24	; 0x13
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <LCD_WriteCommand+0x106>
    1dd6:	89 e1       	ldi	r24, 0x19	; 25
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9a 8b       	std	Y+18, r25	; 0x12
    1ddc:	89 8b       	std	Y+17, r24	; 0x11
    1dde:	89 89       	ldd	r24, Y+17	; 0x11
    1de0:	9a 89       	ldd	r25, Y+18	; 0x12
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD_WriteCommand+0xf4>
    1de6:	9a 8b       	std	Y+18, r25	; 0x12
    1de8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	8b 89       	ldd	r24, Y+19	; 0x13
    1dec:	9c 89       	ldd	r25, Y+20	; 0x14
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	9c 8b       	std	Y+20, r25	; 0x14
    1df2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	8b 89       	ldd	r24, Y+19	; 0x13
    1df6:	9c 89       	ldd	r25, Y+20	; 0x14
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <LCD_WriteCommand+0xe8>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <LCD_WriteCommand+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1e00:	7e 89       	ldd	r23, Y+22	; 0x16
    1e02:	8f 89       	ldd	r24, Y+23	; 0x17
    1e04:	98 8d       	ldd	r25, Y+24	; 0x18
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9c 8b       	std	Y+20, r25	; 0x14
    1e10:	8b 8b       	std	Y+19, r24	; 0x13
    1e12:	8b 89       	ldd	r24, Y+19	; 0x13
    1e14:	9c 89       	ldd	r25, Y+20	; 0x14
    1e16:	98 8b       	std	Y+16, r25	; 0x10
    1e18:	8f 87       	std	Y+15, r24	; 0x0f
    1e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1c:	98 89       	ldd	r25, Y+16	; 0x10
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_WriteCommand+0x130>
    1e22:	98 8b       	std	Y+16, r25	; 0x10
    1e24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_Low(com)));
    1e30:	a5 e3       	ldi	r26, 0x35	; 53
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e5 e3       	ldi	r30, 0x35	; 53
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	2f 70       	andi	r18, 0x0F	; 15
    1e3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	8f 70       	andi	r24, 0x0F	; 15
    1e46:	90 70       	andi	r25, 0x00	; 0
    1e48:	82 95       	swap	r24
    1e4a:	92 95       	swap	r25
    1e4c:	90 7f       	andi	r25, 0xF0	; 240
    1e4e:	98 27       	eor	r25, r24
    1e50:	80 7f       	andi	r24, 0xF0	; 240
    1e52:	98 27       	eor	r25, r24
    1e54:	82 2b       	or	r24, r18
    1e56:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    1e58:	83 e0       	ldi	r24, 0x03	; 3
    1e5a:	61 e0       	ldi	r22, 0x01	; 1
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e4       	ldi	r27, 0x40	; 64
    1e6a:	8b 87       	std	Y+11, r24	; 0x0b
    1e6c:	9c 87       	std	Y+12, r25	; 0x0c
    1e6e:	ad 87       	std	Y+13, r26	; 0x0d
    1e70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a e7       	ldi	r20, 0x7A	; 122
    1e80:	53 e4       	ldi	r21, 0x43	; 67
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8f 83       	std	Y+7, r24	; 0x07
    1e8c:	98 87       	std	Y+8, r25	; 0x08
    1e8e:	a9 87       	std	Y+9, r26	; 0x09
    1e90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e92:	6f 81       	ldd	r22, Y+7	; 0x07
    1e94:	78 85       	ldd	r23, Y+8	; 0x08
    1e96:	89 85       	ldd	r24, Y+9	; 0x09
    1e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <LCD_WriteCommand+0x1c6>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <LCD_WriteCommand+0x244>
	else if (__tmp > 65535)
    1eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb6:	78 85       	ldd	r23, Y+8	; 0x08
    1eb8:	89 85       	ldd	r24, Y+9	; 0x09
    1eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <LCD_WriteCommand+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9e 83       	std	Y+6, r25	; 0x06
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <LCD_WriteCommand+0x226>
    1ef6:	89 e1       	ldi	r24, 0x19	; 25
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9c 83       	std	Y+4, r25	; 0x04
    1efc:	8b 83       	std	Y+3, r24	; 0x03
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_WriteCommand+0x214>
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9e 83       	std	Y+6, r25	; 0x06
    1f12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	9e 81       	ldd	r25, Y+6	; 0x06
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <LCD_WriteCommand+0x208>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <LCD_WriteCommand+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f20:	78 85       	ldd	r23, Y+8	; 0x08
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_WriteCommand+0x250>
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	61 e0       	ldi	r22, 0x01	; 1
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>

}
    1f50:	6d 96       	adiw	r28, 0x1d	; 29
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <LCD_Init>:

void LCD_Init(void)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	aa 97       	sbiw	r28, 0x2a	; 42
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetDir(PortD,Pin0,Output); /*RS(DDRD,0) output*/
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortD,Pin1,Output); /*E(DDRD,1) output*/
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	61 e0       	ldi	r22, 0x01	; 1
    1f84:	41 e0       	ldi	r20, 0x01	; 1
    1f86:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	/*LCD Data Bus as output */
	DIO_voidSetDir(PortC,Pin4,Output);
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
    1f8c:	64 e0       	ldi	r22, 0x04	; 4
    1f8e:	41 e0       	ldi	r20, 0x01	; 1
    1f90:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin5,Output);
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	65 e0       	ldi	r22, 0x05	; 5
    1f98:	41 e0       	ldi	r20, 0x01	; 1
    1f9a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin6,Output);
    1f9e:	82 e0       	ldi	r24, 0x02	; 2
    1fa0:	66 e0       	ldi	r22, 0x06	; 6
    1fa2:	41 e0       	ldi	r20, 0x01	; 1
    1fa4:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin7,Output);
    1fa8:	82 e0       	ldi	r24, 0x02	; 2
    1faa:	67 e0       	ldi	r22, 0x07	; 7
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a8 e4       	ldi	r26, 0x48	; 72
    1fb8:	b2 e4       	ldi	r27, 0x42	; 66
    1fba:	8f a3       	std	Y+39, r24	; 0x27
    1fbc:	98 a7       	std	Y+40, r25	; 0x28
    1fbe:	a9 a7       	std	Y+41, r26	; 0x29
    1fc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a e7       	ldi	r20, 0x7A	; 122
    1fd0:	53 e4       	ldi	r21, 0x43	; 67
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8b a3       	std	Y+35, r24	; 0x23
    1fdc:	9c a3       	std	Y+36, r25	; 0x24
    1fde:	ad a3       	std	Y+37, r26	; 0x25
    1fe0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fe2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <LCD_Init+0xa2>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9a a3       	std	Y+34, r25	; 0x22
    2000:	89 a3       	std	Y+33, r24	; 0x21
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <LCD_Init+0x120>
	else if (__tmp > 65535)
    2004:	6b a1       	ldd	r22, Y+35	; 0x23
    2006:	7c a1       	ldd	r23, Y+36	; 0x24
    2008:	8d a1       	ldd	r24, Y+37	; 0x25
    200a:	9e a1       	ldd	r25, Y+38	; 0x26
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <LCD_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	6f a1       	ldd	r22, Y+39	; 0x27
    201e:	78 a5       	ldd	r23, Y+40	; 0x28
    2020:	89 a5       	ldd	r24, Y+41	; 0x29
    2022:	9a a5       	ldd	r25, Y+42	; 0x2a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9a a3       	std	Y+34, r25	; 0x22
    2042:	89 a3       	std	Y+33, r24	; 0x21
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <LCD_Init+0x102>
    2046:	89 e1       	ldi	r24, 0x19	; 25
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	98 a3       	std	Y+32, r25	; 0x20
    204c:	8f 8f       	std	Y+31, r24	; 0x1f
    204e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2050:	98 a1       	ldd	r25, Y+32	; 0x20
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_Init+0xf0>
    2056:	98 a3       	std	Y+32, r25	; 0x20
    2058:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	89 a1       	ldd	r24, Y+33	; 0x21
    205c:	9a a1       	ldd	r25, Y+34	; 0x22
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	9a a3       	std	Y+34, r25	; 0x22
    2062:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	89 a1       	ldd	r24, Y+33	; 0x21
    2066:	9a a1       	ldd	r25, Y+34	; 0x22
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <LCD_Init+0xe4>
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <LCD_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	6b a1       	ldd	r22, Y+35	; 0x23
    2070:	7c a1       	ldd	r23, Y+36	; 0x24
    2072:	8d a1       	ldd	r24, Y+37	; 0x25
    2074:	9e a1       	ldd	r25, Y+38	; 0x26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9a a3       	std	Y+34, r25	; 0x22
    2080:	89 a3       	std	Y+33, r24	; 0x21
    2082:	89 a1       	ldd	r24, Y+33	; 0x21
    2084:	9a a1       	ldd	r25, Y+34	; 0x22
    2086:	9e 8f       	std	Y+30, r25	; 0x1e
    2088:	8d 8f       	std	Y+29, r24	; 0x1d
    208a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    208c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_Init+0x12c>
    2092:	9e 8f       	std	Y+30, r25	; 0x1e
    2094:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(50);
	LCD_WriteCommand(0x02);
    2096:	82 e0       	ldi	r24, 0x02	; 2
    2098:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_WriteCommand>

	/*LCD_WriteCommand(0x20); for 1 line*/
	LCD_WriteCommand(0x28); /*for 2 lines*/
    209c:	88 e2       	ldi	r24, 0x28	; 40
    209e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_WriteCommand>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e2       	ldi	r26, 0x20	; 32
    20a8:	b1 e4       	ldi	r27, 0x41	; 65
    20aa:	89 8f       	std	Y+25, r24	; 0x19
    20ac:	9a 8f       	std	Y+26, r25	; 0x1a
    20ae:	ab 8f       	std	Y+27, r26	; 0x1b
    20b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b2:	69 8d       	ldd	r22, Y+25	; 0x19
    20b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a e7       	ldi	r20, 0x7A	; 122
    20c0:	53 e4       	ldi	r21, 0x43	; 67
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8d 8b       	std	Y+21, r24	; 0x15
    20cc:	9e 8b       	std	Y+22, r25	; 0x16
    20ce:	af 8b       	std	Y+23, r26	; 0x17
    20d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20d2:	6d 89       	ldd	r22, Y+21	; 0x15
    20d4:	7e 89       	ldd	r23, Y+22	; 0x16
    20d6:	8f 89       	ldd	r24, Y+23	; 0x17
    20d8:	98 8d       	ldd	r25, Y+24	; 0x18
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <LCD_Init+0x192>
		__ticks = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <LCD_Init+0x210>
	else if (__tmp > 65535)
    20f4:	6d 89       	ldd	r22, Y+21	; 0x15
    20f6:	7e 89       	ldd	r23, Y+22	; 0x16
    20f8:	8f 89       	ldd	r24, Y+23	; 0x17
    20fa:	98 8d       	ldd	r25, Y+24	; 0x18
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	4c f5       	brge	.+82     	; 0x215e <LCD_Init+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	69 8d       	ldd	r22, Y+25	; 0x19
    210e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2110:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2112:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e2       	ldi	r20, 0x20	; 32
    211a:	51 e4       	ldi	r21, 0x41	; 65
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	9c 8b       	std	Y+20, r25	; 0x14
    2132:	8b 8b       	std	Y+19, r24	; 0x13
    2134:	0f c0       	rjmp	.+30     	; 0x2154 <LCD_Init+0x1f2>
    2136:	89 e1       	ldi	r24, 0x19	; 25
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9a 8b       	std	Y+18, r25	; 0x12
    213c:	89 8b       	std	Y+17, r24	; 0x11
    213e:	89 89       	ldd	r24, Y+17	; 0x11
    2140:	9a 89       	ldd	r25, Y+18	; 0x12
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_Init+0x1e0>
    2146:	9a 8b       	std	Y+18, r25	; 0x12
    2148:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214a:	8b 89       	ldd	r24, Y+19	; 0x13
    214c:	9c 89       	ldd	r25, Y+20	; 0x14
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	9c 8b       	std	Y+20, r25	; 0x14
    2152:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	8b 89       	ldd	r24, Y+19	; 0x13
    2156:	9c 89       	ldd	r25, Y+20	; 0x14
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	69 f7       	brne	.-38     	; 0x2136 <LCD_Init+0x1d4>
    215c:	14 c0       	rjmp	.+40     	; 0x2186 <LCD_Init+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	6d 89       	ldd	r22, Y+21	; 0x15
    2160:	7e 89       	ldd	r23, Y+22	; 0x16
    2162:	8f 89       	ldd	r24, Y+23	; 0x17
    2164:	98 8d       	ldd	r25, Y+24	; 0x18
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9c 8b       	std	Y+20, r25	; 0x14
    2170:	8b 8b       	std	Y+19, r24	; 0x13
    2172:	8b 89       	ldd	r24, Y+19	; 0x13
    2174:	9c 89       	ldd	r25, Y+20	; 0x14
    2176:	98 8b       	std	Y+16, r25	; 0x10
    2178:	8f 87       	std	Y+15, r24	; 0x0f
    217a:	8f 85       	ldd	r24, Y+15	; 0x0f
    217c:	98 89       	ldd	r25, Y+16	; 0x10
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <LCD_Init+0x21c>
    2182:	98 8b       	std	Y+16, r25	; 0x10
    2184:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_WriteCommand(0x0c);
    2186:	8c e0       	ldi	r24, 0x0C	; 12
    2188:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_WriteCommand>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a0 e2       	ldi	r26, 0x20	; 32
    2192:	b1 e4       	ldi	r27, 0x41	; 65
    2194:	8b 87       	std	Y+11, r24	; 0x0b
    2196:	9c 87       	std	Y+12, r25	; 0x0c
    2198:	ad 87       	std	Y+13, r26	; 0x0d
    219a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	6b 85       	ldd	r22, Y+11	; 0x0b
    219e:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a e7       	ldi	r20, 0x7A	; 122
    21aa:	53 e4       	ldi	r21, 0x43	; 67
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8f 83       	std	Y+7, r24	; 0x07
    21b6:	98 87       	std	Y+8, r25	; 0x08
    21b8:	a9 87       	std	Y+9, r26	; 0x09
    21ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21bc:	6f 81       	ldd	r22, Y+7	; 0x07
    21be:	78 85       	ldd	r23, Y+8	; 0x08
    21c0:	89 85       	ldd	r24, Y+9	; 0x09
    21c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <LCD_Init+0x27c>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <LCD_Init+0x2fa>
	else if (__tmp > 65535)
    21de:	6f 81       	ldd	r22, Y+7	; 0x07
    21e0:	78 85       	ldd	r23, Y+8	; 0x08
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <LCD_Init+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
    221e:	0f c0       	rjmp	.+30     	; 0x223e <LCD_Init+0x2dc>
    2220:	89 e1       	ldi	r24, 0x19	; 25
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	8b 83       	std	Y+3, r24	; 0x03
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_Init+0x2ca>
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <LCD_Init+0x2be>
    2246:	14 c0       	rjmp	.+40     	; 0x2270 <LCD_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_Init+0x306>
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	LCD_CLear();
    2270:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_CLear>
	LCD_Set_Entry_Mode(1);
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_Set_Entry_Mode>

}
    227a:	aa 96       	adiw	r28, 0x2a	; 42
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <LCD_WriteData>:

void LCD_WriteData(u8 com)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	6d 97       	sbiw	r28, 0x1d	; 29
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	8d 8f       	std	Y+29, r24	; 0x1d

	Set_Bit(PORTD,0); /*RS*/
    22a2:	a2 e3       	ldi	r26, 0x32	; 50
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e2 e3       	ldi	r30, 0x32	; 50
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	81 60       	ori	r24, 0x01	; 1
    22ae:	8c 93       	st	X, r24

	Assign_Nibble_High(PORTC,(Get_Nibble_High(com)));
    22b0:	a5 e3       	ldi	r26, 0x35	; 53
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e5 e3       	ldi	r30, 0x35	; 53
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	28 2f       	mov	r18, r24
    22bc:	2f 70       	andi	r18, 0x0F	; 15
    22be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22c0:	82 95       	swap	r24
    22c2:	8f 70       	andi	r24, 0x0F	; 15
    22c4:	88 2f       	mov	r24, r24
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	90 70       	andi	r25, 0x00	; 0
    22ca:	82 95       	swap	r24
    22cc:	92 95       	swap	r25
    22ce:	90 7f       	andi	r25, 0xF0	; 240
    22d0:	98 27       	eor	r25, r24
    22d2:	80 7f       	andi	r24, 0xF0	; 240
    22d4:	98 27       	eor	r25, r24
    22d6:	82 2b       	or	r24, r18
    22d8:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    22da:	83 e0       	ldi	r24, 0x03	; 3
    22dc:	61 e0       	ldi	r22, 0x01	; 1
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	a0 ea       	ldi	r26, 0xA0	; 160
    22ea:	b1 e4       	ldi	r27, 0x41	; 65
    22ec:	89 8f       	std	Y+25, r24	; 0x19
    22ee:	9a 8f       	std	Y+26, r25	; 0x1a
    22f0:	ab 8f       	std	Y+27, r26	; 0x1b
    22f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	69 8d       	ldd	r22, Y+25	; 0x19
    22f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a e7       	ldi	r20, 0x7A	; 122
    2302:	53 e4       	ldi	r21, 0x43	; 67
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	8d 8b       	std	Y+21, r24	; 0x15
    230e:	9e 8b       	std	Y+22, r25	; 0x16
    2310:	af 8b       	std	Y+23, r26	; 0x17
    2312:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2314:	6d 89       	ldd	r22, Y+21	; 0x15
    2316:	7e 89       	ldd	r23, Y+22	; 0x16
    2318:	8f 89       	ldd	r24, Y+23	; 0x17
    231a:	98 8d       	ldd	r25, Y+24	; 0x18
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	2c f4       	brge	.+10     	; 0x2336 <LCD_WriteData+0xaa>
		__ticks = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9c 8b       	std	Y+20, r25	; 0x14
    2332:	8b 8b       	std	Y+19, r24	; 0x13
    2334:	3f c0       	rjmp	.+126    	; 0x23b4 <LCD_WriteData+0x128>
	else if (__tmp > 65535)
    2336:	6d 89       	ldd	r22, Y+21	; 0x15
    2338:	7e 89       	ldd	r23, Y+22	; 0x16
    233a:	8f 89       	ldd	r24, Y+23	; 0x17
    233c:	98 8d       	ldd	r25, Y+24	; 0x18
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	4c f5       	brge	.+82     	; 0x23a0 <LCD_WriteData+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	69 8d       	ldd	r22, Y+25	; 0x19
    2350:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2352:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2354:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9c 8b       	std	Y+20, r25	; 0x14
    2374:	8b 8b       	std	Y+19, r24	; 0x13
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <LCD_WriteData+0x10a>
    2378:	89 e1       	ldi	r24, 0x19	; 25
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9a 8b       	std	Y+18, r25	; 0x12
    237e:	89 8b       	std	Y+17, r24	; 0x11
    2380:	89 89       	ldd	r24, Y+17	; 0x11
    2382:	9a 89       	ldd	r25, Y+18	; 0x12
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <LCD_WriteData+0xf8>
    2388:	9a 8b       	std	Y+18, r25	; 0x12
    238a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	8b 89       	ldd	r24, Y+19	; 0x13
    238e:	9c 89       	ldd	r25, Y+20	; 0x14
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9c 8b       	std	Y+20, r25	; 0x14
    2394:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	8b 89       	ldd	r24, Y+19	; 0x13
    2398:	9c 89       	ldd	r25, Y+20	; 0x14
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	69 f7       	brne	.-38     	; 0x2378 <LCD_WriteData+0xec>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <LCD_WriteData+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a0:	6d 89       	ldd	r22, Y+21	; 0x15
    23a2:	7e 89       	ldd	r23, Y+22	; 0x16
    23a4:	8f 89       	ldd	r24, Y+23	; 0x17
    23a6:	98 8d       	ldd	r25, Y+24	; 0x18
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9c 8b       	std	Y+20, r25	; 0x14
    23b2:	8b 8b       	std	Y+19, r24	; 0x13
    23b4:	8b 89       	ldd	r24, Y+19	; 0x13
    23b6:	9c 89       	ldd	r25, Y+20	; 0x14
    23b8:	98 8b       	std	Y+16, r25	; 0x10
    23ba:	8f 87       	std	Y+15, r24	; 0x0f
    23bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23be:	98 89       	ldd	r25, Y+16	; 0x10
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <LCD_WriteData+0x134>
    23c4:	98 8b       	std	Y+16, r25	; 0x10
    23c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    23c8:	83 e0       	ldi	r24, 0x03	; 3
    23ca:	61 e0       	ldi	r22, 0x01	; 1
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_Low(com)));
    23d2:	a5 e3       	ldi	r26, 0x35	; 53
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e5 e3       	ldi	r30, 0x35	; 53
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	28 2f       	mov	r18, r24
    23de:	2f 70       	andi	r18, 0x0F	; 15
    23e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	8f 70       	andi	r24, 0x0F	; 15
    23e8:	90 70       	andi	r25, 0x00	; 0
    23ea:	82 95       	swap	r24
    23ec:	92 95       	swap	r25
    23ee:	90 7f       	andi	r25, 0xF0	; 240
    23f0:	98 27       	eor	r25, r24
    23f2:	80 7f       	andi	r24, 0xF0	; 240
    23f4:	98 27       	eor	r25, r24
    23f6:	82 2b       	or	r24, r18
    23f8:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    23fa:	83 e0       	ldi	r24, 0x03	; 3
    23fc:	61 e0       	ldi	r22, 0x01	; 1
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a0 ea       	ldi	r26, 0xA0	; 160
    240a:	b1 e4       	ldi	r27, 0x41	; 65
    240c:	8b 87       	std	Y+11, r24	; 0x0b
    240e:	9c 87       	std	Y+12, r25	; 0x0c
    2410:	ad 87       	std	Y+13, r26	; 0x0d
    2412:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2414:	6b 85       	ldd	r22, Y+11	; 0x0b
    2416:	7c 85       	ldd	r23, Y+12	; 0x0c
    2418:	8d 85       	ldd	r24, Y+13	; 0x0d
    241a:	9e 85       	ldd	r25, Y+14	; 0x0e
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	4a e7       	ldi	r20, 0x7A	; 122
    2422:	53 e4       	ldi	r21, 0x43	; 67
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	8f 83       	std	Y+7, r24	; 0x07
    242e:	98 87       	std	Y+8, r25	; 0x08
    2430:	a9 87       	std	Y+9, r26	; 0x09
    2432:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2434:	6f 81       	ldd	r22, Y+7	; 0x07
    2436:	78 85       	ldd	r23, Y+8	; 0x08
    2438:	89 85       	ldd	r24, Y+9	; 0x09
    243a:	9a 85       	ldd	r25, Y+10	; 0x0a
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e8       	ldi	r20, 0x80	; 128
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	2c f4       	brge	.+10     	; 0x2456 <LCD_WriteData+0x1ca>
		__ticks = 1;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9e 83       	std	Y+6, r25	; 0x06
    2452:	8d 83       	std	Y+5, r24	; 0x05
    2454:	3f c0       	rjmp	.+126    	; 0x24d4 <LCD_WriteData+0x248>
	else if (__tmp > 65535)
    2456:	6f 81       	ldd	r22, Y+7	; 0x07
    2458:	78 85       	ldd	r23, Y+8	; 0x08
    245a:	89 85       	ldd	r24, Y+9	; 0x09
    245c:	9a 85       	ldd	r25, Y+10	; 0x0a
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	3f ef       	ldi	r19, 0xFF	; 255
    2462:	4f e7       	ldi	r20, 0x7F	; 127
    2464:	57 e4       	ldi	r21, 0x47	; 71
    2466:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    246a:	18 16       	cp	r1, r24
    246c:	4c f5       	brge	.+82     	; 0x24c0 <LCD_WriteData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2470:	7c 85       	ldd	r23, Y+12	; 0x0c
    2472:	8d 85       	ldd	r24, Y+13	; 0x0d
    2474:	9e 85       	ldd	r25, Y+14	; 0x0e
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e2       	ldi	r20, 0x20	; 32
    247c:	51 e4       	ldi	r21, 0x41	; 65
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	bc 01       	movw	r22, r24
    2488:	cd 01       	movw	r24, r26
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	9e 83       	std	Y+6, r25	; 0x06
    2494:	8d 83       	std	Y+5, r24	; 0x05
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <LCD_WriteData+0x22a>
    2498:	89 e1       	ldi	r24, 0x19	; 25
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9c 83       	std	Y+4, r25	; 0x04
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	9c 81       	ldd	r25, Y+4	; 0x04
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <LCD_WriteData+0x218>
    24a8:	9c 83       	std	Y+4, r25	; 0x04
    24aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	9e 83       	std	Y+6, r25	; 0x06
    24b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b6:	8d 81       	ldd	r24, Y+5	; 0x05
    24b8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	69 f7       	brne	.-38     	; 0x2498 <LCD_WriteData+0x20c>
    24be:	14 c0       	rjmp	.+40     	; 0x24e8 <LCD_WriteData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c0:	6f 81       	ldd	r22, Y+7	; 0x07
    24c2:	78 85       	ldd	r23, Y+8	; 0x08
    24c4:	89 85       	ldd	r24, Y+9	; 0x09
    24c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9e 83       	std	Y+6, r25	; 0x06
    24d2:	8d 83       	std	Y+5, r24	; 0x05
    24d4:	8d 81       	ldd	r24, Y+5	; 0x05
    24d6:	9e 81       	ldd	r25, Y+6	; 0x06
    24d8:	9a 83       	std	Y+2, r25	; 0x02
    24da:	89 83       	std	Y+1, r24	; 0x01
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	9a 81       	ldd	r25, Y+2	; 0x02
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <LCD_WriteData+0x254>
    24e4:	9a 83       	std	Y+2, r25	; 0x02
    24e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	61 e0       	ldi	r22, 0x01	; 1
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
	English_Char++;
    24f2:	80 91 72 00 	lds	r24, 0x0072
    24f6:	8f 5f       	subi	r24, 0xFF	; 255
    24f8:	80 93 72 00 	sts	0x0072, r24

}
    24fc:	6d 96       	adiw	r28, 0x1d	; 29
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <LCD_CLear>:

void LCD_CLear()
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	2e 97       	sbiw	r28, 0x0e	; 14
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x01);
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_WriteCommand>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	a0 ea       	ldi	r26, 0xA0	; 160
    252e:	b1 e4       	ldi	r27, 0x41	; 65
    2530:	8b 87       	std	Y+11, r24	; 0x0b
    2532:	9c 87       	std	Y+12, r25	; 0x0c
    2534:	ad 87       	std	Y+13, r26	; 0x0d
    2536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	6b 85       	ldd	r22, Y+11	; 0x0b
    253a:	7c 85       	ldd	r23, Y+12	; 0x0c
    253c:	8d 85       	ldd	r24, Y+13	; 0x0d
    253e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a e7       	ldi	r20, 0x7A	; 122
    2546:	53 e4       	ldi	r21, 0x43	; 67
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8f 83       	std	Y+7, r24	; 0x07
    2552:	98 87       	std	Y+8, r25	; 0x08
    2554:	a9 87       	std	Y+9, r26	; 0x09
    2556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <LCD_CLear+0x6c>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <LCD_CLear+0xea>
	else if (__tmp > 65535)
    257a:	6f 81       	ldd	r22, Y+7	; 0x07
    257c:	78 85       	ldd	r23, Y+8	; 0x08
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <LCD_CLear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	6b 85       	ldd	r22, Y+11	; 0x0b
    2594:	7c 85       	ldd	r23, Y+12	; 0x0c
    2596:	8d 85       	ldd	r24, Y+13	; 0x0d
    2598:	9e 85       	ldd	r25, Y+14	; 0x0e
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <LCD_CLear+0xcc>
    25bc:	89 e1       	ldi	r24, 0x19	; 25
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9c 83       	std	Y+4, r25	; 0x04
    25c2:	8b 83       	std	Y+3, r24	; 0x03
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <LCD_CLear+0xba>
    25cc:	9c 83       	std	Y+4, r25	; 0x04
    25ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	9e 81       	ldd	r25, Y+6	; 0x06
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <LCD_CLear+0xae>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <LCD_CLear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	8d 83       	std	Y+5, r24	; 0x05
    25f8:	8d 81       	ldd	r24, Y+5	; 0x05
    25fa:	9e 81       	ldd	r25, Y+6	; 0x06
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_CLear+0xf6>
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	charact_number=0;
    260c:	10 92 70 00 	sts	0x0070, r1
}
    2610:	2e 96       	adiw	r28, 0x0e	; 14
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <LCD_GoTo>:

void LCD_GoTo(u8 x, u8 y)
{
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	00 d0       	rcall	.+0      	; 0x2628 <LCD_GoTo+0x6>
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	6a 83       	std	Y+2, r22	; 0x02
	if(y)
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	88 23       	and	r24, r24
    2634:	29 f0       	breq	.+10     	; 0x2640 <LCD_GoTo+0x1e>
		English_Char=4*16+x;
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	80 5c       	subi	r24, 0xC0	; 192
    263a:	80 93 72 00 	sts	0x0072, r24
    263e:	03 c0       	rjmp	.+6      	; 0x2646 <LCD_GoTo+0x24>
	else
		English_Char=x;
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	80 93 72 00 	sts	0x0072, r24

	LCD_Set_DD_Add(English_Char);
    2646:	80 91 72 00 	lds	r24, 0x0072
    264a:	0e 94 11 15 	call	0x2a22	; 0x2a22 <LCD_Set_DD_Add>

}
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <LCD_WrtireString>:


u8 LCD_WrtireString(u8* str)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	00 d0       	rcall	.+0      	; 0x265e <LCD_WrtireString+0x6>
    265e:	00 d0       	rcall	.+0      	; 0x2660 <LCD_WrtireString+0x8>
    2660:	0f 92       	push	r0
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	9c 83       	std	Y+4, r25	; 0x04
    2668:	8b 83       	std	Y+3, r24	; 0x03
	u8 count=0;
    266a:	1a 82       	std	Y+2, r1	; 0x02
	u8 size=0;
    266c:	19 82       	std	Y+1, r1	; 0x01
    266e:	06 c0       	rjmp	.+12     	; 0x267c <LCD_WrtireString+0x24>

	while( (!((*(str+count))=='\0')) && size<=16)
	{
		count++;
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	8f 5f       	subi	r24, 0xFF	; 255
    2674:	8a 83       	std	Y+2, r24	; 0x02
		size++;
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	8f 5f       	subi	r24, 0xFF	; 255
    267a:	89 83       	std	Y+1, r24	; 0x01
u8 LCD_WrtireString(u8* str)
{
	u8 count=0;
	u8 size=0;

	while( (!((*(str+count))=='\0')) && size<=16)
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	fc 01       	movw	r30, r24
    2688:	e2 0f       	add	r30, r18
    268a:	f3 1f       	adc	r31, r19
    268c:	80 81       	ld	r24, Z
    268e:	88 23       	and	r24, r24
    2690:	19 f0       	breq	.+6      	; 0x2698 <LCD_WrtireString+0x40>
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	81 31       	cpi	r24, 0x11	; 17
    2696:	60 f3       	brcs	.-40     	; 0x2670 <LCD_WrtireString+0x18>
	{
		count++;
		size++;
	}

	if(size<=16)
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	81 31       	cpi	r24, 0x11	; 17
    269c:	b8 f4       	brcc	.+46     	; 0x26cc <LCD_WrtireString+0x74>
	{
		for(count=0;count<size;count++)
    269e:	1a 82       	std	Y+2, r1	; 0x02
    26a0:	0e c0       	rjmp	.+28     	; 0x26be <LCD_WrtireString+0x66>
			LCD_WriteData(*(str+count));
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	fc 01       	movw	r30, r24
    26ae:	e2 0f       	add	r30, r18
    26b0:	f3 1f       	adc	r31, r19
    26b2:	80 81       	ld	r24, Z
    26b4:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
		size++;
	}

	if(size<=16)
	{
		for(count=0;count<size;count++)
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	8f 5f       	subi	r24, 0xFF	; 255
    26bc:	8a 83       	std	Y+2, r24	; 0x02
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	98 17       	cp	r25, r24
    26c4:	70 f3       	brcs	.-36     	; 0x26a2 <LCD_WrtireString+0x4a>
			LCD_WriteData(*(str+count));
		return 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	8d 83       	std	Y+5, r24	; 0x05
    26ca:	01 c0       	rjmp	.+2      	; 0x26ce <LCD_WrtireString+0x76>
	}
	else
		return 0;
    26cc:	1d 82       	std	Y+5, r1	; 0x05
    26ce:	8d 81       	ldd	r24, Y+5	; 0x05

}
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <LCD_Set_CG_Add>:


void LCD_Set_CG_Add(u8 add)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	2f 97       	sbiw	r28, 0x0f	; 15
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_WriteCommand(add);
    26f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f8:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_WriteCommand>
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	a0 e2       	ldi	r26, 0x20	; 32
    2702:	b1 e4       	ldi	r27, 0x41	; 65
    2704:	8b 87       	std	Y+11, r24	; 0x0b
    2706:	9c 87       	std	Y+12, r25	; 0x0c
    2708:	ad 87       	std	Y+13, r26	; 0x0d
    270a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270c:	6b 85       	ldd	r22, Y+11	; 0x0b
    270e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2710:	8d 85       	ldd	r24, Y+13	; 0x0d
    2712:	9e 85       	ldd	r25, Y+14	; 0x0e
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	4a e7       	ldi	r20, 0x7A	; 122
    271a:	53 e4       	ldi	r21, 0x43	; 67
    271c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	8f 83       	std	Y+7, r24	; 0x07
    2726:	98 87       	std	Y+8, r25	; 0x08
    2728:	a9 87       	std	Y+9, r26	; 0x09
    272a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e8       	ldi	r20, 0x80	; 128
    273a:	5f e3       	ldi	r21, 0x3F	; 63
    273c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2740:	88 23       	and	r24, r24
    2742:	2c f4       	brge	.+10     	; 0x274e <LCD_Set_CG_Add+0x6e>
		__ticks = 1;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9e 83       	std	Y+6, r25	; 0x06
    274a:	8d 83       	std	Y+5, r24	; 0x05
    274c:	3f c0       	rjmp	.+126    	; 0x27cc <LCD_Set_CG_Add+0xec>
	else if (__tmp > 65535)
    274e:	6f 81       	ldd	r22, Y+7	; 0x07
    2750:	78 85       	ldd	r23, Y+8	; 0x08
    2752:	89 85       	ldd	r24, Y+9	; 0x09
    2754:	9a 85       	ldd	r25, Y+10	; 0x0a
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	3f ef       	ldi	r19, 0xFF	; 255
    275a:	4f e7       	ldi	r20, 0x7F	; 127
    275c:	57 e4       	ldi	r21, 0x47	; 71
    275e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2762:	18 16       	cp	r1, r24
    2764:	4c f5       	brge	.+82     	; 0x27b8 <LCD_Set_CG_Add+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2766:	6b 85       	ldd	r22, Y+11	; 0x0b
    2768:	7c 85       	ldd	r23, Y+12	; 0x0c
    276a:	8d 85       	ldd	r24, Y+13	; 0x0d
    276c:	9e 85       	ldd	r25, Y+14	; 0x0e
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e2       	ldi	r20, 0x20	; 32
    2774:	51 e4       	ldi	r21, 0x41	; 65
    2776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	bc 01       	movw	r22, r24
    2780:	cd 01       	movw	r24, r26
    2782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	9e 83       	std	Y+6, r25	; 0x06
    278c:	8d 83       	std	Y+5, r24	; 0x05
    278e:	0f c0       	rjmp	.+30     	; 0x27ae <LCD_Set_CG_Add+0xce>
    2790:	89 e1       	ldi	r24, 0x19	; 25
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9c 83       	std	Y+4, r25	; 0x04
    2796:	8b 83       	std	Y+3, r24	; 0x03
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	9c 81       	ldd	r25, Y+4	; 0x04
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <LCD_Set_CG_Add+0xbc>
    27a0:	9c 83       	std	Y+4, r25	; 0x04
    27a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	9e 83       	std	Y+6, r25	; 0x06
    27ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	69 f7       	brne	.-38     	; 0x2790 <LCD_Set_CG_Add+0xb0>
    27b6:	14 c0       	rjmp	.+40     	; 0x27e0 <LCD_Set_CG_Add+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ba:	78 85       	ldd	r23, Y+8	; 0x08
    27bc:	89 85       	ldd	r24, Y+9	; 0x09
    27be:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
    27cc:	8d 81       	ldd	r24, Y+5	; 0x05
    27ce:	9e 81       	ldd	r25, Y+6	; 0x06
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	f1 f7       	brne	.-4      	; 0x27d8 <LCD_Set_CG_Add+0xf8>
    27dc:	9a 83       	std	Y+2, r25	; 0x02
    27de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    27e0:	2f 96       	adiw	r28, 0x0f	; 15
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <LCD_Shift>:

void LCD_Shift()
{
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    27fa:	2e 97       	sbiw	r28, 0x0e	; 14
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x1c);
    2806:	8c e1       	ldi	r24, 0x1C	; 28
    2808:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_WriteCommand>
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	a0 e2       	ldi	r26, 0x20	; 32
    2812:	b1 e4       	ldi	r27, 0x41	; 65
    2814:	8b 87       	std	Y+11, r24	; 0x0b
    2816:	9c 87       	std	Y+12, r25	; 0x0c
    2818:	ad 87       	std	Y+13, r26	; 0x0d
    281a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281c:	6b 85       	ldd	r22, Y+11	; 0x0b
    281e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2820:	8d 85       	ldd	r24, Y+13	; 0x0d
    2822:	9e 85       	ldd	r25, Y+14	; 0x0e
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	4a e7       	ldi	r20, 0x7A	; 122
    282a:	53 e4       	ldi	r21, 0x43	; 67
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	8f 83       	std	Y+7, r24	; 0x07
    2836:	98 87       	std	Y+8, r25	; 0x08
    2838:	a9 87       	std	Y+9, r26	; 0x09
    283a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    283c:	6f 81       	ldd	r22, Y+7	; 0x07
    283e:	78 85       	ldd	r23, Y+8	; 0x08
    2840:	89 85       	ldd	r24, Y+9	; 0x09
    2842:	9a 85       	ldd	r25, Y+10	; 0x0a
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e8       	ldi	r20, 0x80	; 128
    284a:	5f e3       	ldi	r21, 0x3F	; 63
    284c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2850:	88 23       	and	r24, r24
    2852:	2c f4       	brge	.+10     	; 0x285e <LCD_Shift+0x6c>
		__ticks = 1;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9e 83       	std	Y+6, r25	; 0x06
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	3f c0       	rjmp	.+126    	; 0x28dc <LCD_Shift+0xea>
	else if (__tmp > 65535)
    285e:	6f 81       	ldd	r22, Y+7	; 0x07
    2860:	78 85       	ldd	r23, Y+8	; 0x08
    2862:	89 85       	ldd	r24, Y+9	; 0x09
    2864:	9a 85       	ldd	r25, Y+10	; 0x0a
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	3f ef       	ldi	r19, 0xFF	; 255
    286a:	4f e7       	ldi	r20, 0x7F	; 127
    286c:	57 e4       	ldi	r21, 0x47	; 71
    286e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2872:	18 16       	cp	r1, r24
    2874:	4c f5       	brge	.+82     	; 0x28c8 <LCD_Shift+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2876:	6b 85       	ldd	r22, Y+11	; 0x0b
    2878:	7c 85       	ldd	r23, Y+12	; 0x0c
    287a:	8d 85       	ldd	r24, Y+13	; 0x0d
    287c:	9e 85       	ldd	r25, Y+14	; 0x0e
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e2       	ldi	r20, 0x20	; 32
    2884:	51 e4       	ldi	r21, 0x41	; 65
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	9e 83       	std	Y+6, r25	; 0x06
    289c:	8d 83       	std	Y+5, r24	; 0x05
    289e:	0f c0       	rjmp	.+30     	; 0x28be <LCD_Shift+0xcc>
    28a0:	89 e1       	ldi	r24, 0x19	; 25
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9c 83       	std	Y+4, r25	; 0x04
    28a6:	8b 83       	std	Y+3, r24	; 0x03
    28a8:	8b 81       	ldd	r24, Y+3	; 0x03
    28aa:	9c 81       	ldd	r25, Y+4	; 0x04
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <LCD_Shift+0xba>
    28b0:	9c 83       	std	Y+4, r25	; 0x04
    28b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b4:	8d 81       	ldd	r24, Y+5	; 0x05
    28b6:	9e 81       	ldd	r25, Y+6	; 0x06
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	9e 83       	std	Y+6, r25	; 0x06
    28bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	69 f7       	brne	.-38     	; 0x28a0 <LCD_Shift+0xae>
    28c6:	14 c0       	rjmp	.+40     	; 0x28f0 <LCD_Shift+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	78 85       	ldd	r23, Y+8	; 0x08
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	8d 83       	std	Y+5, r24	; 0x05
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <LCD_Shift+0xf6>
    28ec:	9a 83       	std	Y+2, r25	; 0x02
    28ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    28f0:	2e 96       	adiw	r28, 0x0e	; 14
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	f8 94       	cli
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	cd bf       	out	0x3d, r28	; 61
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <LCD_Set_Entry_Mode>:
void LCD_Set_Entry_Mode(u8 I_D)
{
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	2f 97       	sbiw	r28, 0x0f	; 15
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	8f 87       	std	Y+15, r24	; 0x0f
	if(I_D)
    2918:	8f 85       	ldd	r24, Y+15	; 0x0f
    291a:	88 23       	and	r24, r24
    291c:	21 f0       	breq	.+8      	; 0x2926 <LCD_Set_Entry_Mode+0x24>
		LCD_WriteCommand(0x06);
    291e:	86 e0       	ldi	r24, 0x06	; 6
    2920:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_WriteCommand>
    2924:	03 c0       	rjmp	.+6      	; 0x292c <LCD_Set_Entry_Mode+0x2a>
	else
		LCD_WriteCommand(0x07);
    2926:	87 e0       	ldi	r24, 0x07	; 7
    2928:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_WriteCommand>
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	a0 e2       	ldi	r26, 0x20	; 32
    2932:	b1 e4       	ldi	r27, 0x41	; 65
    2934:	8b 87       	std	Y+11, r24	; 0x0b
    2936:	9c 87       	std	Y+12, r25	; 0x0c
    2938:	ad 87       	std	Y+13, r26	; 0x0d
    293a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293c:	6b 85       	ldd	r22, Y+11	; 0x0b
    293e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2940:	8d 85       	ldd	r24, Y+13	; 0x0d
    2942:	9e 85       	ldd	r25, Y+14	; 0x0e
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	4a e7       	ldi	r20, 0x7A	; 122
    294a:	53 e4       	ldi	r21, 0x43	; 67
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	8f 83       	std	Y+7, r24	; 0x07
    2956:	98 87       	std	Y+8, r25	; 0x08
    2958:	a9 87       	std	Y+9, r26	; 0x09
    295a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    295c:	6f 81       	ldd	r22, Y+7	; 0x07
    295e:	78 85       	ldd	r23, Y+8	; 0x08
    2960:	89 85       	ldd	r24, Y+9	; 0x09
    2962:	9a 85       	ldd	r25, Y+10	; 0x0a
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e8       	ldi	r20, 0x80	; 128
    296a:	5f e3       	ldi	r21, 0x3F	; 63
    296c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2970:	88 23       	and	r24, r24
    2972:	2c f4       	brge	.+10     	; 0x297e <LCD_Set_Entry_Mode+0x7c>
		__ticks = 1;
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9e 83       	std	Y+6, r25	; 0x06
    297a:	8d 83       	std	Y+5, r24	; 0x05
    297c:	3f c0       	rjmp	.+126    	; 0x29fc <LCD_Set_Entry_Mode+0xfa>
	else if (__tmp > 65535)
    297e:	6f 81       	ldd	r22, Y+7	; 0x07
    2980:	78 85       	ldd	r23, Y+8	; 0x08
    2982:	89 85       	ldd	r24, Y+9	; 0x09
    2984:	9a 85       	ldd	r25, Y+10	; 0x0a
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	3f ef       	ldi	r19, 0xFF	; 255
    298a:	4f e7       	ldi	r20, 0x7F	; 127
    298c:	57 e4       	ldi	r21, 0x47	; 71
    298e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2992:	18 16       	cp	r1, r24
    2994:	4c f5       	brge	.+82     	; 0x29e8 <LCD_Set_Entry_Mode+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2996:	6b 85       	ldd	r22, Y+11	; 0x0b
    2998:	7c 85       	ldd	r23, Y+12	; 0x0c
    299a:	8d 85       	ldd	r24, Y+13	; 0x0d
    299c:	9e 85       	ldd	r25, Y+14	; 0x0e
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e2       	ldi	r20, 0x20	; 32
    29a4:	51 e4       	ldi	r21, 0x41	; 65
    29a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	bc 01       	movw	r22, r24
    29b0:	cd 01       	movw	r24, r26
    29b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	9e 83       	std	Y+6, r25	; 0x06
    29bc:	8d 83       	std	Y+5, r24	; 0x05
    29be:	0f c0       	rjmp	.+30     	; 0x29de <LCD_Set_Entry_Mode+0xdc>
    29c0:	89 e1       	ldi	r24, 0x19	; 25
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9c 83       	std	Y+4, r25	; 0x04
    29c6:	8b 83       	std	Y+3, r24	; 0x03
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	9c 81       	ldd	r25, Y+4	; 0x04
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <LCD_Set_Entry_Mode+0xca>
    29d0:	9c 83       	std	Y+4, r25	; 0x04
    29d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	9e 81       	ldd	r25, Y+6	; 0x06
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	9e 83       	std	Y+6, r25	; 0x06
    29dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29de:	8d 81       	ldd	r24, Y+5	; 0x05
    29e0:	9e 81       	ldd	r25, Y+6	; 0x06
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	69 f7       	brne	.-38     	; 0x29c0 <LCD_Set_Entry_Mode+0xbe>
    29e6:	14 c0       	rjmp	.+40     	; 0x2a10 <LCD_Set_Entry_Mode+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ea:	78 85       	ldd	r23, Y+8	; 0x08
    29ec:	89 85       	ldd	r24, Y+9	; 0x09
    29ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	9e 83       	std	Y+6, r25	; 0x06
    29fa:	8d 83       	std	Y+5, r24	; 0x05
    29fc:	8d 81       	ldd	r24, Y+5	; 0x05
    29fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	9a 81       	ldd	r25, Y+2	; 0x02
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <LCD_Set_Entry_Mode+0x106>
    2a0c:	9a 83       	std	Y+2, r25	; 0x02
    2a0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2a10:	2f 96       	adiw	r28, 0x0f	; 15
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <LCD_Set_DD_Add>:

void LCD_Set_DD_Add(u8 add)
{
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	2f 97       	sbiw	r28, 0x0f	; 15
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	f8 94       	cli
    2a30:	de bf       	out	0x3e, r29	; 62
    2a32:	0f be       	out	0x3f, r0	; 63
    2a34:	cd bf       	out	0x3d, r28	; 61
    2a36:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_WriteCommand(add);
    2a38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a3a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_WriteCommand>
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	a0 e2       	ldi	r26, 0x20	; 32
    2a44:	b1 e4       	ldi	r27, 0x41	; 65
    2a46:	8b 87       	std	Y+11, r24	; 0x0b
    2a48:	9c 87       	std	Y+12, r25	; 0x0c
    2a4a:	ad 87       	std	Y+13, r26	; 0x0d
    2a4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	4a e7       	ldi	r20, 0x7A	; 122
    2a5c:	53 e4       	ldi	r21, 0x43	; 67
    2a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	8f 83       	std	Y+7, r24	; 0x07
    2a68:	98 87       	std	Y+8, r25	; 0x08
    2a6a:	a9 87       	std	Y+9, r26	; 0x09
    2a6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a70:	78 85       	ldd	r23, Y+8	; 0x08
    2a72:	89 85       	ldd	r24, Y+9	; 0x09
    2a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a82:	88 23       	and	r24, r24
    2a84:	2c f4       	brge	.+10     	; 0x2a90 <LCD_Set_DD_Add+0x6e>
		__ticks = 1;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	9e 83       	std	Y+6, r25	; 0x06
    2a8c:	8d 83       	std	Y+5, r24	; 0x05
    2a8e:	3f c0       	rjmp	.+126    	; 0x2b0e <LCD_Set_DD_Add+0xec>
	else if (__tmp > 65535)
    2a90:	6f 81       	ldd	r22, Y+7	; 0x07
    2a92:	78 85       	ldd	r23, Y+8	; 0x08
    2a94:	89 85       	ldd	r24, Y+9	; 0x09
    2a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	3f ef       	ldi	r19, 0xFF	; 255
    2a9c:	4f e7       	ldi	r20, 0x7F	; 127
    2a9e:	57 e4       	ldi	r21, 0x47	; 71
    2aa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa4:	18 16       	cp	r1, r24
    2aa6:	4c f5       	brge	.+82     	; 0x2afa <LCD_Set_DD_Add+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e2       	ldi	r20, 0x20	; 32
    2ab6:	51 e4       	ldi	r21, 0x41	; 65
    2ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	bc 01       	movw	r22, r24
    2ac2:	cd 01       	movw	r24, r26
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9e 83       	std	Y+6, r25	; 0x06
    2ace:	8d 83       	std	Y+5, r24	; 0x05
    2ad0:	0f c0       	rjmp	.+30     	; 0x2af0 <LCD_Set_DD_Add+0xce>
    2ad2:	89 e1       	ldi	r24, 0x19	; 25
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	9c 83       	std	Y+4, r25	; 0x04
    2ad8:	8b 83       	std	Y+3, r24	; 0x03
    2ada:	8b 81       	ldd	r24, Y+3	; 0x03
    2adc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <LCD_Set_DD_Add+0xbc>
    2ae2:	9c 83       	std	Y+4, r25	; 0x04
    2ae4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af0:	8d 81       	ldd	r24, Y+5	; 0x05
    2af2:	9e 81       	ldd	r25, Y+6	; 0x06
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	69 f7       	brne	.-38     	; 0x2ad2 <LCD_Set_DD_Add+0xb0>
    2af8:	14 c0       	rjmp	.+40     	; 0x2b22 <LCD_Set_DD_Add+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afa:	6f 81       	ldd	r22, Y+7	; 0x07
    2afc:	78 85       	ldd	r23, Y+8	; 0x08
    2afe:	89 85       	ldd	r24, Y+9	; 0x09
    2b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	9e 83       	std	Y+6, r25	; 0x06
    2b0c:	8d 83       	std	Y+5, r24	; 0x05
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b10:	9e 81       	ldd	r25, Y+6	; 0x06
    2b12:	9a 83       	std	Y+2, r25	; 0x02
    2b14:	89 83       	std	Y+1, r24	; 0x01
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <LCD_Set_DD_Add+0xf8>
    2b1e:	9a 83       	std	Y+2, r25	; 0x02
    2b20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2b22:	2f 96       	adiw	r28, 0x0f	; 15
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <LCD_Arabic_Dict>:


void LCD_Arabic_Dict(u8 charact)
{
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	00 d0       	rcall	.+0      	; 0x2b3a <LCD_Arabic_Dict+0x6>
    2b3a:	00 d0       	rcall	.+0      	; 0x2b3c <LCD_Arabic_Dict+0x8>
    2b3c:	0f 92       	push	r0
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
    2b42:	8b 83       	std	Y+3, r24	; 0x03
	LCD_Set_CG_Add(0x40+8*charact_number);
    2b44:	80 91 70 00 	lds	r24, 0x0070
    2b48:	88 2f       	mov	r24, r24
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	08 96       	adiw	r24, 0x08	; 8
    2b4e:	88 0f       	add	r24, r24
    2b50:	99 1f       	adc	r25, r25
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	88 0f       	add	r24, r24
    2b58:	99 1f       	adc	r25, r25
    2b5a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <LCD_Set_CG_Add>
	switch (charact)
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	28 2f       	mov	r18, r24
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	3d 83       	std	Y+5, r19	; 0x05
    2b66:	2c 83       	std	Y+4, r18	; 0x04
    2b68:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6c:	8e 30       	cpi	r24, 0x0E	; 14
    2b6e:	91 05       	cpc	r25, r1
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <LCD_Arabic_Dict+0x40>
    2b72:	fc c1       	rjmp	.+1016   	; 0x2f6c <LCD_Arabic_Dict+0x438>
    2b74:	2c 81       	ldd	r18, Y+4	; 0x04
    2b76:	3d 81       	ldd	r19, Y+5	; 0x05
    2b78:	2f 30       	cpi	r18, 0x0F	; 15
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	0c f0       	brlt	.+2      	; 0x2b80 <LCD_Arabic_Dict+0x4c>
    2b7e:	55 c0       	rjmp	.+170    	; 0x2c2a <LCD_Arabic_Dict+0xf6>
    2b80:	8c 81       	ldd	r24, Y+4	; 0x04
    2b82:	9d 81       	ldd	r25, Y+5	; 0x05
    2b84:	87 30       	cpi	r24, 0x07	; 7
    2b86:	91 05       	cpc	r25, r1
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <LCD_Arabic_Dict+0x58>
    2b8a:	41 c1       	rjmp	.+642    	; 0x2e0e <LCD_Arabic_Dict+0x2da>
    2b8c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b8e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b90:	28 30       	cpi	r18, 0x08	; 8
    2b92:	31 05       	cpc	r19, r1
    2b94:	2c f5       	brge	.+74     	; 0x2be0 <LCD_Arabic_Dict+0xac>
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	9d 81       	ldd	r25, Y+5	; 0x05
    2b9a:	83 30       	cpi	r24, 0x03	; 3
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <LCD_Arabic_Dict+0x6e>
    2ba0:	d2 c0       	rjmp	.+420    	; 0x2d46 <LCD_Arabic_Dict+0x212>
    2ba2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba6:	24 30       	cpi	r18, 0x04	; 4
    2ba8:	31 05       	cpc	r19, r1
    2baa:	6c f4       	brge	.+26     	; 0x2bc6 <LCD_Arabic_Dict+0x92>
    2bac:	8c 81       	ldd	r24, Y+4	; 0x04
    2bae:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb0:	81 30       	cpi	r24, 0x01	; 1
    2bb2:	91 05       	cpc	r25, r1
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <LCD_Arabic_Dict+0x84>
    2bb6:	94 c0       	rjmp	.+296    	; 0x2ce0 <LCD_Arabic_Dict+0x1ac>
    2bb8:	2c 81       	ldd	r18, Y+4	; 0x04
    2bba:	3d 81       	ldd	r19, Y+5	; 0x05
    2bbc:	22 30       	cpi	r18, 0x02	; 2
    2bbe:	31 05       	cpc	r19, r1
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <LCD_Arabic_Dict+0x90>
    2bc2:	a8 c0       	rjmp	.+336    	; 0x2d14 <LCD_Arabic_Dict+0x1e0>
    2bc4:	49 c3       	rjmp	.+1682   	; 0x3258 <LCD_Arabic_Dict+0x724>
    2bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bca:	85 30       	cpi	r24, 0x05	; 5
    2bcc:	91 05       	cpc	r25, r1
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <LCD_Arabic_Dict+0x9e>
    2bd0:	ec c0       	rjmp	.+472    	; 0x2daa <LCD_Arabic_Dict+0x276>
    2bd2:	2c 81       	ldd	r18, Y+4	; 0x04
    2bd4:	3d 81       	ldd	r19, Y+5	; 0x05
    2bd6:	26 30       	cpi	r18, 0x06	; 6
    2bd8:	31 05       	cpc	r19, r1
    2bda:	0c f0       	brlt	.+2      	; 0x2bde <LCD_Arabic_Dict+0xaa>
    2bdc:	ff c0       	rjmp	.+510    	; 0x2ddc <LCD_Arabic_Dict+0x2a8>
    2bde:	cc c0       	rjmp	.+408    	; 0x2d78 <LCD_Arabic_Dict+0x244>
    2be0:	8c 81       	ldd	r24, Y+4	; 0x04
    2be2:	9d 81       	ldd	r25, Y+5	; 0x05
    2be4:	8a 30       	cpi	r24, 0x0A	; 10
    2be6:	91 05       	cpc	r25, r1
    2be8:	09 f4       	brne	.+2      	; 0x2bec <LCD_Arabic_Dict+0xb8>
    2bea:	5c c1       	rjmp	.+696    	; 0x2ea4 <LCD_Arabic_Dict+0x370>
    2bec:	2c 81       	ldd	r18, Y+4	; 0x04
    2bee:	3d 81       	ldd	r19, Y+5	; 0x05
    2bf0:	2b 30       	cpi	r18, 0x0B	; 11
    2bf2:	31 05       	cpc	r19, r1
    2bf4:	6c f4       	brge	.+26     	; 0x2c10 <LCD_Arabic_Dict+0xdc>
    2bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bfa:	88 30       	cpi	r24, 0x08	; 8
    2bfc:	91 05       	cpc	r25, r1
    2bfe:	09 f4       	brne	.+2      	; 0x2c02 <LCD_Arabic_Dict+0xce>
    2c00:	1f c1       	rjmp	.+574    	; 0x2e40 <LCD_Arabic_Dict+0x30c>
    2c02:	2c 81       	ldd	r18, Y+4	; 0x04
    2c04:	3d 81       	ldd	r19, Y+5	; 0x05
    2c06:	29 30       	cpi	r18, 0x09	; 9
    2c08:	31 05       	cpc	r19, r1
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <LCD_Arabic_Dict+0xda>
    2c0c:	32 c1       	rjmp	.+612    	; 0x2e72 <LCD_Arabic_Dict+0x33e>
    2c0e:	24 c3       	rjmp	.+1608   	; 0x3258 <LCD_Arabic_Dict+0x724>
    2c10:	8c 81       	ldd	r24, Y+4	; 0x04
    2c12:	9d 81       	ldd	r25, Y+5	; 0x05
    2c14:	8c 30       	cpi	r24, 0x0C	; 12
    2c16:	91 05       	cpc	r25, r1
    2c18:	09 f4       	brne	.+2      	; 0x2c1c <LCD_Arabic_Dict+0xe8>
    2c1a:	76 c1       	rjmp	.+748    	; 0x2f08 <LCD_Arabic_Dict+0x3d4>
    2c1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c20:	2d 30       	cpi	r18, 0x0D	; 13
    2c22:	31 05       	cpc	r19, r1
    2c24:	0c f0       	brlt	.+2      	; 0x2c28 <LCD_Arabic_Dict+0xf4>
    2c26:	89 c1       	rjmp	.+786    	; 0x2f3a <LCD_Arabic_Dict+0x406>
    2c28:	56 c1       	rjmp	.+684    	; 0x2ed6 <LCD_Arabic_Dict+0x3a2>
    2c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c2e:	85 31       	cpi	r24, 0x15	; 21
    2c30:	91 05       	cpc	r25, r1
    2c32:	09 f4       	brne	.+2      	; 0x2c36 <LCD_Arabic_Dict+0x102>
    2c34:	4a c2       	rjmp	.+1172   	; 0x30ca <LCD_Arabic_Dict+0x596>
    2c36:	2c 81       	ldd	r18, Y+4	; 0x04
    2c38:	3d 81       	ldd	r19, Y+5	; 0x05
    2c3a:	26 31       	cpi	r18, 0x16	; 22
    2c3c:	31 05       	cpc	r19, r1
    2c3e:	2c f5       	brge	.+74     	; 0x2c8a <LCD_Arabic_Dict+0x156>
    2c40:	8c 81       	ldd	r24, Y+4	; 0x04
    2c42:	9d 81       	ldd	r25, Y+5	; 0x05
    2c44:	81 31       	cpi	r24, 0x11	; 17
    2c46:	91 05       	cpc	r25, r1
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <LCD_Arabic_Dict+0x118>
    2c4a:	db c1       	rjmp	.+950    	; 0x3002 <LCD_Arabic_Dict+0x4ce>
    2c4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c50:	22 31       	cpi	r18, 0x12	; 18
    2c52:	31 05       	cpc	r19, r1
    2c54:	6c f4       	brge	.+26     	; 0x2c70 <LCD_Arabic_Dict+0x13c>
    2c56:	8c 81       	ldd	r24, Y+4	; 0x04
    2c58:	9d 81       	ldd	r25, Y+5	; 0x05
    2c5a:	8f 30       	cpi	r24, 0x0F	; 15
    2c5c:	91 05       	cpc	r25, r1
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <LCD_Arabic_Dict+0x12e>
    2c60:	9e c1       	rjmp	.+828    	; 0x2f9e <LCD_Arabic_Dict+0x46a>
    2c62:	2c 81       	ldd	r18, Y+4	; 0x04
    2c64:	3d 81       	ldd	r19, Y+5	; 0x05
    2c66:	20 31       	cpi	r18, 0x10	; 16
    2c68:	31 05       	cpc	r19, r1
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <LCD_Arabic_Dict+0x13a>
    2c6c:	b1 c1       	rjmp	.+866    	; 0x2fd0 <LCD_Arabic_Dict+0x49c>
    2c6e:	f4 c2       	rjmp	.+1512   	; 0x3258 <LCD_Arabic_Dict+0x724>
    2c70:	8c 81       	ldd	r24, Y+4	; 0x04
    2c72:	9d 81       	ldd	r25, Y+5	; 0x05
    2c74:	83 31       	cpi	r24, 0x13	; 19
    2c76:	91 05       	cpc	r25, r1
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <LCD_Arabic_Dict+0x148>
    2c7a:	f5 c1       	rjmp	.+1002   	; 0x3066 <LCD_Arabic_Dict+0x532>
    2c7c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c7e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c80:	24 31       	cpi	r18, 0x14	; 20
    2c82:	31 05       	cpc	r19, r1
    2c84:	0c f0       	brlt	.+2      	; 0x2c88 <LCD_Arabic_Dict+0x154>
    2c86:	08 c2       	rjmp	.+1040   	; 0x3098 <LCD_Arabic_Dict+0x564>
    2c88:	d5 c1       	rjmp	.+938    	; 0x3034 <LCD_Arabic_Dict+0x500>
    2c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8e:	89 31       	cpi	r24, 0x19	; 25
    2c90:	91 05       	cpc	r25, r1
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <LCD_Arabic_Dict+0x162>
    2c94:	7e c2       	rjmp	.+1276   	; 0x3192 <LCD_Arabic_Dict+0x65e>
    2c96:	2c 81       	ldd	r18, Y+4	; 0x04
    2c98:	3d 81       	ldd	r19, Y+5	; 0x05
    2c9a:	2a 31       	cpi	r18, 0x1A	; 26
    2c9c:	31 05       	cpc	r19, r1
    2c9e:	6c f4       	brge	.+26     	; 0x2cba <LCD_Arabic_Dict+0x186>
    2ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca4:	87 31       	cpi	r24, 0x17	; 23
    2ca6:	91 05       	cpc	r25, r1
    2ca8:	09 f4       	brne	.+2      	; 0x2cac <LCD_Arabic_Dict+0x178>
    2caa:	41 c2       	rjmp	.+1154   	; 0x312e <LCD_Arabic_Dict+0x5fa>
    2cac:	2c 81       	ldd	r18, Y+4	; 0x04
    2cae:	3d 81       	ldd	r19, Y+5	; 0x05
    2cb0:	28 31       	cpi	r18, 0x18	; 24
    2cb2:	31 05       	cpc	r19, r1
    2cb4:	0c f0       	brlt	.+2      	; 0x2cb8 <LCD_Arabic_Dict+0x184>
    2cb6:	54 c2       	rjmp	.+1192   	; 0x3160 <LCD_Arabic_Dict+0x62c>
    2cb8:	21 c2       	rjmp	.+1090   	; 0x30fc <LCD_Arabic_Dict+0x5c8>
    2cba:	8c 81       	ldd	r24, Y+4	; 0x04
    2cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cbe:	8b 31       	cpi	r24, 0x1B	; 27
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <LCD_Arabic_Dict+0x192>
    2cc4:	98 c2       	rjmp	.+1328   	; 0x31f6 <LCD_Arabic_Dict+0x6c2>
    2cc6:	2c 81       	ldd	r18, Y+4	; 0x04
    2cc8:	3d 81       	ldd	r19, Y+5	; 0x05
    2cca:	2b 31       	cpi	r18, 0x1B	; 27
    2ccc:	31 05       	cpc	r19, r1
    2cce:	0c f4       	brge	.+2      	; 0x2cd2 <LCD_Arabic_Dict+0x19e>
    2cd0:	79 c2       	rjmp	.+1266   	; 0x31c4 <LCD_Arabic_Dict+0x690>
    2cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd6:	8c 31       	cpi	r24, 0x1C	; 28
    2cd8:	91 05       	cpc	r25, r1
    2cda:	09 f4       	brne	.+2      	; 0x2cde <LCD_Arabic_Dict+0x1aa>
    2cdc:	a5 c2       	rjmp	.+1354   	; 0x3228 <LCD_Arabic_Dict+0x6f4>
    2cde:	bc c2       	rjmp	.+1400   	; 0x3258 <LCD_Arabic_Dict+0x724>
	{
	int count;
	case 1:
		/* alf */
	    for(count=0;count<5;count++)
    2ce0:	1a 82       	std	Y+2, r1	; 0x02
    2ce2:	19 82       	std	Y+1, r1	; 0x01
    2ce4:	08 c0       	rjmp	.+16     	; 0x2cf6 <LCD_Arabic_Dict+0x1c2>
	    	LCD_WriteData(0x04);
    2ce6:	84 e0       	ldi	r24, 0x04	; 4
    2ce8:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	switch (charact)
	{
	int count;
	case 1:
		/* alf */
	    for(count=0;count<5;count++)
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf0:	01 96       	adiw	r24, 0x01	; 1
    2cf2:	9a 83       	std	Y+2, r25	; 0x02
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfa:	85 30       	cpi	r24, 0x05	; 5
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	9c f3       	brlt	.-26     	; 0x2ce6 <LCD_Arabic_Dict+0x1b2>
	    	LCD_WriteData(0x04);
	    LCD_WriteData(0x07);
    2d00:	87 e0       	ldi	r24, 0x07	; 7
    2d02:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2d12:	a2 c2       	rjmp	.+1348   	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 2:
		/* ba2 */
	    LCD_WriteData(0x00);
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0xff);
    2d32:	8f ef       	ldi	r24, 0xFF	; 255
    2d34:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2d44:	89 c2       	rjmp	.+1298   	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 3:
		/* ta2 */
	    LCD_WriteData(0x00);
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0xf5);
    2d58:	85 ef       	ldi	r24, 0xF5	; 245
    2d5a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0xff);
    2d64:	8f ef       	ldi	r24, 0xFF	; 255
    2d66:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2d76:	70 c2       	rjmp	.+1248   	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 4:
		/* tha2 */
	    LCD_WriteData(0x00);
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x08);
    2d84:	88 e0       	ldi	r24, 0x08	; 8
    2d86:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0xf5);
    2d8a:	85 ef       	ldi	r24, 0xF5	; 245
    2d8c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0xff);
    2d96:	8f ef       	ldi	r24, 0xFF	; 255
    2d98:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2da8:	57 c2       	rjmp	.+1198   	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 5:
		/* gem */
	    LCD_WriteData(0x00);
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x0c);
    2db6:	8c e0       	ldi	r24, 0x0C	; 12
    2db8:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0xf2);
    2dbc:	82 ef       	ldi	r24, 0xF2	; 242
    2dbe:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0xff);
    2dc8:	8f ef       	ldi	r24, 0xFF	; 255
    2dca:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2dda:	3e c2       	rjmp	.+1148   	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 6:
		/* 7a2 */
	    LCD_WriteData(0x00);
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x0c);
    2de8:	8c e0       	ldi	r24, 0x0C	; 12
    2dea:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0xf2);
    2dee:	82 ef       	ldi	r24, 0xF2	; 242
    2df0:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0xff);
    2dfa:	8f ef       	ldi	r24, 0xFF	; 255
    2dfc:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2e0c:	25 c2       	rjmp	.+1098   	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 7:
		/* kha2 */
	    LCD_WriteData(0x04);
    2e0e:	84 e0       	ldi	r24, 0x04	; 4
    2e10:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x0c);
    2e1a:	8c e0       	ldi	r24, 0x0C	; 12
    2e1c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0xf2);
    2e20:	82 ef       	ldi	r24, 0xF2	; 242
    2e22:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0xff);
    2e2c:	8f ef       	ldi	r24, 0xFF	; 255
    2e2e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2e3e:	0c c2       	rjmp	.+1048   	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 8:
		/* dal */
	    LCD_WriteData(0x00);
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x0f);
    2e5e:	8f e0       	ldi	r24, 0x0F	; 15
    2e60:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2e70:	f3 c1       	rjmp	.+998    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 9:
		/* zal */
	    LCD_WriteData(0x00);
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x0f);
    2e90:	8f e0       	ldi	r24, 0x0F	; 15
    2e92:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2ea2:	da c1       	rjmp	.+948    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 10:
		/* ra2 */
	    LCD_WriteData(0x00);
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x03);
    2ec2:	83 e0       	ldi	r24, 0x03	; 3
    2ec4:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x02);
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x04);
    2ece:	84 e0       	ldi	r24, 0x04	; 4
    2ed0:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2ed4:	c1 c1       	rjmp	.+898    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 11:
		/* zan */
	    LCD_WriteData(0x00);
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x02);
    2ee8:	82 e0       	ldi	r24, 0x02	; 2
    2eea:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x03);
    2ef4:	83 e0       	ldi	r24, 0x03	; 3
    2ef6:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x02);
    2efa:	82 e0       	ldi	r24, 0x02	; 2
    2efc:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x04);
    2f00:	84 e0       	ldi	r24, 0x04	; 4
    2f02:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2f06:	a8 c1       	rjmp	.+848    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 12:
		/* seen */
	    LCD_WriteData(0x00);
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x15);
    2f1a:	85 e1       	ldi	r24, 0x15	; 21
    2f1c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x15);
    2f20:	85 e1       	ldi	r24, 0x15	; 21
    2f22:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2f26:	8f e1       	ldi	r24, 0x1F	; 31
    2f28:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2f38:	8f c1       	rjmp	.+798    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 13:
		/* sheen */
	    LCD_WriteData(0x04);
    2f3a:	84 e0       	ldi	r24, 0x04	; 4
    2f3c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x0a);
    2f40:	8a e0       	ldi	r24, 0x0A	; 10
    2f42:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x15);
    2f4c:	85 e1       	ldi	r24, 0x15	; 21
    2f4e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x15);
    2f52:	85 e1       	ldi	r24, 0x15	; 21
    2f54:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2f58:	8f e1       	ldi	r24, 0x1F	; 31
    2f5a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2f6a:	76 c1       	rjmp	.+748    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 14:
		/* saad */
	    LCD_WriteData(0x00);
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x06);
    2f7e:	86 e0       	ldi	r24, 0x06	; 6
    2f80:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x09);
    2f84:	89 e0       	ldi	r24, 0x09	; 9
    2f86:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2f8a:	8f e1       	ldi	r24, 0x1F	; 31
    2f8c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2f9c:	5d c1       	rjmp	.+698    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 15:
		/* daad */
	    LCD_WriteData(0x00);
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x04);
    2fa4:	84 e0       	ldi	r24, 0x04	; 4
    2fa6:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x06);
    2fb0:	86 e0       	ldi	r24, 0x06	; 6
    2fb2:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x09);
    2fb6:	89 e0       	ldi	r24, 0x09	; 9
    2fb8:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2fbc:	8f e1       	ldi	r24, 0x1F	; 31
    2fbe:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    2fce:	44 c1       	rjmp	.+648    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 16:
		/* taah */
	    LCD_WriteData(0x00);
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x08);
    2fd6:	88 e0       	ldi	r24, 0x08	; 8
    2fd8:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x08);
    2fdc:	88 e0       	ldi	r24, 0x08	; 8
    2fde:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x0e);
    2fe2:	8e e0       	ldi	r24, 0x0E	; 14
    2fe4:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x09);
    2fe8:	89 e0       	ldi	r24, 0x09	; 9
    2fea:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2fee:	8f e1       	ldi	r24, 0x1F	; 31
    2ff0:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    3000:	2b c1       	rjmp	.+598    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 17:
	    /* zaah */
	    LCD_WriteData(0x00);
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x0a);
    3008:	8a e0       	ldi	r24, 0x0A	; 10
    300a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x08);
    300e:	88 e0       	ldi	r24, 0x08	; 8
    3010:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x0e);
    3014:	8e e0       	ldi	r24, 0x0E	; 14
    3016:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x09);
    301a:	89 e0       	ldi	r24, 0x09	; 9
    301c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    3020:	8f e1       	ldi	r24, 0x1F	; 31
    3022:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    3032:	12 c1       	rjmp	.+548    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 18:
		/* 3een */
	    LCD_WriteData(0x00);
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x07);
    3040:	87 e0       	ldi	r24, 0x07	; 7
    3042:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x08);
    3046:	88 e0       	ldi	r24, 0x08	; 8
    3048:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x08);
    304c:	88 e0       	ldi	r24, 0x08	; 8
    304e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    3052:	8f e1       	ldi	r24, 0x1F	; 31
    3054:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    3064:	f9 c0       	rjmp	.+498    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 19:
		/* 3'een */
	    LCD_WriteData(0x04);
    3066:	84 e0       	ldi	r24, 0x04	; 4
    3068:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x07);
    3072:	87 e0       	ldi	r24, 0x07	; 7
    3074:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x08);
    3078:	88 e0       	ldi	r24, 0x08	; 8
    307a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x08);
    307e:	88 e0       	ldi	r24, 0x08	; 8
    3080:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    3084:	8f e1       	ldi	r24, 0x1F	; 31
    3086:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    3096:	e0 c0       	rjmp	.+448    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 20:
		/* faa2 */
	    LCD_WriteData(0x02);
    3098:	82 e0       	ldi	r24, 0x02	; 2
    309a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x03);
    30a4:	83 e0       	ldi	r24, 0x03	; 3
    30a6:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x03);
    30aa:	83 e0       	ldi	r24, 0x03	; 3
    30ac:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    30b6:	8f e1       	ldi	r24, 0x1F	; 31
    30b8:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    30c8:	c7 c0       	rjmp	.+398    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 21:
		/* k'aaf */
	    LCD_WriteData(0x03);
    30ca:	83 e0       	ldi	r24, 0x03	; 3
    30cc:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x03);
    30d6:	83 e0       	ldi	r24, 0x03	; 3
    30d8:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x03);
    30dc:	83 e0       	ldi	r24, 0x03	; 3
    30de:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    30e8:	8f e1       	ldi	r24, 0x1F	; 31
    30ea:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    30fa:	ae c0       	rjmp	.+348    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 22:
		/* kaaf */
	    LCD_WriteData(0x00);
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x0f);
    3102:	8f e0       	ldi	r24, 0x0F	; 15
    3104:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x04);
    3108:	84 e0       	ldi	r24, 0x04	; 4
    310a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x02);
    310e:	82 e0       	ldi	r24, 0x02	; 2
    3110:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    311a:	8f e1       	ldi	r24, 0x1F	; 31
    311c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    312c:	95 c0       	rjmp	.+298    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 23:
		/* laam */
	    LCD_WriteData(0x00);
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    314c:	8f e1       	ldi	r24, 0x1F	; 31
    314e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    315e:	7c c0       	rjmp	.+248    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 24:
		/* meem */
	    LCD_WriteData(0x00);
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x03);
    3178:	83 e0       	ldi	r24, 0x03	; 3
    317a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    317e:	8f e1       	ldi	r24, 0x1F	; 31
    3180:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x03);
    3184:	83 e0       	ldi	r24, 0x03	; 3
    3186:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    3190:	63 c0       	rjmp	.+198    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 25:
		/* noon */
	    LCD_WriteData(0x00);
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x05);
    31a4:	85 e0       	ldi	r24, 0x05	; 5
    31a6:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    31b0:	8f e1       	ldi	r24, 0x1F	; 31
    31b2:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    31c2:	4a c0       	rjmp	.+148    	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 26:
		/* heeh */
	    LCD_WriteData(0x00);
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x06);
    31dc:	86 e0       	ldi	r24, 0x06	; 6
    31de:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    31e2:	8f e1       	ldi	r24, 0x1F	; 31
    31e4:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x06);
    31e8:	86 e0       	ldi	r24, 0x06	; 6
    31ea:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    31f4:	31 c0       	rjmp	.+98     	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 27:
		/* waaw */
	    LCD_WriteData(0x00);
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x03);
    320e:	83 e0       	ldi	r24, 0x03	; 3
    3210:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x03);
    3214:	83 e0       	ldi	r24, 0x03	; 3
    3216:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x02);
    3220:	82 e0       	ldi	r24, 0x02	; 2
    3222:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
    3226:	18 c0       	rjmp	.+48     	; 0x3258 <LCD_Arabic_Dict+0x724>
	    break;

	case 28:
		/* yaah */
	    LCD_WriteData(0x00);
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x01);
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x1f);
    3246:	8f e1       	ldi	r24, 0x1F	; 31
    3248:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x00);
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    LCD_WriteData(0x0a);
    3252:	8a e0       	ldi	r24, 0x0A	; 10
    3254:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	}
	English_Char-=8;
    3258:	80 91 72 00 	lds	r24, 0x0072
    325c:	88 50       	subi	r24, 0x08	; 8
    325e:	80 93 72 00 	sts	0x0072, r24
	LCD_Set_DD_Add(0x80+charact_number+English_Char);
    3262:	90 91 70 00 	lds	r25, 0x0070
    3266:	80 91 72 00 	lds	r24, 0x0072
    326a:	89 0f       	add	r24, r25
    326c:	80 58       	subi	r24, 0x80	; 128
    326e:	0e 94 11 15 	call	0x2a22	; 0x2a22 <LCD_Set_DD_Add>

}
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	0f 90       	pop	r0
    327c:	cf 91       	pop	r28
    327e:	df 91       	pop	r29
    3280:	08 95       	ret

00003282 <LCD_WriteArabicData>:
void LCD_WriteArabicData(u8 data)
{
    3282:	df 93       	push	r29
    3284:	cf 93       	push	r28
    3286:	0f 92       	push	r0
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	89 83       	std	Y+1, r24	; 0x01
	if(!(IS_WRITTEN(data)))
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <IS_WRITTEN>
    3294:	88 23       	and	r24, r24
    3296:	99 f4       	brne	.+38     	; 0x32be <LCD_WriteArabicData+0x3c>
	{
		LCD_Arabic_Dict(data);
    3298:	89 81       	ldd	r24, Y+1	; 0x01
    329a:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_Arabic_Dict>
		LCD_WriteData(charact_number);
    329e:	80 91 70 00 	lds	r24, 0x0070
    32a2:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	    charact_number++;
    32a6:	80 91 70 00 	lds	r24, 0x0070
    32aa:	8f 5f       	subi	r24, 0xFF	; 255
    32ac:	80 93 70 00 	sts	0x0070, r24
	    if(charact_number>7)
    32b0:	80 91 70 00 	lds	r24, 0x0070
    32b4:	88 30       	cpi	r24, 0x08	; 8
    32b6:	38 f0       	brcs	.+14     	; 0x32c6 <LCD_WriteArabicData+0x44>
	    	charact_number=0;
    32b8:	10 92 70 00 	sts	0x0070, r1
    32bc:	04 c0       	rjmp	.+8      	; 0x32c6 <LCD_WriteArabicData+0x44>
	}
	else
		LCD_WriteData(current_charact);
    32be:	80 91 71 00 	lds	r24, 0x0071
    32c2:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
	English_Char--;
    32c6:	80 91 72 00 	lds	r24, 0x0072
    32ca:	81 50       	subi	r24, 0x01	; 1
    32cc:	80 93 72 00 	sts	0x0072, r24

}
    32d0:	0f 90       	pop	r0
    32d2:	cf 91       	pop	r28
    32d4:	df 91       	pop	r29
    32d6:	08 95       	ret

000032d8 <IS_WRITTEN>:

u8 IS_WRITTEN(u8 data)
{
    32d8:	df 93       	push	r29
    32da:	cf 93       	push	r28
    32dc:	00 d0       	rcall	.+0      	; 0x32de <IS_WRITTEN+0x6>
    32de:	00 d0       	rcall	.+0      	; 0x32e0 <IS_WRITTEN+0x8>
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	8b 83       	std	Y+3, r24	; 0x03
	int count;
	for(count=0;count<8;count++)
    32e6:	1a 82       	std	Y+2, r1	; 0x02
    32e8:	19 82       	std	Y+1, r1	; 0x01
    32ea:	14 c0       	rjmp	.+40     	; 0x3314 <IS_WRITTEN+0x3c>
		if(charact_prev[count]==data)
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	9a 81       	ldd	r25, Y+2	; 0x02
    32f0:	fc 01       	movw	r30, r24
    32f2:	e8 59       	subi	r30, 0x98	; 152
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	90 81       	ld	r25, Z
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	98 17       	cp	r25, r24
    32fc:	31 f4       	brne	.+12     	; 0x330a <IS_WRITTEN+0x32>
		{
			current_charact=count;
    32fe:	89 81       	ldd	r24, Y+1	; 0x01
    3300:	80 93 71 00 	sts	0x0071, r24
			return 1;
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	8c 83       	std	Y+4, r24	; 0x04
    3308:	14 c0       	rjmp	.+40     	; 0x3332 <IS_WRITTEN+0x5a>
}

u8 IS_WRITTEN(u8 data)
{
	int count;
	for(count=0;count<8;count++)
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	9a 81       	ldd	r25, Y+2	; 0x02
    330e:	01 96       	adiw	r24, 0x01	; 1
    3310:	9a 83       	std	Y+2, r25	; 0x02
    3312:	89 83       	std	Y+1, r24	; 0x01
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	9a 81       	ldd	r25, Y+2	; 0x02
    3318:	88 30       	cpi	r24, 0x08	; 8
    331a:	91 05       	cpc	r25, r1
    331c:	3c f3       	brlt	.-50     	; 0x32ec <IS_WRITTEN+0x14>
		if(charact_prev[count]==data)
		{
			current_charact=count;
			return 1;
		}
	charact_prev[charact_number]=data;
    331e:	80 91 70 00 	lds	r24, 0x0070
    3322:	88 2f       	mov	r24, r24
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	fc 01       	movw	r30, r24
    3328:	e8 59       	subi	r30, 0x98	; 152
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	80 83       	st	Z, r24

	return 0;
    3330:	1c 82       	std	Y+4, r1	; 0x04
    3332:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	cf 91       	pop	r28
    333e:	df 91       	pop	r29
    3340:	08 95       	ret

00003342 <LCD_WrtireString_Arabic>:

u8 LCD_WrtireString_Arabic(u8* str)
{
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	00 d0       	rcall	.+0      	; 0x3348 <LCD_WrtireString_Arabic+0x6>
    3348:	00 d0       	rcall	.+0      	; 0x334a <LCD_WrtireString_Arabic+0x8>
    334a:	00 d0       	rcall	.+0      	; 0x334c <LCD_WrtireString_Arabic+0xa>
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	9d 83       	std	Y+5, r25	; 0x05
    3352:	8c 83       	std	Y+4, r24	; 0x04
	if(English_Char>6*16+7)
    3354:	80 91 72 00 	lds	r24, 0x0072
    3358:	88 36       	cpi	r24, 0x68	; 104
    335a:	10 f0       	brcs	.+4      	; 0x3360 <LCD_WrtireString_Arabic+0x1e>
		English_Char=0;
    335c:	10 92 72 00 	sts	0x0072, r1

	int count=0;
    3360:	1b 82       	std	Y+3, r1	; 0x03
    3362:	1a 82       	std	Y+2, r1	; 0x02
	u8 size=0;
    3364:	19 82       	std	Y+1, r1	; 0x01
    3366:	08 c0       	rjmp	.+16     	; 0x3378 <LCD_WrtireString_Arabic+0x36>

	while( (!((*(str+count))=='\0')) && size<=16)
	{
		count++;
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	9b 81       	ldd	r25, Y+3	; 0x03
    336c:	01 96       	adiw	r24, 0x01	; 1
    336e:	9b 83       	std	Y+3, r25	; 0x03
    3370:	8a 83       	std	Y+2, r24	; 0x02
		size++;
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	8f 5f       	subi	r24, 0xFF	; 255
    3376:	89 83       	std	Y+1, r24	; 0x01
		English_Char=0;

	int count=0;
	u8 size=0;

	while( (!((*(str+count))=='\0')) && size<=16)
    3378:	2a 81       	ldd	r18, Y+2	; 0x02
    337a:	3b 81       	ldd	r19, Y+3	; 0x03
    337c:	8c 81       	ldd	r24, Y+4	; 0x04
    337e:	9d 81       	ldd	r25, Y+5	; 0x05
    3380:	fc 01       	movw	r30, r24
    3382:	e2 0f       	add	r30, r18
    3384:	f3 1f       	adc	r31, r19
    3386:	80 81       	ld	r24, Z
    3388:	88 23       	and	r24, r24
    338a:	19 f0       	breq	.+6      	; 0x3392 <LCD_WrtireString_Arabic+0x50>
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	81 31       	cpi	r24, 0x11	; 17
    3390:	58 f3       	brcs	.-42     	; 0x3368 <LCD_WrtireString_Arabic+0x26>
	{
		count++;
		size++;
	}

		if(size<=16)
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	81 31       	cpi	r24, 0x11	; 17
    3396:	90 f5       	brcc	.+100    	; 0x33fc <LCD_WrtireString_Arabic+0xba>
		{
			for(count=size-1;count>=0;count--)
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	88 2f       	mov	r24, r24
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	9b 83       	std	Y+3, r25	; 0x03
    33a2:	8a 83       	std	Y+2, r24	; 0x02
    33a4:	24 c0       	rjmp	.+72     	; 0x33ee <LCD_WrtireString_Arabic+0xac>
			{
				if((*(str+count))<=28)
    33a6:	2a 81       	ldd	r18, Y+2	; 0x02
    33a8:	3b 81       	ldd	r19, Y+3	; 0x03
    33aa:	8c 81       	ldd	r24, Y+4	; 0x04
    33ac:	9d 81       	ldd	r25, Y+5	; 0x05
    33ae:	fc 01       	movw	r30, r24
    33b0:	e2 0f       	add	r30, r18
    33b2:	f3 1f       	adc	r31, r19
    33b4:	80 81       	ld	r24, Z
    33b6:	8d 31       	cpi	r24, 0x1D	; 29
    33b8:	58 f4       	brcc	.+22     	; 0x33d0 <LCD_WrtireString_Arabic+0x8e>
					LCD_WriteArabicData(*(str+count));
    33ba:	2a 81       	ldd	r18, Y+2	; 0x02
    33bc:	3b 81       	ldd	r19, Y+3	; 0x03
    33be:	8c 81       	ldd	r24, Y+4	; 0x04
    33c0:	9d 81       	ldd	r25, Y+5	; 0x05
    33c2:	fc 01       	movw	r30, r24
    33c4:	e2 0f       	add	r30, r18
    33c6:	f3 1f       	adc	r31, r19
    33c8:	80 81       	ld	r24, Z
    33ca:	0e 94 41 19 	call	0x3282	; 0x3282 <LCD_WriteArabicData>
    33ce:	0a c0       	rjmp	.+20     	; 0x33e4 <LCD_WrtireString_Arabic+0xa2>
				else
					LCD_WriteData(*(str+count));
    33d0:	2a 81       	ldd	r18, Y+2	; 0x02
    33d2:	3b 81       	ldd	r19, Y+3	; 0x03
    33d4:	8c 81       	ldd	r24, Y+4	; 0x04
    33d6:	9d 81       	ldd	r25, Y+5	; 0x05
    33d8:	fc 01       	movw	r30, r24
    33da:	e2 0f       	add	r30, r18
    33dc:	f3 1f       	adc	r31, r19
    33de:	80 81       	ld	r24, Z
    33e0:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
		size++;
	}

		if(size<=16)
		{
			for(count=size-1;count>=0;count--)
    33e4:	8a 81       	ldd	r24, Y+2	; 0x02
    33e6:	9b 81       	ldd	r25, Y+3	; 0x03
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	9b 83       	std	Y+3, r25	; 0x03
    33ec:	8a 83       	std	Y+2, r24	; 0x02
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	9b 81       	ldd	r25, Y+3	; 0x03
    33f2:	99 23       	and	r25, r25
    33f4:	c4 f6       	brge	.-80     	; 0x33a6 <LCD_WrtireString_Arabic+0x64>
				if((*(str+count))<=28)
					LCD_WriteArabicData(*(str+count));
				else
					LCD_WriteData(*(str+count));
			}
			return 1;
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	8e 83       	std	Y+6, r24	; 0x06
    33fa:	01 c0       	rjmp	.+2      	; 0x33fe <LCD_WrtireString_Arabic+0xbc>
		}
		else
			return 0;
    33fc:	1e 82       	std	Y+6, r1	; 0x06
    33fe:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3400:	26 96       	adiw	r28, 0x06	; 6
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <LED_Init>:

#include "LED.h"
#include "DIO.h"

void LED_Init(u8 u8LedNumber)
{
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	0f 92       	push	r0
    3418:	cd b7       	in	r28, 0x3d	; 61
    341a:	de b7       	in	r29, 0x3e	; 62
    341c:	89 83       	std	Y+1, r24	; 0x01
	if(u8LedNumber)
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	88 23       	and	r24, r24
    3422:	59 f0       	breq	.+22     	; 0x343a <LED_Init+0x28>
	{
		DIO_voidSetDir(PortA,Pin5,Output); /* Set pin 4A as an output pin */
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	65 e0       	ldi	r22, 0x05	; 5
    3428:	41 e0       	ldi	r20, 0x01	; 1
    342a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
		DIO_voidWriteVal(PortA,Pin5,Zero_Volt); /* Set pin 5A to 0V */
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	65 e0       	ldi	r22, 0x05	; 5
    3432:	40 e0       	ldi	r20, 0x00	; 0
    3434:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
    3438:	0a c0       	rjmp	.+20     	; 0x344e <LED_Init+0x3c>
	}
	else
	{
		DIO_voidSetDir(PortA,Pin4,Output); /* Set pin 4A as an output pin */
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	64 e0       	ldi	r22, 0x04	; 4
    343e:	41 e0       	ldi	r20, 0x01	; 1
    3440:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
		DIO_voidWriteVal(PortA,Pin4,Zero_Volt); /* Set pin 4A to 0V */
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	64 e0       	ldi	r22, 0x04	; 4
    3448:	40 e0       	ldi	r20, 0x00	; 0
    344a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
	}
}
    344e:	0f 90       	pop	r0
    3450:	cf 91       	pop	r28
    3452:	df 91       	pop	r29
    3454:	08 95       	ret

00003456 <LED>:
void LED(u8 u8LedNumber, u8 u8State)
{
    3456:	df 93       	push	r29
    3458:	cf 93       	push	r28
    345a:	00 d0       	rcall	.+0      	; 0x345c <LED+0x6>
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	89 83       	std	Y+1, r24	; 0x01
    3462:	6a 83       	std	Y+2, r22	; 0x02
	if(u8LedNumber)
    3464:	89 81       	ldd	r24, Y+1	; 0x01
    3466:	88 23       	and	r24, r24
    3468:	31 f0       	breq	.+12     	; 0x3476 <LED+0x20>
		DIO_voidWriteVal(PortA,Pin5,u8State); /* Set pin 5A to StateV */
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	65 e0       	ldi	r22, 0x05	; 5
    346e:	4a 81       	ldd	r20, Y+2	; 0x02
    3470:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
    3474:	05 c0       	rjmp	.+10     	; 0x3480 <LED+0x2a>

	else
		DIO_voidWriteVal(PortA,Pin4,u8State); /* Set pin 4A to StateV */
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	64 e0       	ldi	r22, 0x04	; 4
    347a:	4a 81       	ldd	r20, Y+2	; 0x02
    347c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
}
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	cf 91       	pop	r28
    3486:	df 91       	pop	r29
    3488:	08 95       	ret

0000348a <SS_Init>:
#include "Buzzer.h"
#include "LED.h"
#include <avr/delay.h>

void SS_Init()
{
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDir(PortB,Pin0,Output);
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	60 e0       	ldi	r22, 0x00	; 0
    3496:	41 e0       	ldi	r20, 0x01	; 1
    3498:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin1,Output);
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	61 e0       	ldi	r22, 0x01	; 1
    34a0:	41 e0       	ldi	r20, 0x01	; 1
    34a2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin4,Output);
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	64 e0       	ldi	r22, 0x04	; 4
    34aa:	41 e0       	ldi	r20, 0x01	; 1
    34ac:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin5,Output);
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	65 e0       	ldi	r22, 0x05	; 5
    34b4:	41 e0       	ldi	r20, 0x01	; 1
    34b6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin6,Output);
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	66 e0       	ldi	r22, 0x06	; 6
    34be:	41 e0       	ldi	r20, 0x01	; 1
    34c0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin7,Output);
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	67 e0       	ldi	r22, 0x07	; 7
    34c8:	41 e0       	ldi	r20, 0x01	; 1
    34ca:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetDir>
}
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <SS_Write>:

void SS_Write(u8 u8Number, u8 u8channel)
{
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	00 d0       	rcall	.+0      	; 0x34da <SS_Write+0x6>
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
    34de:	89 83       	std	Y+1, r24	; 0x01
    34e0:	6a 83       	std	Y+2, r22	; 0x02
	if(u8channel) /*1 for SS number 4(Most Sig)*/
    34e2:	8a 81       	ldd	r24, Y+2	; 0x02
    34e4:	88 23       	and	r24, r24
    34e6:	59 f0       	breq	.+22     	; 0x34fe <SS_Write+0x2a>
	{
		DIO_voidWriteVal(PortB,Pin4,Zero_Volt);
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	64 e0       	ldi	r22, 0x04	; 4
    34ec:	40 e0       	ldi	r20, 0x00	; 0
    34ee:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortB,Pin5,Five_Volt);
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	65 e0       	ldi	r22, 0x05	; 5
    34f6:	41 e0       	ldi	r20, 0x01	; 1
    34f8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
    34fc:	0a c0       	rjmp	.+20     	; 0x3512 <SS_Write+0x3e>
	}
	else /*0 for SS number 5(Lest Sig)*/
	{
		DIO_voidWriteVal(PortB,Pin4,Five_Volt);
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	64 e0       	ldi	r22, 0x04	; 4
    3502:	41 e0       	ldi	r20, 0x01	; 1
    3504:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortB,Pin5,Zero_Volt);
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	65 e0       	ldi	r22, 0x05	; 5
    350c:	40 e0       	ldi	r20, 0x00	; 0
    350e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
	}

	DIO_voidWriteVal(PortB,Pin0,Get_Bit(u8Number,0)); /*A*/
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	98 2f       	mov	r25, r24
    3516:	91 70       	andi	r25, 0x01	; 1
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	60 e0       	ldi	r22, 0x00	; 0
    351c:	49 2f       	mov	r20, r25
    351e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortB,Pin1,Get_Bit(u8Number,1)); /*B*/
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	88 2f       	mov	r24, r24
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	82 70       	andi	r24, 0x02	; 2
    352a:	90 70       	andi	r25, 0x00	; 0
    352c:	95 95       	asr	r25
    352e:	87 95       	ror	r24
    3530:	98 2f       	mov	r25, r24
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	61 e0       	ldi	r22, 0x01	; 1
    3536:	49 2f       	mov	r20, r25
    3538:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortB,Pin6,Get_Bit(u8Number,2)); /*C*/
    353c:	89 81       	ldd	r24, Y+1	; 0x01
    353e:	88 2f       	mov	r24, r24
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	84 70       	andi	r24, 0x04	; 4
    3544:	90 70       	andi	r25, 0x00	; 0
    3546:	95 95       	asr	r25
    3548:	87 95       	ror	r24
    354a:	95 95       	asr	r25
    354c:	87 95       	ror	r24
    354e:	98 2f       	mov	r25, r24
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	66 e0       	ldi	r22, 0x06	; 6
    3554:	49 2f       	mov	r20, r25
    3556:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortB,Pin7,Get_Bit(u8Number,3)); /*D*/
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	88 2f       	mov	r24, r24
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	88 70       	andi	r24, 0x08	; 8
    3562:	90 70       	andi	r25, 0x00	; 0
    3564:	95 95       	asr	r25
    3566:	87 95       	ror	r24
    3568:	95 95       	asr	r25
    356a:	87 95       	ror	r24
    356c:	95 95       	asr	r25
    356e:	87 95       	ror	r24
    3570:	98 2f       	mov	r25, r24
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	67 e0       	ldi	r22, 0x07	; 7
    3576:	49 2f       	mov	r20, r25
    3578:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_voidWriteVal>

}
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	08 95       	ret

00003586 <SS_Mode>:

void SS_Mode(u8 u8Number)
{
    3586:	0f 93       	push	r16
    3588:	1f 93       	push	r17
    358a:	df 93       	push	r29
    358c:	cf 93       	push	r28
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	c9 55       	subi	r28, 0x59	; 89
    3594:	d0 40       	sbci	r29, 0x00	; 0
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	de bf       	out	0x3e, r29	; 62
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	fe 01       	movw	r30, r28
    35a2:	e7 5a       	subi	r30, 0xA7	; 167
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	80 83       	st	Z, r24
	u8 number,number1,number2,number3;
/* Mode 1 (count-down)*/
 switch(u8Number)
    35a8:	fe 01       	movw	r30, r28
    35aa:	e7 5a       	subi	r30, 0xA7	; 167
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	80 81       	ld	r24, Z
    35b0:	88 2f       	mov	r24, r24
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	81 30       	cpi	r24, 0x01	; 1
    35b6:	91 05       	cpc	r25, r1
    35b8:	09 f0       	breq	.+2      	; 0x35bc <SS_Mode+0x36>
    35ba:	17 c4       	rjmp	.+2094   	; 0x3dea <SS_Mode+0x864>
 {
 case 1:
	 	LED(0,ON);
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	61 e0       	ldi	r22, 0x01	; 1
    35c0:	0e 94 2b 1a 	call	0x3456	; 0x3456 <LED>
	 	LED(1,OFF);
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	60 e0       	ldi	r22, 0x00	; 0
    35c8:	0e 94 2b 1a 	call	0x3456	; 0x3456 <LED>
	 	Buzzer(OFF);
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer>

		for(number=60; number>0; number--)
    35d2:	fe 01       	movw	r30, r28
    35d4:	e8 5a       	subi	r30, 0xA8	; 168
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	8c e3       	ldi	r24, 0x3C	; 60
    35da:	80 83       	st	Z, r24
    35dc:	7d c1       	rjmp	.+762    	; 0x38d8 <SS_Mode+0x352>
		{
			number1=number/10;
    35de:	de 01       	movw	r26, r28
    35e0:	a9 5a       	subi	r26, 0xA9	; 169
    35e2:	bf 4f       	sbci	r27, 0xFF	; 255
    35e4:	fe 01       	movw	r30, r28
    35e6:	e8 5a       	subi	r30, 0xA8	; 168
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	80 81       	ld	r24, Z
    35ec:	9a e0       	ldi	r25, 0x0A	; 10
    35ee:	69 2f       	mov	r22, r25
    35f0:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__udivmodqi4>
    35f4:	8c 93       	st	X, r24
			number2=number%10;
    35f6:	de 01       	movw	r26, r28
    35f8:	aa 5a       	subi	r26, 0xAA	; 170
    35fa:	bf 4f       	sbci	r27, 0xFF	; 255
    35fc:	fe 01       	movw	r30, r28
    35fe:	e8 5a       	subi	r30, 0xA8	; 168
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	80 81       	ld	r24, Z
    3604:	9a e0       	ldi	r25, 0x0A	; 10
    3606:	69 2f       	mov	r22, r25
    3608:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__udivmodqi4>
    360c:	89 2f       	mov	r24, r25
    360e:	8c 93       	st	X, r24

			for(number3=0;number3<100;number3++)
    3610:	fe 01       	movw	r30, r28
    3612:	eb 5a       	subi	r30, 0xAB	; 171
    3614:	ff 4f       	sbci	r31, 0xFF	; 255
    3616:	10 82       	st	Z, r1
    3618:	4f c1       	rjmp	.+670    	; 0x38b8 <SS_Mode+0x332>
			{
				/*Set Number 1 on 1st 7-segment*/
				SS_Write(number2, 0);
    361a:	fe 01       	movw	r30, r28
    361c:	ea 5a       	subi	r30, 0xAA	; 170
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	80 81       	ld	r24, Z
    3622:	60 e0       	ldi	r22, 0x00	; 0
    3624:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <SS_Write>
    3628:	fe 01       	movw	r30, r28
    362a:	ef 5a       	subi	r30, 0xAF	; 175
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	a0 e2       	ldi	r26, 0x20	; 32
    3634:	b1 e4       	ldi	r27, 0x41	; 65
    3636:	80 83       	st	Z, r24
    3638:	91 83       	std	Z+1, r25	; 0x01
    363a:	a2 83       	std	Z+2, r26	; 0x02
    363c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363e:	8e 01       	movw	r16, r28
    3640:	03 5b       	subi	r16, 0xB3	; 179
    3642:	1f 4f       	sbci	r17, 0xFF	; 255
    3644:	fe 01       	movw	r30, r28
    3646:	ef 5a       	subi	r30, 0xAF	; 175
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	60 81       	ld	r22, Z
    364c:	71 81       	ldd	r23, Z+1	; 0x01
    364e:	82 81       	ldd	r24, Z+2	; 0x02
    3650:	93 81       	ldd	r25, Z+3	; 0x03
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	4a e7       	ldi	r20, 0x7A	; 122
    3658:	53 e4       	ldi	r21, 0x43	; 67
    365a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	f8 01       	movw	r30, r16
    3664:	80 83       	st	Z, r24
    3666:	91 83       	std	Z+1, r25	; 0x01
    3668:	a2 83       	std	Z+2, r26	; 0x02
    366a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    366c:	fe 01       	movw	r30, r28
    366e:	e3 5b       	subi	r30, 0xB3	; 179
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	60 81       	ld	r22, Z
    3674:	71 81       	ldd	r23, Z+1	; 0x01
    3676:	82 81       	ldd	r24, Z+2	; 0x02
    3678:	93 81       	ldd	r25, Z+3	; 0x03
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e8       	ldi	r20, 0x80	; 128
    3680:	5f e3       	ldi	r21, 0x3F	; 63
    3682:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3686:	88 23       	and	r24, r24
    3688:	44 f4       	brge	.+16     	; 0x369a <SS_Mode+0x114>
		__ticks = 1;
    368a:	fe 01       	movw	r30, r28
    368c:	e5 5b       	subi	r30, 0xB5	; 181
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	80 83       	st	Z, r24
    3698:	64 c0       	rjmp	.+200    	; 0x3762 <SS_Mode+0x1dc>
	else if (__tmp > 65535)
    369a:	fe 01       	movw	r30, r28
    369c:	e3 5b       	subi	r30, 0xB3	; 179
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	60 81       	ld	r22, Z
    36a2:	71 81       	ldd	r23, Z+1	; 0x01
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	3f ef       	ldi	r19, 0xFF	; 255
    36ac:	4f e7       	ldi	r20, 0x7F	; 127
    36ae:	57 e4       	ldi	r21, 0x47	; 71
    36b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36b4:	18 16       	cp	r1, r24
    36b6:	0c f0       	brlt	.+2      	; 0x36ba <SS_Mode+0x134>
    36b8:	43 c0       	rjmp	.+134    	; 0x3740 <SS_Mode+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ba:	fe 01       	movw	r30, r28
    36bc:	ef 5a       	subi	r30, 0xAF	; 175
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	60 81       	ld	r22, Z
    36c2:	71 81       	ldd	r23, Z+1	; 0x01
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	93 81       	ldd	r25, Z+3	; 0x03
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e2       	ldi	r20, 0x20	; 32
    36ce:	51 e4       	ldi	r21, 0x41	; 65
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	8e 01       	movw	r16, r28
    36da:	05 5b       	subi	r16, 0xB5	; 181
    36dc:	1f 4f       	sbci	r17, 0xFF	; 255
    36de:	bc 01       	movw	r22, r24
    36e0:	cd 01       	movw	r24, r26
    36e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	f8 01       	movw	r30, r16
    36ec:	91 83       	std	Z+1, r25	; 0x01
    36ee:	80 83       	st	Z, r24
    36f0:	1f c0       	rjmp	.+62     	; 0x3730 <SS_Mode+0x1aa>
    36f2:	fe 01       	movw	r30, r28
    36f4:	e7 5b       	subi	r30, 0xB7	; 183
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	89 e1       	ldi	r24, 0x19	; 25
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	80 83       	st	Z, r24
    3700:	fe 01       	movw	r30, r28
    3702:	e7 5b       	subi	r30, 0xB7	; 183
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	80 81       	ld	r24, Z
    3708:	91 81       	ldd	r25, Z+1	; 0x01
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	f1 f7       	brne	.-4      	; 0x370a <SS_Mode+0x184>
    370e:	fe 01       	movw	r30, r28
    3710:	e7 5b       	subi	r30, 0xB7	; 183
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	91 83       	std	Z+1, r25	; 0x01
    3716:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3718:	de 01       	movw	r26, r28
    371a:	a5 5b       	subi	r26, 0xB5	; 181
    371c:	bf 4f       	sbci	r27, 0xFF	; 255
    371e:	fe 01       	movw	r30, r28
    3720:	e5 5b       	subi	r30, 0xB5	; 181
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	80 81       	ld	r24, Z
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	11 96       	adiw	r26, 0x01	; 1
    372c:	9c 93       	st	X, r25
    372e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3730:	fe 01       	movw	r30, r28
    3732:	e5 5b       	subi	r30, 0xB5	; 181
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	80 81       	ld	r24, Z
    3738:	91 81       	ldd	r25, Z+1	; 0x01
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	d1 f6       	brne	.-76     	; 0x36f2 <SS_Mode+0x16c>
    373e:	27 c0       	rjmp	.+78     	; 0x378e <SS_Mode+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3740:	8e 01       	movw	r16, r28
    3742:	05 5b       	subi	r16, 0xB5	; 181
    3744:	1f 4f       	sbci	r17, 0xFF	; 255
    3746:	fe 01       	movw	r30, r28
    3748:	e3 5b       	subi	r30, 0xB3	; 179
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	60 81       	ld	r22, Z
    374e:	71 81       	ldd	r23, Z+1	; 0x01
    3750:	82 81       	ldd	r24, Z+2	; 0x02
    3752:	93 81       	ldd	r25, Z+3	; 0x03
    3754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	f8 01       	movw	r30, r16
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
    3762:	de 01       	movw	r26, r28
    3764:	a9 5b       	subi	r26, 0xB9	; 185
    3766:	bf 4f       	sbci	r27, 0xFF	; 255
    3768:	fe 01       	movw	r30, r28
    376a:	e5 5b       	subi	r30, 0xB5	; 181
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	80 81       	ld	r24, Z
    3770:	91 81       	ldd	r25, Z+1	; 0x01
    3772:	8d 93       	st	X+, r24
    3774:	9c 93       	st	X, r25
    3776:	fe 01       	movw	r30, r28
    3778:	e9 5b       	subi	r30, 0xB9	; 185
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	80 81       	ld	r24, Z
    377e:	91 81       	ldd	r25, Z+1	; 0x01
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <SS_Mode+0x1fa>
    3784:	fe 01       	movw	r30, r28
    3786:	e9 5b       	subi	r30, 0xB9	; 185
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	91 83       	std	Z+1, r25	; 0x01
    378c:	80 83       	st	Z, r24

				_delay_ms(10);

				/*Set Number 2 on 2nd 7-segment*/
				SS_Write(number1, 1);
    378e:	fe 01       	movw	r30, r28
    3790:	e9 5a       	subi	r30, 0xA9	; 169
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	80 81       	ld	r24, Z
    3796:	61 e0       	ldi	r22, 0x01	; 1
    3798:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <SS_Write>
    379c:	fe 01       	movw	r30, r28
    379e:	ed 5b       	subi	r30, 0xBD	; 189
    37a0:	ff 4f       	sbci	r31, 0xFF	; 255
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	a0 e2       	ldi	r26, 0x20	; 32
    37a8:	b1 e4       	ldi	r27, 0x41	; 65
    37aa:	80 83       	st	Z, r24
    37ac:	91 83       	std	Z+1, r25	; 0x01
    37ae:	a2 83       	std	Z+2, r26	; 0x02
    37b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37b2:	8e 01       	movw	r16, r28
    37b4:	01 5c       	subi	r16, 0xC1	; 193
    37b6:	1f 4f       	sbci	r17, 0xFF	; 255
    37b8:	fe 01       	movw	r30, r28
    37ba:	ed 5b       	subi	r30, 0xBD	; 189
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	60 81       	ld	r22, Z
    37c0:	71 81       	ldd	r23, Z+1	; 0x01
    37c2:	82 81       	ldd	r24, Z+2	; 0x02
    37c4:	93 81       	ldd	r25, Z+3	; 0x03
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	4a e7       	ldi	r20, 0x7A	; 122
    37cc:	53 e4       	ldi	r21, 0x43	; 67
    37ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	f8 01       	movw	r30, r16
    37d8:	80 83       	st	Z, r24
    37da:	91 83       	std	Z+1, r25	; 0x01
    37dc:	a2 83       	std	Z+2, r26	; 0x02
    37de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37e0:	fe 01       	movw	r30, r28
    37e2:	ff 96       	adiw	r30, 0x3f	; 63
    37e4:	60 81       	ld	r22, Z
    37e6:	71 81       	ldd	r23, Z+1	; 0x01
    37e8:	82 81       	ldd	r24, Z+2	; 0x02
    37ea:	93 81       	ldd	r25, Z+3	; 0x03
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	40 e8       	ldi	r20, 0x80	; 128
    37f2:	5f e3       	ldi	r21, 0x3F	; 63
    37f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37f8:	88 23       	and	r24, r24
    37fa:	2c f4       	brge	.+10     	; 0x3806 <SS_Mode+0x280>
		__ticks = 1;
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	9e af       	std	Y+62, r25	; 0x3e
    3802:	8d af       	std	Y+61, r24	; 0x3d
    3804:	46 c0       	rjmp	.+140    	; 0x3892 <SS_Mode+0x30c>
	else if (__tmp > 65535)
    3806:	fe 01       	movw	r30, r28
    3808:	ff 96       	adiw	r30, 0x3f	; 63
    380a:	60 81       	ld	r22, Z
    380c:	71 81       	ldd	r23, Z+1	; 0x01
    380e:	82 81       	ldd	r24, Z+2	; 0x02
    3810:	93 81       	ldd	r25, Z+3	; 0x03
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	3f ef       	ldi	r19, 0xFF	; 255
    3816:	4f e7       	ldi	r20, 0x7F	; 127
    3818:	57 e4       	ldi	r21, 0x47	; 71
    381a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    381e:	18 16       	cp	r1, r24
    3820:	64 f5       	brge	.+88     	; 0x387a <SS_Mode+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3822:	fe 01       	movw	r30, r28
    3824:	ed 5b       	subi	r30, 0xBD	; 189
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	60 81       	ld	r22, Z
    382a:	71 81       	ldd	r23, Z+1	; 0x01
    382c:	82 81       	ldd	r24, Z+2	; 0x02
    382e:	93 81       	ldd	r25, Z+3	; 0x03
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	40 e2       	ldi	r20, 0x20	; 32
    3836:	51 e4       	ldi	r21, 0x41	; 65
    3838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	bc 01       	movw	r22, r24
    3842:	cd 01       	movw	r24, r26
    3844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	9e af       	std	Y+62, r25	; 0x3e
    384e:	8d af       	std	Y+61, r24	; 0x3d
    3850:	0f c0       	rjmp	.+30     	; 0x3870 <SS_Mode+0x2ea>
    3852:	89 e1       	ldi	r24, 0x19	; 25
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	9c af       	std	Y+60, r25	; 0x3c
    3858:	8b af       	std	Y+59, r24	; 0x3b
    385a:	8b ad       	ldd	r24, Y+59	; 0x3b
    385c:	9c ad       	ldd	r25, Y+60	; 0x3c
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	f1 f7       	brne	.-4      	; 0x385e <SS_Mode+0x2d8>
    3862:	9c af       	std	Y+60, r25	; 0x3c
    3864:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3866:	8d ad       	ldd	r24, Y+61	; 0x3d
    3868:	9e ad       	ldd	r25, Y+62	; 0x3e
    386a:	01 97       	sbiw	r24, 0x01	; 1
    386c:	9e af       	std	Y+62, r25	; 0x3e
    386e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3870:	8d ad       	ldd	r24, Y+61	; 0x3d
    3872:	9e ad       	ldd	r25, Y+62	; 0x3e
    3874:	00 97       	sbiw	r24, 0x00	; 0
    3876:	69 f7       	brne	.-38     	; 0x3852 <SS_Mode+0x2cc>
    3878:	16 c0       	rjmp	.+44     	; 0x38a6 <SS_Mode+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    387a:	fe 01       	movw	r30, r28
    387c:	ff 96       	adiw	r30, 0x3f	; 63
    387e:	60 81       	ld	r22, Z
    3880:	71 81       	ldd	r23, Z+1	; 0x01
    3882:	82 81       	ldd	r24, Z+2	; 0x02
    3884:	93 81       	ldd	r25, Z+3	; 0x03
    3886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	9e af       	std	Y+62, r25	; 0x3e
    3890:	8d af       	std	Y+61, r24	; 0x3d
    3892:	8d ad       	ldd	r24, Y+61	; 0x3d
    3894:	9e ad       	ldd	r25, Y+62	; 0x3e
    3896:	9a af       	std	Y+58, r25	; 0x3a
    3898:	89 af       	std	Y+57, r24	; 0x39
    389a:	89 ad       	ldd	r24, Y+57	; 0x39
    389c:	9a ad       	ldd	r25, Y+58	; 0x3a
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	f1 f7       	brne	.-4      	; 0x389e <SS_Mode+0x318>
    38a2:	9a af       	std	Y+58, r25	; 0x3a
    38a4:	89 af       	std	Y+57, r24	; 0x39
		for(number=60; number>0; number--)
		{
			number1=number/10;
			number2=number%10;

			for(number3=0;number3<100;number3++)
    38a6:	de 01       	movw	r26, r28
    38a8:	ab 5a       	subi	r26, 0xAB	; 171
    38aa:	bf 4f       	sbci	r27, 0xFF	; 255
    38ac:	fe 01       	movw	r30, r28
    38ae:	eb 5a       	subi	r30, 0xAB	; 171
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	80 81       	ld	r24, Z
    38b4:	8f 5f       	subi	r24, 0xFF	; 255
    38b6:	8c 93       	st	X, r24
    38b8:	fe 01       	movw	r30, r28
    38ba:	eb 5a       	subi	r30, 0xAB	; 171
    38bc:	ff 4f       	sbci	r31, 0xFF	; 255
    38be:	80 81       	ld	r24, Z
    38c0:	84 36       	cpi	r24, 0x64	; 100
    38c2:	08 f4       	brcc	.+2      	; 0x38c6 <SS_Mode+0x340>
    38c4:	aa ce       	rjmp	.-684    	; 0x361a <SS_Mode+0x94>
 case 1:
	 	LED(0,ON);
	 	LED(1,OFF);
	 	Buzzer(OFF);

		for(number=60; number>0; number--)
    38c6:	de 01       	movw	r26, r28
    38c8:	a8 5a       	subi	r26, 0xA8	; 168
    38ca:	bf 4f       	sbci	r27, 0xFF	; 255
    38cc:	fe 01       	movw	r30, r28
    38ce:	e8 5a       	subi	r30, 0xA8	; 168
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	80 81       	ld	r24, Z
    38d4:	81 50       	subi	r24, 0x01	; 1
    38d6:	8c 93       	st	X, r24
    38d8:	fe 01       	movw	r30, r28
    38da:	e8 5a       	subi	r30, 0xA8	; 168
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	80 81       	ld	r24, Z
    38e0:	88 23       	and	r24, r24
    38e2:	09 f0       	breq	.+2      	; 0x38e6 <SS_Mode+0x360>
    38e4:	7c ce       	rjmp	.-776    	; 0x35de <SS_Mode+0x58>
				_delay_ms(10);
			}
		}


	 	LED(0,OFF);
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	60 e0       	ldi	r22, 0x00	; 0
    38ea:	0e 94 2b 1a 	call	0x3456	; 0x3456 <LED>
	 	LED(1,OFF);
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	60 e0       	ldi	r22, 0x00	; 0
    38f2:	0e 94 2b 1a 	call	0x3456	; 0x3456 <LED>
	 	Buzzer(ON);
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer>

		for(number=10; number>0; number--)
    38fc:	fe 01       	movw	r30, r28
    38fe:	e8 5a       	subi	r30, 0xA8	; 168
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	8a e0       	ldi	r24, 0x0A	; 10
    3904:	80 83       	st	Z, r24
    3906:	29 c1       	rjmp	.+594    	; 0x3b5a <SS_Mode+0x5d4>
		{
			number1=number/10;
    3908:	de 01       	movw	r26, r28
    390a:	a9 5a       	subi	r26, 0xA9	; 169
    390c:	bf 4f       	sbci	r27, 0xFF	; 255
    390e:	fe 01       	movw	r30, r28
    3910:	e8 5a       	subi	r30, 0xA8	; 168
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	80 81       	ld	r24, Z
    3916:	9a e0       	ldi	r25, 0x0A	; 10
    3918:	69 2f       	mov	r22, r25
    391a:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__udivmodqi4>
    391e:	8c 93       	st	X, r24
			number2=number%10;
    3920:	de 01       	movw	r26, r28
    3922:	aa 5a       	subi	r26, 0xAA	; 170
    3924:	bf 4f       	sbci	r27, 0xFF	; 255
    3926:	fe 01       	movw	r30, r28
    3928:	e8 5a       	subi	r30, 0xA8	; 168
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	80 81       	ld	r24, Z
    392e:	9a e0       	ldi	r25, 0x0A	; 10
    3930:	69 2f       	mov	r22, r25
    3932:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__udivmodqi4>
    3936:	89 2f       	mov	r24, r25
    3938:	8c 93       	st	X, r24
			for(number3=0;number3<100;number3++)
    393a:	fe 01       	movw	r30, r28
    393c:	eb 5a       	subi	r30, 0xAB	; 171
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	10 82       	st	Z, r1
    3942:	fb c0       	rjmp	.+502    	; 0x3b3a <SS_Mode+0x5b4>
			{
				/*Set Number 1 on 1st 7-segment*/
				SS_Write(number2, 0);
    3944:	fe 01       	movw	r30, r28
    3946:	ea 5a       	subi	r30, 0xAA	; 170
    3948:	ff 4f       	sbci	r31, 0xFF	; 255
    394a:	80 81       	ld	r24, Z
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <SS_Write>
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	a0 e2       	ldi	r26, 0x20	; 32
    3958:	b1 e4       	ldi	r27, 0x41	; 65
    395a:	8d ab       	std	Y+53, r24	; 0x35
    395c:	9e ab       	std	Y+54, r25	; 0x36
    395e:	af ab       	std	Y+55, r26	; 0x37
    3960:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3962:	6d a9       	ldd	r22, Y+53	; 0x35
    3964:	7e a9       	ldd	r23, Y+54	; 0x36
    3966:	8f a9       	ldd	r24, Y+55	; 0x37
    3968:	98 ad       	ldd	r25, Y+56	; 0x38
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	4a e7       	ldi	r20, 0x7A	; 122
    3970:	53 e4       	ldi	r21, 0x43	; 67
    3972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	89 ab       	std	Y+49, r24	; 0x31
    397c:	9a ab       	std	Y+50, r25	; 0x32
    397e:	ab ab       	std	Y+51, r26	; 0x33
    3980:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3982:	69 a9       	ldd	r22, Y+49	; 0x31
    3984:	7a a9       	ldd	r23, Y+50	; 0x32
    3986:	8b a9       	ldd	r24, Y+51	; 0x33
    3988:	9c a9       	ldd	r25, Y+52	; 0x34
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	40 e8       	ldi	r20, 0x80	; 128
    3990:	5f e3       	ldi	r21, 0x3F	; 63
    3992:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3996:	88 23       	and	r24, r24
    3998:	2c f4       	brge	.+10     	; 0x39a4 <SS_Mode+0x41e>
		__ticks = 1;
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	98 ab       	std	Y+48, r25	; 0x30
    39a0:	8f a7       	std	Y+47, r24	; 0x2f
    39a2:	3f c0       	rjmp	.+126    	; 0x3a22 <SS_Mode+0x49c>
	else if (__tmp > 65535)
    39a4:	69 a9       	ldd	r22, Y+49	; 0x31
    39a6:	7a a9       	ldd	r23, Y+50	; 0x32
    39a8:	8b a9       	ldd	r24, Y+51	; 0x33
    39aa:	9c a9       	ldd	r25, Y+52	; 0x34
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	3f ef       	ldi	r19, 0xFF	; 255
    39b0:	4f e7       	ldi	r20, 0x7F	; 127
    39b2:	57 e4       	ldi	r21, 0x47	; 71
    39b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39b8:	18 16       	cp	r1, r24
    39ba:	4c f5       	brge	.+82     	; 0x3a0e <SS_Mode+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39bc:	6d a9       	ldd	r22, Y+53	; 0x35
    39be:	7e a9       	ldd	r23, Y+54	; 0x36
    39c0:	8f a9       	ldd	r24, Y+55	; 0x37
    39c2:	98 ad       	ldd	r25, Y+56	; 0x38
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	40 e2       	ldi	r20, 0x20	; 32
    39ca:	51 e4       	ldi	r21, 0x41	; 65
    39cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	bc 01       	movw	r22, r24
    39d6:	cd 01       	movw	r24, r26
    39d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39dc:	dc 01       	movw	r26, r24
    39de:	cb 01       	movw	r24, r22
    39e0:	98 ab       	std	Y+48, r25	; 0x30
    39e2:	8f a7       	std	Y+47, r24	; 0x2f
    39e4:	0f c0       	rjmp	.+30     	; 0x3a04 <SS_Mode+0x47e>
    39e6:	89 e1       	ldi	r24, 0x19	; 25
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	9e a7       	std	Y+46, r25	; 0x2e
    39ec:	8d a7       	std	Y+45, r24	; 0x2d
    39ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    39f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    39f2:	01 97       	sbiw	r24, 0x01	; 1
    39f4:	f1 f7       	brne	.-4      	; 0x39f2 <SS_Mode+0x46c>
    39f6:	9e a7       	std	Y+46, r25	; 0x2e
    39f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    39fc:	98 a9       	ldd	r25, Y+48	; 0x30
    39fe:	01 97       	sbiw	r24, 0x01	; 1
    3a00:	98 ab       	std	Y+48, r25	; 0x30
    3a02:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a04:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a06:	98 a9       	ldd	r25, Y+48	; 0x30
    3a08:	00 97       	sbiw	r24, 0x00	; 0
    3a0a:	69 f7       	brne	.-38     	; 0x39e6 <SS_Mode+0x460>
    3a0c:	14 c0       	rjmp	.+40     	; 0x3a36 <SS_Mode+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a0e:	69 a9       	ldd	r22, Y+49	; 0x31
    3a10:	7a a9       	ldd	r23, Y+50	; 0x32
    3a12:	8b a9       	ldd	r24, Y+51	; 0x33
    3a14:	9c a9       	ldd	r25, Y+52	; 0x34
    3a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	98 ab       	std	Y+48, r25	; 0x30
    3a20:	8f a7       	std	Y+47, r24	; 0x2f
    3a22:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a24:	98 a9       	ldd	r25, Y+48	; 0x30
    3a26:	9c a7       	std	Y+44, r25	; 0x2c
    3a28:	8b a7       	std	Y+43, r24	; 0x2b
    3a2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a2e:	01 97       	sbiw	r24, 0x01	; 1
    3a30:	f1 f7       	brne	.-4      	; 0x3a2e <SS_Mode+0x4a8>
    3a32:	9c a7       	std	Y+44, r25	; 0x2c
    3a34:	8b a7       	std	Y+43, r24	; 0x2b

				_delay_ms(10);

				/*Set Number 2 on 2nd 7-segment*/
				SS_Write(number1, 1);
    3a36:	fe 01       	movw	r30, r28
    3a38:	e9 5a       	subi	r30, 0xA9	; 169
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	80 81       	ld	r24, Z
    3a3e:	61 e0       	ldi	r22, 0x01	; 1
    3a40:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <SS_Write>
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	a0 e2       	ldi	r26, 0x20	; 32
    3a4a:	b1 e4       	ldi	r27, 0x41	; 65
    3a4c:	8f a3       	std	Y+39, r24	; 0x27
    3a4e:	98 a7       	std	Y+40, r25	; 0x28
    3a50:	a9 a7       	std	Y+41, r26	; 0x29
    3a52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a54:	6f a1       	ldd	r22, Y+39	; 0x27
    3a56:	78 a5       	ldd	r23, Y+40	; 0x28
    3a58:	89 a5       	ldd	r24, Y+41	; 0x29
    3a5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	4a e7       	ldi	r20, 0x7A	; 122
    3a62:	53 e4       	ldi	r21, 0x43	; 67
    3a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	8b a3       	std	Y+35, r24	; 0x23
    3a6e:	9c a3       	std	Y+36, r25	; 0x24
    3a70:	ad a3       	std	Y+37, r26	; 0x25
    3a72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a74:	6b a1       	ldd	r22, Y+35	; 0x23
    3a76:	7c a1       	ldd	r23, Y+36	; 0x24
    3a78:	8d a1       	ldd	r24, Y+37	; 0x25
    3a7a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	40 e8       	ldi	r20, 0x80	; 128
    3a82:	5f e3       	ldi	r21, 0x3F	; 63
    3a84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a88:	88 23       	and	r24, r24
    3a8a:	2c f4       	brge	.+10     	; 0x3a96 <SS_Mode+0x510>
		__ticks = 1;
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	9a a3       	std	Y+34, r25	; 0x22
    3a92:	89 a3       	std	Y+33, r24	; 0x21
    3a94:	3f c0       	rjmp	.+126    	; 0x3b14 <SS_Mode+0x58e>
	else if (__tmp > 65535)
    3a96:	6b a1       	ldd	r22, Y+35	; 0x23
    3a98:	7c a1       	ldd	r23, Y+36	; 0x24
    3a9a:	8d a1       	ldd	r24, Y+37	; 0x25
    3a9c:	9e a1       	ldd	r25, Y+38	; 0x26
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    3aa0:	3f ef       	ldi	r19, 0xFF	; 255
    3aa2:	4f e7       	ldi	r20, 0x7F	; 127
    3aa4:	57 e4       	ldi	r21, 0x47	; 71
    3aa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aaa:	18 16       	cp	r1, r24
    3aac:	4c f5       	brge	.+82     	; 0x3b00 <SS_Mode+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aae:	6f a1       	ldd	r22, Y+39	; 0x27
    3ab0:	78 a5       	ldd	r23, Y+40	; 0x28
    3ab2:	89 a5       	ldd	r24, Y+41	; 0x29
    3ab4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	40 e2       	ldi	r20, 0x20	; 32
    3abc:	51 e4       	ldi	r21, 0x41	; 65
    3abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	bc 01       	movw	r22, r24
    3ac8:	cd 01       	movw	r24, r26
    3aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	9a a3       	std	Y+34, r25	; 0x22
    3ad4:	89 a3       	std	Y+33, r24	; 0x21
    3ad6:	0f c0       	rjmp	.+30     	; 0x3af6 <SS_Mode+0x570>
    3ad8:	89 e1       	ldi	r24, 0x19	; 25
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	98 a3       	std	Y+32, r25	; 0x20
    3ade:	8f 8f       	std	Y+31, r24	; 0x1f
    3ae0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ae2:	98 a1       	ldd	r25, Y+32	; 0x20
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	f1 f7       	brne	.-4      	; 0x3ae4 <SS_Mode+0x55e>
    3ae8:	98 a3       	std	Y+32, r25	; 0x20
    3aea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aec:	89 a1       	ldd	r24, Y+33	; 0x21
    3aee:	9a a1       	ldd	r25, Y+34	; 0x22
    3af0:	01 97       	sbiw	r24, 0x01	; 1
    3af2:	9a a3       	std	Y+34, r25	; 0x22
    3af4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af6:	89 a1       	ldd	r24, Y+33	; 0x21
    3af8:	9a a1       	ldd	r25, Y+34	; 0x22
    3afa:	00 97       	sbiw	r24, 0x00	; 0
    3afc:	69 f7       	brne	.-38     	; 0x3ad8 <SS_Mode+0x552>
    3afe:	14 c0       	rjmp	.+40     	; 0x3b28 <SS_Mode+0x5a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b00:	6b a1       	ldd	r22, Y+35	; 0x23
    3b02:	7c a1       	ldd	r23, Y+36	; 0x24
    3b04:	8d a1       	ldd	r24, Y+37	; 0x25
    3b06:	9e a1       	ldd	r25, Y+38	; 0x26
    3b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	9a a3       	std	Y+34, r25	; 0x22
    3b12:	89 a3       	std	Y+33, r24	; 0x21
    3b14:	89 a1       	ldd	r24, Y+33	; 0x21
    3b16:	9a a1       	ldd	r25, Y+34	; 0x22
    3b18:	9e 8f       	std	Y+30, r25	; 0x1e
    3b1a:	8d 8f       	std	Y+29, r24	; 0x1d
    3b1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b20:	01 97       	sbiw	r24, 0x01	; 1
    3b22:	f1 f7       	brne	.-4      	; 0x3b20 <SS_Mode+0x59a>
    3b24:	9e 8f       	std	Y+30, r25	; 0x1e
    3b26:	8d 8f       	std	Y+29, r24	; 0x1d

		for(number=10; number>0; number--)
		{
			number1=number/10;
			number2=number%10;
			for(number3=0;number3<100;number3++)
    3b28:	de 01       	movw	r26, r28
    3b2a:	ab 5a       	subi	r26, 0xAB	; 171
    3b2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b2e:	fe 01       	movw	r30, r28
    3b30:	eb 5a       	subi	r30, 0xAB	; 171
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	80 81       	ld	r24, Z
    3b36:	8f 5f       	subi	r24, 0xFF	; 255
    3b38:	8c 93       	st	X, r24
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	eb 5a       	subi	r30, 0xAB	; 171
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	80 81       	ld	r24, Z
    3b42:	84 36       	cpi	r24, 0x64	; 100
    3b44:	08 f4       	brcc	.+2      	; 0x3b48 <SS_Mode+0x5c2>
    3b46:	fe ce       	rjmp	.-516    	; 0x3944 <SS_Mode+0x3be>

	 	LED(0,OFF);
	 	LED(1,OFF);
	 	Buzzer(ON);

		for(number=10; number>0; number--)
    3b48:	de 01       	movw	r26, r28
    3b4a:	a8 5a       	subi	r26, 0xA8	; 168
    3b4c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b4e:	fe 01       	movw	r30, r28
    3b50:	e8 5a       	subi	r30, 0xA8	; 168
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	80 81       	ld	r24, Z
    3b56:	81 50       	subi	r24, 0x01	; 1
    3b58:	8c 93       	st	X, r24
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	e8 5a       	subi	r30, 0xA8	; 168
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	80 81       	ld	r24, Z
    3b62:	88 23       	and	r24, r24
    3b64:	09 f0       	breq	.+2      	; 0x3b68 <SS_Mode+0x5e2>
    3b66:	d0 ce       	rjmp	.-608    	; 0x3908 <SS_Mode+0x382>

				_delay_ms(10);
			}
		}

	 	LED(0,OFF);
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	60 e0       	ldi	r22, 0x00	; 0
    3b6c:	0e 94 2b 1a 	call	0x3456	; 0x3456 <LED>
	 	LED(1,ON);
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	61 e0       	ldi	r22, 0x01	; 1
    3b74:	0e 94 2b 1a 	call	0x3456	; 0x3456 <LED>
	 	Buzzer(OFF);
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer>

		for(number=60; number>0; number--)
    3b7e:	fe 01       	movw	r30, r28
    3b80:	e8 5a       	subi	r30, 0xA8	; 168
    3b82:	ff 4f       	sbci	r31, 0xFF	; 255
    3b84:	8c e3       	ldi	r24, 0x3C	; 60
    3b86:	80 83       	st	Z, r24
    3b88:	29 c1       	rjmp	.+594    	; 0x3ddc <SS_Mode+0x856>
			{
			number1=number/10;
    3b8a:	de 01       	movw	r26, r28
    3b8c:	a9 5a       	subi	r26, 0xA9	; 169
    3b8e:	bf 4f       	sbci	r27, 0xFF	; 255
    3b90:	fe 01       	movw	r30, r28
    3b92:	e8 5a       	subi	r30, 0xA8	; 168
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	80 81       	ld	r24, Z
    3b98:	9a e0       	ldi	r25, 0x0A	; 10
    3b9a:	69 2f       	mov	r22, r25
    3b9c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__udivmodqi4>
    3ba0:	8c 93       	st	X, r24
			number2=number%10;
    3ba2:	de 01       	movw	r26, r28
    3ba4:	aa 5a       	subi	r26, 0xAA	; 170
    3ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ba8:	fe 01       	movw	r30, r28
    3baa:	e8 5a       	subi	r30, 0xA8	; 168
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	80 81       	ld	r24, Z
    3bb0:	9a e0       	ldi	r25, 0x0A	; 10
    3bb2:	69 2f       	mov	r22, r25
    3bb4:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__udivmodqi4>
    3bb8:	89 2f       	mov	r24, r25
    3bba:	8c 93       	st	X, r24
			for(number3=0;number3<100;number3++)
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	eb 5a       	subi	r30, 0xAB	; 171
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	10 82       	st	Z, r1
    3bc4:	fb c0       	rjmp	.+502    	; 0x3dbc <SS_Mode+0x836>
				{
				/*Set Number 1 on 1st 7-segment*/
				SS_Write(number2, 0);
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	ea 5a       	subi	r30, 0xAA	; 170
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	80 81       	ld	r24, Z
    3bce:	60 e0       	ldi	r22, 0x00	; 0
    3bd0:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <SS_Write>
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	a0 e2       	ldi	r26, 0x20	; 32
    3bda:	b1 e4       	ldi	r27, 0x41	; 65
    3bdc:	89 8f       	std	Y+25, r24	; 0x19
    3bde:	9a 8f       	std	Y+26, r25	; 0x1a
    3be0:	ab 8f       	std	Y+27, r26	; 0x1b
    3be2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be4:	69 8d       	ldd	r22, Y+25	; 0x19
    3be6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3be8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	4a e7       	ldi	r20, 0x7A	; 122
    3bf2:	53 e4       	ldi	r21, 0x43	; 67
    3bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	8d 8b       	std	Y+21, r24	; 0x15
    3bfe:	9e 8b       	std	Y+22, r25	; 0x16
    3c00:	af 8b       	std	Y+23, r26	; 0x17
    3c02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c04:	6d 89       	ldd	r22, Y+21	; 0x15
    3c06:	7e 89       	ldd	r23, Y+22	; 0x16
    3c08:	8f 89       	ldd	r24, Y+23	; 0x17
    3c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	40 e8       	ldi	r20, 0x80	; 128
    3c12:	5f e3       	ldi	r21, 0x3F	; 63
    3c14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c18:	88 23       	and	r24, r24
    3c1a:	2c f4       	brge	.+10     	; 0x3c26 <SS_Mode+0x6a0>
		__ticks = 1;
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	9c 8b       	std	Y+20, r25	; 0x14
    3c22:	8b 8b       	std	Y+19, r24	; 0x13
    3c24:	3f c0       	rjmp	.+126    	; 0x3ca4 <SS_Mode+0x71e>
	else if (__tmp > 65535)
    3c26:	6d 89       	ldd	r22, Y+21	; 0x15
    3c28:	7e 89       	ldd	r23, Y+22	; 0x16
    3c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c2e:	20 e0       	ldi	r18, 0x00	; 0
    3c30:	3f ef       	ldi	r19, 0xFF	; 255
    3c32:	4f e7       	ldi	r20, 0x7F	; 127
    3c34:	57 e4       	ldi	r21, 0x47	; 71
    3c36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c3a:	18 16       	cp	r1, r24
    3c3c:	4c f5       	brge	.+82     	; 0x3c90 <SS_Mode+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c3e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	40 e2       	ldi	r20, 0x20	; 32
    3c4c:	51 e4       	ldi	r21, 0x41	; 65
    3c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	bc 01       	movw	r22, r24
    3c58:	cd 01       	movw	r24, r26
    3c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5e:	dc 01       	movw	r26, r24
    3c60:	cb 01       	movw	r24, r22
    3c62:	9c 8b       	std	Y+20, r25	; 0x14
    3c64:	8b 8b       	std	Y+19, r24	; 0x13
    3c66:	0f c0       	rjmp	.+30     	; 0x3c86 <SS_Mode+0x700>
    3c68:	89 e1       	ldi	r24, 0x19	; 25
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	9a 8b       	std	Y+18, r25	; 0x12
    3c6e:	89 8b       	std	Y+17, r24	; 0x11
    3c70:	89 89       	ldd	r24, Y+17	; 0x11
    3c72:	9a 89       	ldd	r25, Y+18	; 0x12
    3c74:	01 97       	sbiw	r24, 0x01	; 1
    3c76:	f1 f7       	brne	.-4      	; 0x3c74 <SS_Mode+0x6ee>
    3c78:	9a 8b       	std	Y+18, r25	; 0x12
    3c7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c80:	01 97       	sbiw	r24, 0x01	; 1
    3c82:	9c 8b       	std	Y+20, r25	; 0x14
    3c84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c86:	8b 89       	ldd	r24, Y+19	; 0x13
    3c88:	9c 89       	ldd	r25, Y+20	; 0x14
    3c8a:	00 97       	sbiw	r24, 0x00	; 0
    3c8c:	69 f7       	brne	.-38     	; 0x3c68 <SS_Mode+0x6e2>
    3c8e:	14 c0       	rjmp	.+40     	; 0x3cb8 <SS_Mode+0x732>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c90:	6d 89       	ldd	r22, Y+21	; 0x15
    3c92:	7e 89       	ldd	r23, Y+22	; 0x16
    3c94:	8f 89       	ldd	r24, Y+23	; 0x17
    3c96:	98 8d       	ldd	r25, Y+24	; 0x18
    3c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	9c 8b       	std	Y+20, r25	; 0x14
    3ca2:	8b 8b       	std	Y+19, r24	; 0x13
    3ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca8:	98 8b       	std	Y+16, r25	; 0x10
    3caa:	8f 87       	std	Y+15, r24	; 0x0f
    3cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cae:	98 89       	ldd	r25, Y+16	; 0x10
    3cb0:	01 97       	sbiw	r24, 0x01	; 1
    3cb2:	f1 f7       	brne	.-4      	; 0x3cb0 <SS_Mode+0x72a>
    3cb4:	98 8b       	std	Y+16, r25	; 0x10
    3cb6:	8f 87       	std	Y+15, r24	; 0x0f

				_delay_ms(10);

				/*Set Number 2 on 2nd 7-segment*/
				SS_Write(number1, 1);
    3cb8:	fe 01       	movw	r30, r28
    3cba:	e9 5a       	subi	r30, 0xA9	; 169
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	80 81       	ld	r24, Z
    3cc0:	61 e0       	ldi	r22, 0x01	; 1
    3cc2:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <SS_Write>
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	a0 e2       	ldi	r26, 0x20	; 32
    3ccc:	b1 e4       	ldi	r27, 0x41	; 65
    3cce:	8b 87       	std	Y+11, r24	; 0x0b
    3cd0:	9c 87       	std	Y+12, r25	; 0x0c
    3cd2:	ad 87       	std	Y+13, r26	; 0x0d
    3cd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	4a e7       	ldi	r20, 0x7A	; 122
    3ce4:	53 e4       	ldi	r21, 0x43	; 67
    3ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	8f 83       	std	Y+7, r24	; 0x07
    3cf0:	98 87       	std	Y+8, r25	; 0x08
    3cf2:	a9 87       	std	Y+9, r26	; 0x09
    3cf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    3cf8:	78 85       	ldd	r23, Y+8	; 0x08
    3cfa:	89 85       	ldd	r24, Y+9	; 0x09
    3cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	40 e8       	ldi	r20, 0x80	; 128
    3d04:	5f e3       	ldi	r21, 0x3F	; 63
    3d06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d0a:	88 23       	and	r24, r24
    3d0c:	2c f4       	brge	.+10     	; 0x3d18 <SS_Mode+0x792>
		__ticks = 1;
    3d0e:	81 e0       	ldi	r24, 0x01	; 1
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	9e 83       	std	Y+6, r25	; 0x06
    3d14:	8d 83       	std	Y+5, r24	; 0x05
    3d16:	3f c0       	rjmp	.+126    	; 0x3d96 <SS_Mode+0x810>
	else if (__tmp > 65535)
    3d18:	6f 81       	ldd	r22, Y+7	; 0x07
    3d1a:	78 85       	ldd	r23, Y+8	; 0x08
    3d1c:	89 85       	ldd	r24, Y+9	; 0x09
    3d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	3f ef       	ldi	r19, 0xFF	; 255
    3d24:	4f e7       	ldi	r20, 0x7F	; 127
    3d26:	57 e4       	ldi	r21, 0x47	; 71
    3d28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d2c:	18 16       	cp	r1, r24
    3d2e:	4c f5       	brge	.+82     	; 0x3d82 <SS_Mode+0x7fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e2       	ldi	r20, 0x20	; 32
    3d3e:	51 e4       	ldi	r21, 0x41	; 65
    3d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	bc 01       	movw	r22, r24
    3d4a:	cd 01       	movw	r24, r26
    3d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	9e 83       	std	Y+6, r25	; 0x06
    3d56:	8d 83       	std	Y+5, r24	; 0x05
    3d58:	0f c0       	rjmp	.+30     	; 0x3d78 <SS_Mode+0x7f2>
    3d5a:	89 e1       	ldi	r24, 0x19	; 25
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	9c 83       	std	Y+4, r25	; 0x04
    3d60:	8b 83       	std	Y+3, r24	; 0x03
    3d62:	8b 81       	ldd	r24, Y+3	; 0x03
    3d64:	9c 81       	ldd	r25, Y+4	; 0x04
    3d66:	01 97       	sbiw	r24, 0x01	; 1
    3d68:	f1 f7       	brne	.-4      	; 0x3d66 <SS_Mode+0x7e0>
    3d6a:	9c 83       	std	Y+4, r25	; 0x04
    3d6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d70:	9e 81       	ldd	r25, Y+6	; 0x06
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	9e 83       	std	Y+6, r25	; 0x06
    3d76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d78:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d7c:	00 97       	sbiw	r24, 0x00	; 0
    3d7e:	69 f7       	brne	.-38     	; 0x3d5a <SS_Mode+0x7d4>
    3d80:	14 c0       	rjmp	.+40     	; 0x3daa <SS_Mode+0x824>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d82:	6f 81       	ldd	r22, Y+7	; 0x07
    3d84:	78 85       	ldd	r23, Y+8	; 0x08
    3d86:	89 85       	ldd	r24, Y+9	; 0x09
    3d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	9e 83       	std	Y+6, r25	; 0x06
    3d94:	8d 83       	std	Y+5, r24	; 0x05
    3d96:	8d 81       	ldd	r24, Y+5	; 0x05
    3d98:	9e 81       	ldd	r25, Y+6	; 0x06
    3d9a:	9a 83       	std	Y+2, r25	; 0x02
    3d9c:	89 83       	std	Y+1, r24	; 0x01
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
    3da0:	9a 81       	ldd	r25, Y+2	; 0x02
    3da2:	01 97       	sbiw	r24, 0x01	; 1
    3da4:	f1 f7       	brne	.-4      	; 0x3da2 <SS_Mode+0x81c>
    3da6:	9a 83       	std	Y+2, r25	; 0x02
    3da8:	89 83       	std	Y+1, r24	; 0x01

		for(number=60; number>0; number--)
			{
			number1=number/10;
			number2=number%10;
			for(number3=0;number3<100;number3++)
    3daa:	de 01       	movw	r26, r28
    3dac:	ab 5a       	subi	r26, 0xAB	; 171
    3dae:	bf 4f       	sbci	r27, 0xFF	; 255
    3db0:	fe 01       	movw	r30, r28
    3db2:	eb 5a       	subi	r30, 0xAB	; 171
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	80 81       	ld	r24, Z
    3db8:	8f 5f       	subi	r24, 0xFF	; 255
    3dba:	8c 93       	st	X, r24
    3dbc:	fe 01       	movw	r30, r28
    3dbe:	eb 5a       	subi	r30, 0xAB	; 171
    3dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc2:	80 81       	ld	r24, Z
    3dc4:	84 36       	cpi	r24, 0x64	; 100
    3dc6:	08 f4       	brcc	.+2      	; 0x3dca <SS_Mode+0x844>
    3dc8:	fe ce       	rjmp	.-516    	; 0x3bc6 <SS_Mode+0x640>

	 	LED(0,OFF);
	 	LED(1,ON);
	 	Buzzer(OFF);

		for(number=60; number>0; number--)
    3dca:	de 01       	movw	r26, r28
    3dcc:	a8 5a       	subi	r26, 0xA8	; 168
    3dce:	bf 4f       	sbci	r27, 0xFF	; 255
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	e8 5a       	subi	r30, 0xA8	; 168
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	80 81       	ld	r24, Z
    3dd8:	81 50       	subi	r24, 0x01	; 1
    3dda:	8c 93       	st	X, r24
    3ddc:	fe 01       	movw	r30, r28
    3dde:	e8 5a       	subi	r30, 0xA8	; 168
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	80 81       	ld	r24, Z
    3de4:	88 23       	and	r24, r24
    3de6:	09 f0       	breq	.+2      	; 0x3dea <SS_Mode+0x864>
    3de8:	d0 ce       	rjmp	.-608    	; 0x3b8a <SS_Mode+0x604>
				}
			}
		break;

 	 }
 }
    3dea:	c7 5a       	subi	r28, 0xA7	; 167
    3dec:	df 4f       	sbci	r29, 0xFF	; 255
    3dee:	0f b6       	in	r0, 0x3f	; 63
    3df0:	f8 94       	cli
    3df2:	de bf       	out	0x3e, r29	; 62
    3df4:	0f be       	out	0x3f, r0	; 63
    3df6:	cd bf       	out	0x3d, r28	; 61
    3df8:	cf 91       	pop	r28
    3dfa:	df 91       	pop	r29
    3dfc:	1f 91       	pop	r17
    3dfe:	0f 91       	pop	r16
    3e00:	08 95       	ret

00003e02 <main>:
#define MODE KeyBad_First_Click



int main()
{
    3e02:	df 93       	push	r29
    3e04:	cf 93       	push	r28
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	60 97       	sbiw	r28, 0x10	; 16
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	f8 94       	cli
    3e10:	de bf       	out	0x3e, r29	; 62
    3e12:	0f be       	out	0x3f, r0	; 63
    3e14:	cd bf       	out	0x3d, r28	; 61
	KeyBad_Init();
    3e16:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <KeyBad_Init>
	SS_Init();
    3e1a:	0e 94 45 1a 	call	0x348a	; 0x348a <SS_Init>
	LCD_Init();
    3e1e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LCD_Init>
	while(1)
	{
/*******************************************************************************************/
/*KeyBoard(1st Pressed)*/
		#if MODE==KeyBad_First_Click
			u8 key,pressed=0;
    3e22:	1f 86       	std	Y+15, r1	; 0x0f
			pressed=KeyBad_Pressed(&key,KeyBad_First_Click);
    3e24:	ce 01       	movw	r24, r28
    3e26:	40 96       	adiw	r24, 0x10	; 16
    3e28:	61 e0       	ldi	r22, 0x01	; 1
    3e2a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <KeyBad_Pressed>
    3e2e:	8f 87       	std	Y+15, r24	; 0x0f
			if(pressed)
    3e30:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e32:	88 23       	and	r24, r24
    3e34:	59 f0       	breq	.+22     	; 0x3e4c <main+0x4a>
			{
				LCD_WriteData(key);
    3e36:	88 89       	ldd	r24, Y+16	; 0x10
    3e38:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
				SS_Write(key-=48,0);
    3e3c:	88 89       	ldd	r24, Y+16	; 0x10
    3e3e:	80 53       	subi	r24, 0x30	; 48
    3e40:	88 8b       	std	Y+16, r24	; 0x10
    3e42:	88 89       	ldd	r24, Y+16	; 0x10
    3e44:	60 e0       	ldi	r22, 0x00	; 0
    3e46:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <SS_Write>
    3e4a:	07 c0       	rjmp	.+14     	; 0x3e5a <main+0x58>
			}
			else
			{
				LCD_WriteData('0');
    3e4c:	80 e3       	ldi	r24, 0x30	; 48
    3e4e:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_WriteData>
				SS_Write(0,0);
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	60 e0       	ldi	r22, 0x00	; 0
    3e56:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <SS_Write>
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	aa e7       	ldi	r26, 0x7A	; 122
    3e60:	b4 e4       	ldi	r27, 0x44	; 68
    3e62:	8b 87       	std	Y+11, r24	; 0x0b
    3e64:	9c 87       	std	Y+12, r25	; 0x0c
    3e66:	ad 87       	std	Y+13, r26	; 0x0d
    3e68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e70:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	4a e7       	ldi	r20, 0x7A	; 122
    3e78:	53 e4       	ldi	r21, 0x43	; 67
    3e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e7e:	dc 01       	movw	r26, r24
    3e80:	cb 01       	movw	r24, r22
    3e82:	8f 83       	std	Y+7, r24	; 0x07
    3e84:	98 87       	std	Y+8, r25	; 0x08
    3e86:	a9 87       	std	Y+9, r26	; 0x09
    3e88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e8c:	78 85       	ldd	r23, Y+8	; 0x08
    3e8e:	89 85       	ldd	r24, Y+9	; 0x09
    3e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e92:	20 e0       	ldi	r18, 0x00	; 0
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	40 e8       	ldi	r20, 0x80	; 128
    3e98:	5f e3       	ldi	r21, 0x3F	; 63
    3e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e9e:	88 23       	and	r24, r24
    3ea0:	2c f4       	brge	.+10     	; 0x3eac <main+0xaa>
		__ticks = 1;
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	9e 83       	std	Y+6, r25	; 0x06
    3ea8:	8d 83       	std	Y+5, r24	; 0x05
    3eaa:	3f c0       	rjmp	.+126    	; 0x3f2a <main+0x128>
	else if (__tmp > 65535)
    3eac:	6f 81       	ldd	r22, Y+7	; 0x07
    3eae:	78 85       	ldd	r23, Y+8	; 0x08
    3eb0:	89 85       	ldd	r24, Y+9	; 0x09
    3eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	3f ef       	ldi	r19, 0xFF	; 255
    3eb8:	4f e7       	ldi	r20, 0x7F	; 127
    3eba:	57 e4       	ldi	r21, 0x47	; 71
    3ebc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ec0:	18 16       	cp	r1, r24
    3ec2:	4c f5       	brge	.+82     	; 0x3f16 <main+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	40 e2       	ldi	r20, 0x20	; 32
    3ed2:	51 e4       	ldi	r21, 0x41	; 65
    3ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	bc 01       	movw	r22, r24
    3ede:	cd 01       	movw	r24, r26
    3ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	9e 83       	std	Y+6, r25	; 0x06
    3eea:	8d 83       	std	Y+5, r24	; 0x05
    3eec:	0f c0       	rjmp	.+30     	; 0x3f0c <main+0x10a>
    3eee:	89 e1       	ldi	r24, 0x19	; 25
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	9c 83       	std	Y+4, r25	; 0x04
    3ef4:	8b 83       	std	Y+3, r24	; 0x03
    3ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    3efa:	01 97       	sbiw	r24, 0x01	; 1
    3efc:	f1 f7       	brne	.-4      	; 0x3efa <main+0xf8>
    3efe:	9c 83       	std	Y+4, r25	; 0x04
    3f00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f02:	8d 81       	ldd	r24, Y+5	; 0x05
    3f04:	9e 81       	ldd	r25, Y+6	; 0x06
    3f06:	01 97       	sbiw	r24, 0x01	; 1
    3f08:	9e 83       	std	Y+6, r25	; 0x06
    3f0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f10:	00 97       	sbiw	r24, 0x00	; 0
    3f12:	69 f7       	brne	.-38     	; 0x3eee <main+0xec>
    3f14:	14 c0       	rjmp	.+40     	; 0x3f3e <main+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f16:	6f 81       	ldd	r22, Y+7	; 0x07
    3f18:	78 85       	ldd	r23, Y+8	; 0x08
    3f1a:	89 85       	ldd	r24, Y+9	; 0x09
    3f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	9e 83       	std	Y+6, r25	; 0x06
    3f28:	8d 83       	std	Y+5, r24	; 0x05
    3f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f2e:	9a 83       	std	Y+2, r25	; 0x02
    3f30:	89 83       	std	Y+1, r24	; 0x01
    3f32:	89 81       	ldd	r24, Y+1	; 0x01
    3f34:	9a 81       	ldd	r25, Y+2	; 0x02
    3f36:	01 97       	sbiw	r24, 0x01	; 1
    3f38:	f1 f7       	brne	.-4      	; 0x3f36 <main+0x134>
    3f3a:	9a 83       	std	Y+2, r25	; 0x02
    3f3c:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(1000);
			LCD_CLear();
    3f3e:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_CLear>
    3f42:	6f cf       	rjmp	.-290    	; 0x3e22 <main+0x20>

00003f44 <__udivmodqi4>:
    3f44:	99 1b       	sub	r25, r25
    3f46:	79 e0       	ldi	r23, 0x09	; 9
    3f48:	04 c0       	rjmp	.+8      	; 0x3f52 <__udivmodqi4_ep>

00003f4a <__udivmodqi4_loop>:
    3f4a:	99 1f       	adc	r25, r25
    3f4c:	96 17       	cp	r25, r22
    3f4e:	08 f0       	brcs	.+2      	; 0x3f52 <__udivmodqi4_ep>
    3f50:	96 1b       	sub	r25, r22

00003f52 <__udivmodqi4_ep>:
    3f52:	88 1f       	adc	r24, r24
    3f54:	7a 95       	dec	r23
    3f56:	c9 f7       	brne	.-14     	; 0x3f4a <__udivmodqi4_loop>
    3f58:	80 95       	com	r24
    3f5a:	08 95       	ret

00003f5c <__prologue_saves__>:
    3f5c:	2f 92       	push	r2
    3f5e:	3f 92       	push	r3
    3f60:	4f 92       	push	r4
    3f62:	5f 92       	push	r5
    3f64:	6f 92       	push	r6
    3f66:	7f 92       	push	r7
    3f68:	8f 92       	push	r8
    3f6a:	9f 92       	push	r9
    3f6c:	af 92       	push	r10
    3f6e:	bf 92       	push	r11
    3f70:	cf 92       	push	r12
    3f72:	df 92       	push	r13
    3f74:	ef 92       	push	r14
    3f76:	ff 92       	push	r15
    3f78:	0f 93       	push	r16
    3f7a:	1f 93       	push	r17
    3f7c:	cf 93       	push	r28
    3f7e:	df 93       	push	r29
    3f80:	cd b7       	in	r28, 0x3d	; 61
    3f82:	de b7       	in	r29, 0x3e	; 62
    3f84:	ca 1b       	sub	r28, r26
    3f86:	db 0b       	sbc	r29, r27
    3f88:	0f b6       	in	r0, 0x3f	; 63
    3f8a:	f8 94       	cli
    3f8c:	de bf       	out	0x3e, r29	; 62
    3f8e:	0f be       	out	0x3f, r0	; 63
    3f90:	cd bf       	out	0x3d, r28	; 61
    3f92:	09 94       	ijmp

00003f94 <__epilogue_restores__>:
    3f94:	2a 88       	ldd	r2, Y+18	; 0x12
    3f96:	39 88       	ldd	r3, Y+17	; 0x11
    3f98:	48 88       	ldd	r4, Y+16	; 0x10
    3f9a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f9c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f9e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fa0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fa2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fa4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fa6:	b9 84       	ldd	r11, Y+9	; 0x09
    3fa8:	c8 84       	ldd	r12, Y+8	; 0x08
    3faa:	df 80       	ldd	r13, Y+7	; 0x07
    3fac:	ee 80       	ldd	r14, Y+6	; 0x06
    3fae:	fd 80       	ldd	r15, Y+5	; 0x05
    3fb0:	0c 81       	ldd	r16, Y+4	; 0x04
    3fb2:	1b 81       	ldd	r17, Y+3	; 0x03
    3fb4:	aa 81       	ldd	r26, Y+2	; 0x02
    3fb6:	b9 81       	ldd	r27, Y+1	; 0x01
    3fb8:	ce 0f       	add	r28, r30
    3fba:	d1 1d       	adc	r29, r1
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	f8 94       	cli
    3fc0:	de bf       	out	0x3e, r29	; 62
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	cd bf       	out	0x3d, r28	; 61
    3fc6:	ed 01       	movw	r28, r26
    3fc8:	08 95       	ret

00003fca <_exit>:
    3fca:	f8 94       	cli

00003fcc <__stop_program>:
    3fcc:	ff cf       	rjmp	.-2      	; 0x3fcc <__stop_program>
