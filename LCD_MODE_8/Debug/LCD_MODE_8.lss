
LCD_MODE_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00003a5e  00003af2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080008c  0080008c  00003b1e  2**0
                  ALLOC
  3 .stab         00002e08  00000000  00000000  00003b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c3b  00000000  00000000  00006928  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007563  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000076a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007813  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000945c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a347  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b0f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b254  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b4e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bcaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <main>
      8a:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 06 1d 	jmp	0x3a0c	; 0x3a0c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:

#include "DIO.h"
#include "Utils.h"

void DIO_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	Clr_Nibble_High(DDRA);
     b4e:	aa e3       	ldi	r26, 0x3A	; 58
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 70       	andi	r24, 0x0F	; 15
     b5a:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRA);
     b5c:	aa e3       	ldi	r26, 0x3A	; 58
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e3       	ldi	r30, 0x3A	; 58
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 7f       	andi	r24, 0xF0	; 240
     b68:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRB);
     b6a:	a7 e3       	ldi	r26, 0x37	; 55
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e3       	ldi	r30, 0x37	; 55
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 70       	andi	r24, 0x0F	; 15
     b76:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRB);
     b78:	a7 e3       	ldi	r26, 0x37	; 55
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e7 e3       	ldi	r30, 0x37	; 55
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 7f       	andi	r24, 0xF0	; 240
     b84:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRC);
     b86:	a4 e3       	ldi	r26, 0x34	; 52
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e4 e3       	ldi	r30, 0x34	; 52
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 70       	andi	r24, 0x0F	; 15
     b92:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRC);
     b94:	a4 e3       	ldi	r26, 0x34	; 52
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e4 e3       	ldi	r30, 0x34	; 52
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 7f       	andi	r24, 0xF0	; 240
     ba0:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRD);
     ba2:	a1 e3       	ldi	r26, 0x31	; 49
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e1 e3       	ldi	r30, 0x31	; 49
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 70       	andi	r24, 0x0F	; 15
     bae:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRD);
     bb0:	a1 e3       	ldi	r26, 0x31	; 49
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e1 e3       	ldi	r30, 0x31	; 49
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 7f       	andi	r24, 0xF0	; 240
     bbc:	8c 93       	st	X, r24
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <DIO_u8GetVal>:

u8 DIO_u8GetVal(u8 u8Port, u8 u8Pin)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <DIO_u8GetVal+0x6>
     bca:	00 d0       	rcall	.+0      	; 0xbcc <DIO_u8GetVal+0x8>
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	8a 83       	std	Y+2, r24	; 0x02
     bd4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Return;
	switch (u8Port)
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	3d 83       	std	Y+5, r19	; 0x05
     bde:	2c 83       	std	Y+4, r18	; 0x04
     be0:	4c 81       	ldd	r20, Y+4	; 0x04
     be2:	5d 81       	ldd	r21, Y+5	; 0x05
     be4:	41 30       	cpi	r20, 0x01	; 1
     be6:	51 05       	cpc	r21, r1
     be8:	b1 f1       	breq	.+108    	; 0xc56 <DIO_u8GetVal+0x92>
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
     bec:	9d 81       	ldd	r25, Y+5	; 0x05
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	91 05       	cpc	r25, r1
     bf2:	34 f4       	brge	.+12     	; 0xc00 <DIO_u8GetVal+0x3c>
     bf4:	2c 81       	ldd	r18, Y+4	; 0x04
     bf6:	3d 81       	ldd	r19, Y+5	; 0x05
     bf8:	21 15       	cp	r18, r1
     bfa:	31 05       	cpc	r19, r1
     bfc:	71 f0       	breq	.+28     	; 0xc1a <DIO_u8GetVal+0x56>
     bfe:	84 c0       	rjmp	.+264    	; 0xd08 <DIO_u8GetVal+0x144>
     c00:	4c 81       	ldd	r20, Y+4	; 0x04
     c02:	5d 81       	ldd	r21, Y+5	; 0x05
     c04:	42 30       	cpi	r20, 0x02	; 2
     c06:	51 05       	cpc	r21, r1
     c08:	09 f4       	brne	.+2      	; 0xc0c <DIO_u8GetVal+0x48>
     c0a:	43 c0       	rjmp	.+134    	; 0xc92 <DIO_u8GetVal+0xce>
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	9d 81       	ldd	r25, Y+5	; 0x05
     c10:	83 30       	cpi	r24, 0x03	; 3
     c12:	91 05       	cpc	r25, r1
     c14:	09 f4       	brne	.+2      	; 0xc18 <DIO_u8GetVal+0x54>
     c16:	5b c0       	rjmp	.+182    	; 0xcce <DIO_u8GetVal+0x10a>
     c18:	77 c0       	rjmp	.+238    	; 0xd08 <DIO_u8GetVal+0x144>
	{
	case 0:
		Local_u8Return=Get_Bit(PINA,u8Pin);
     c1a:	e9 e3       	ldi	r30, 0x39	; 57
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	48 2f       	mov	r20, r24
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <DIO_u8GetVal+0x70>
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	2a 95       	dec	r18
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <DIO_u8GetVal+0x6c>
     c38:	9a 01       	movw	r18, r20
     c3a:	28 23       	and	r18, r24
     c3c:	39 23       	and	r19, r25
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a9 01       	movw	r20, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_u8GetVal+0x88>
     c48:	55 95       	asr	r21
     c4a:	47 95       	ror	r20
     c4c:	8a 95       	dec	r24
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_u8GetVal+0x84>
     c50:	ca 01       	movw	r24, r20
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	59 c0       	rjmp	.+178    	; 0xd08 <DIO_u8GetVal+0x144>
		break;
	case 1:
		Local_u8Return=Get_Bit(PINB,u8Pin);
     c56:	e6 e3       	ldi	r30, 0x36	; 54
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	48 2f       	mov	r20, r24
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <DIO_u8GetVal+0xac>
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	2a 95       	dec	r18
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <DIO_u8GetVal+0xa8>
     c74:	9a 01       	movw	r18, r20
     c76:	28 23       	and	r18, r24
     c78:	39 23       	and	r19, r25
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a9 01       	movw	r20, r18
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <DIO_u8GetVal+0xc4>
     c84:	55 95       	asr	r21
     c86:	47 95       	ror	r20
     c88:	8a 95       	dec	r24
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <DIO_u8GetVal+0xc0>
     c8c:	ca 01       	movw	r24, r20
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	3b c0       	rjmp	.+118    	; 0xd08 <DIO_u8GetVal+0x144>
		break;
	case 2:
		Local_u8Return=Get_Bit(PINC,u8Pin);
     c92:	e3 e3       	ldi	r30, 0x33	; 51
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_u8GetVal+0xe8>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	2a 95       	dec	r18
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_u8GetVal+0xe4>
     cb0:	9a 01       	movw	r18, r20
     cb2:	28 23       	and	r18, r24
     cb4:	39 23       	and	r19, r25
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	88 2f       	mov	r24, r24
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a9 01       	movw	r20, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <DIO_u8GetVal+0x100>
     cc0:	55 95       	asr	r21
     cc2:	47 95       	ror	r20
     cc4:	8a 95       	dec	r24
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <DIO_u8GetVal+0xfc>
     cc8:	ca 01       	movw	r24, r20
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	1d c0       	rjmp	.+58     	; 0xd08 <DIO_u8GetVal+0x144>
		break;
	case 3:
		Local_u8Return=Get_Bit(PIND,u8Pin);
     cce:	e0 e3       	ldi	r30, 0x30	; 48
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_u8GetVal+0x124>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	2a 95       	dec	r18
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_u8GetVal+0x120>
     cec:	9a 01       	movw	r18, r20
     cee:	28 23       	and	r18, r24
     cf0:	39 23       	and	r19, r25
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a9 01       	movw	r20, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_u8GetVal+0x13c>
     cfc:	55 95       	asr	r21
     cfe:	47 95       	ror	r20
     d00:	8a 95       	dec	r24
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_u8GetVal+0x138>
     d04:	ca 01       	movw	r24, r20
     d06:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Return;
     d08:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <DIO_voidWriteVal>:

void DIO_voidWriteVal(u8 u8Port, u8 u8Pin, u8 u8Val)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <DIO_voidWriteVal+0x6>
     d20:	00 d0       	rcall	.+0      	; 0xd22 <DIO_voidWriteVal+0x8>
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	6a 83       	std	Y+2, r22	; 0x02
     d2c:	4b 83       	std	Y+3, r20	; 0x03
	switch (u8Port)
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	3d 83       	std	Y+5, r19	; 0x05
     d36:	2c 83       	std	Y+4, r18	; 0x04
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	9d 81       	ldd	r25, Y+5	; 0x05
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	91 05       	cpc	r25, r1
     d40:	09 f4       	brne	.+2      	; 0xd44 <DIO_voidWriteVal+0x2a>
     d42:	46 c0       	rjmp	.+140    	; 0xdd0 <DIO_voidWriteVal+0xb6>
     d44:	2c 81       	ldd	r18, Y+4	; 0x04
     d46:	3d 81       	ldd	r19, Y+5	; 0x05
     d48:	22 30       	cpi	r18, 0x02	; 2
     d4a:	31 05       	cpc	r19, r1
     d4c:	2c f4       	brge	.+10     	; 0xd58 <DIO_voidWriteVal+0x3e>
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	9d 81       	ldd	r25, Y+5	; 0x05
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	71 f0       	breq	.+28     	; 0xd72 <DIO_voidWriteVal+0x58>
     d56:	c7 c0       	rjmp	.+398    	; 0xee6 <DIO_voidWriteVal+0x1cc>
     d58:	2c 81       	ldd	r18, Y+4	; 0x04
     d5a:	3d 81       	ldd	r19, Y+5	; 0x05
     d5c:	22 30       	cpi	r18, 0x02	; 2
     d5e:	31 05       	cpc	r19, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <DIO_voidWriteVal+0x4a>
     d62:	65 c0       	rjmp	.+202    	; 0xe2e <DIO_voidWriteVal+0x114>
     d64:	8c 81       	ldd	r24, Y+4	; 0x04
     d66:	9d 81       	ldd	r25, Y+5	; 0x05
     d68:	83 30       	cpi	r24, 0x03	; 3
     d6a:	91 05       	cpc	r25, r1
     d6c:	09 f4       	brne	.+2      	; 0xd70 <DIO_voidWriteVal+0x56>
     d6e:	8e c0       	rjmp	.+284    	; 0xe8c <DIO_voidWriteVal+0x172>
     d70:	ba c0       	rjmp	.+372    	; 0xee6 <DIO_voidWriteVal+0x1cc>
		{
		case 0:
			Assign_Bit(PORTA,u8Pin,u8Val);
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	88 23       	and	r24, r24
     d76:	a1 f4       	brne	.+40     	; 0xda0 <DIO_voidWriteVal+0x86>
     d78:	ab e3       	ldi	r26, 0x3B	; 59
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	eb e3       	ldi	r30, 0x3B	; 59
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_voidWriteVal+0x7c>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_voidWriteVal+0x78>
     d9a:	80 95       	com	r24
     d9c:	84 23       	and	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	09 f0       	breq	.+2      	; 0xda8 <DIO_voidWriteVal+0x8e>
     da6:	9f c0       	rjmp	.+318    	; 0xee6 <DIO_voidWriteVal+0x1cc>
     da8:	ab e3       	ldi	r26, 0x3B	; 59
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e3       	ldi	r30, 0x3B	; 59
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_voidWriteVal+0xac>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_voidWriteVal+0xa8>
     dca:	84 2b       	or	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	8b c0       	rjmp	.+278    	; 0xee6 <DIO_voidWriteVal+0x1cc>
			break;
		case 1:
			Assign_Bit(PORTB,u8Pin,u8Val);
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	88 23       	and	r24, r24
     dd4:	a1 f4       	brne	.+40     	; 0xdfe <DIO_voidWriteVal+0xe4>
     dd6:	a8 e3       	ldi	r26, 0x38	; 56
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e3       	ldi	r30, 0x38	; 56
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_voidWriteVal+0xda>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_voidWriteVal+0xd6>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	09 f0       	breq	.+2      	; 0xe06 <DIO_voidWriteVal+0xec>
     e04:	70 c0       	rjmp	.+224    	; 0xee6 <DIO_voidWriteVal+0x1cc>
     e06:	a8 e3       	ldi	r26, 0x38	; 56
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e8 e3       	ldi	r30, 0x38	; 56
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_voidWriteVal+0x10a>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_voidWriteVal+0x106>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	5c c0       	rjmp	.+184    	; 0xee6 <DIO_voidWriteVal+0x1cc>
			break;
		case 2:
			Assign_Bit(PORTC,u8Pin,u8Val);
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	88 23       	and	r24, r24
     e32:	a1 f4       	brne	.+40     	; 0xe5c <DIO_voidWriteVal+0x142>
     e34:	a5 e3       	ldi	r26, 0x35	; 53
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e5 e3       	ldi	r30, 0x35	; 53
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_voidWriteVal+0x138>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_voidWriteVal+0x134>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	09 f0       	breq	.+2      	; 0xe64 <DIO_voidWriteVal+0x14a>
     e62:	41 c0       	rjmp	.+130    	; 0xee6 <DIO_voidWriteVal+0x1cc>
     e64:	a5 e3       	ldi	r26, 0x35	; 53
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e5 e3       	ldi	r30, 0x35	; 53
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_voidWriteVal+0x168>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_voidWriteVal+0x164>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2d c0       	rjmp	.+90     	; 0xee6 <DIO_voidWriteVal+0x1cc>
			break;
		case 3:
			Assign_Bit(PORTD,u8Pin,u8Val);
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	88 23       	and	r24, r24
     e90:	a1 f4       	brne	.+40     	; 0xeba <DIO_voidWriteVal+0x1a0>
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_voidWriteVal+0x196>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_voidWriteVal+0x192>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	99 f4       	brne	.+38     	; 0xee6 <DIO_voidWriteVal+0x1cc>
     ec0:	a2 e3       	ldi	r26, 0x32	; 50
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e2 e3       	ldi	r30, 0x32	; 50
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_voidWriteVal+0x1c4>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_voidWriteVal+0x1c0>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
		}

}
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <DIO_voidSetDir>:

void DIO_voidSetDir(u8 u8Port, u8 u8Pin, u8 u8Dir)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <DIO_voidSetDir+0x6>
     efc:	00 d0       	rcall	.+0      	; 0xefe <DIO_voidSetDir+0x8>
     efe:	0f 92       	push	r0
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	6a 83       	std	Y+2, r22	; 0x02
     f08:	4b 83       	std	Y+3, r20	; 0x03
	switch (u8Port)
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	3d 83       	std	Y+5, r19	; 0x05
     f12:	2c 83       	std	Y+4, r18	; 0x04
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	9d 81       	ldd	r25, Y+5	; 0x05
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	91 05       	cpc	r25, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <DIO_voidSetDir+0x2a>
     f1e:	46 c0       	rjmp	.+140    	; 0xfac <DIO_voidSetDir+0xb6>
     f20:	2c 81       	ldd	r18, Y+4	; 0x04
     f22:	3d 81       	ldd	r19, Y+5	; 0x05
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	2c f4       	brge	.+10     	; 0xf34 <DIO_voidSetDir+0x3e>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	71 f0       	breq	.+28     	; 0xf4e <DIO_voidSetDir+0x58>
     f32:	c7 c0       	rjmp	.+398    	; 0x10c2 <DIO_voidSetDir+0x1cc>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <DIO_voidSetDir+0x4a>
     f3e:	65 c0       	rjmp	.+202    	; 0x100a <DIO_voidSetDir+0x114>
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	91 05       	cpc	r25, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <DIO_voidSetDir+0x56>
     f4a:	8e c0       	rjmp	.+284    	; 0x1068 <DIO_voidSetDir+0x172>
     f4c:	ba c0       	rjmp	.+372    	; 0x10c2 <DIO_voidSetDir+0x1cc>
		{
		case 0:
			Assign_Bit(DDRA,u8Pin,u8Dir);
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	88 23       	and	r24, r24
     f52:	a1 f4       	brne	.+40     	; 0xf7c <DIO_voidSetDir+0x86>
     f54:	aa e3       	ldi	r26, 0x3A	; 58
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ea e3       	ldi	r30, 0x3A	; 58
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_voidSetDir+0x7c>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_voidSetDir+0x78>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	09 f0       	breq	.+2      	; 0xf84 <DIO_voidSetDir+0x8e>
     f82:	9f c0       	rjmp	.+318    	; 0x10c2 <DIO_voidSetDir+0x1cc>
     f84:	aa e3       	ldi	r26, 0x3A	; 58
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	ea e3       	ldi	r30, 0x3A	; 58
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_voidSetDir+0xac>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_voidSetDir+0xa8>
     fa6:	84 2b       	or	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	8b c0       	rjmp	.+278    	; 0x10c2 <DIO_voidSetDir+0x1cc>
			break;
		case 1:
			Assign_Bit(DDRB,u8Pin,u8Dir);
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	88 23       	and	r24, r24
     fb0:	a1 f4       	brne	.+40     	; 0xfda <DIO_voidSetDir+0xe4>
     fb2:	a7 e3       	ldi	r26, 0x37	; 55
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e7 e3       	ldi	r30, 0x37	; 55
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_voidSetDir+0xda>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_voidSetDir+0xd6>
     fd4:	80 95       	com	r24
     fd6:	84 23       	and	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	09 f0       	breq	.+2      	; 0xfe2 <DIO_voidSetDir+0xec>
     fe0:	70 c0       	rjmp	.+224    	; 0x10c2 <DIO_voidSetDir+0x1cc>
     fe2:	a7 e3       	ldi	r26, 0x37	; 55
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e7 e3       	ldi	r30, 0x37	; 55
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_voidSetDir+0x10a>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_voidSetDir+0x106>
    1004:	84 2b       	or	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	5c c0       	rjmp	.+184    	; 0x10c2 <DIO_voidSetDir+0x1cc>
			break;
		case 2:
			Assign_Bit(DDRC,u8Pin,u8Dir);
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	88 23       	and	r24, r24
    100e:	a1 f4       	brne	.+40     	; 0x1038 <DIO_voidSetDir+0x142>
    1010:	a4 e3       	ldi	r26, 0x34	; 52
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e4 e3       	ldi	r30, 0x34	; 52
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_voidSetDir+0x138>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_voidSetDir+0x134>
    1032:	80 95       	com	r24
    1034:	84 23       	and	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	09 f0       	breq	.+2      	; 0x1040 <DIO_voidSetDir+0x14a>
    103e:	41 c0       	rjmp	.+130    	; 0x10c2 <DIO_voidSetDir+0x1cc>
    1040:	a4 e3       	ldi	r26, 0x34	; 52
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e4 e3       	ldi	r30, 0x34	; 52
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_voidSetDir+0x168>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_voidSetDir+0x164>
    1062:	84 2b       	or	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	2d c0       	rjmp	.+90     	; 0x10c2 <DIO_voidSetDir+0x1cc>
			break;
		case 3:
			Assign_Bit(DDRD,u8Pin,u8Dir);
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	88 23       	and	r24, r24
    106c:	a1 f4       	brne	.+40     	; 0x1096 <DIO_voidSetDir+0x1a0>
    106e:	a1 e3       	ldi	r26, 0x31	; 49
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e1 e3       	ldi	r30, 0x31	; 49
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_voidSetDir+0x196>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_voidSetDir+0x192>
    1090:	80 95       	com	r24
    1092:	84 23       	and	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	99 f4       	brne	.+38     	; 0x10c2 <DIO_voidSetDir+0x1cc>
    109c:	a1 e3       	ldi	r26, 0x31	; 49
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e1 e3       	ldi	r30, 0x31	; 49
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_voidSetDir+0x1c4>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_voidSetDir+0x1c0>
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
		}

}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <LCD_Init>:
static u8 charact_number=0;
static u8 current_charact=0;
static u8 English_Char=0;

void LCD_Init(void)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	aa 97       	sbiw	r28, 0x2a	; 42
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetDir(PortD,Pin0,Output); /*RS(DDRD,0) output*/
    10e6:	83 e0       	ldi	r24, 0x03	; 3
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	41 e0       	ldi	r20, 0x01	; 1
    10ec:	0e 94 7b 07 	call	0xef6	; 0xef6 <DIO_voidSetDir>
	DIO_voidSetDir(PortD,Pin1,Output); /*E(DDRD,1) output*/
    10f0:	83 e0       	ldi	r24, 0x03	; 3
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	41 e0       	ldi	r20, 0x01	; 1
    10f6:	0e 94 7b 07 	call	0xef6	; 0xef6 <DIO_voidSetDir>
	/*LCD Data Bus as output */
	DIO_voidSetDir(PortC,Pin0,Output);
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	41 e0       	ldi	r20, 0x01	; 1
    1100:	0e 94 7b 07 	call	0xef6	; 0xef6 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin1,Output);
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	41 e0       	ldi	r20, 0x01	; 1
    110a:	0e 94 7b 07 	call	0xef6	; 0xef6 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin2,Output);
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	62 e0       	ldi	r22, 0x02	; 2
    1112:	41 e0       	ldi	r20, 0x01	; 1
    1114:	0e 94 7b 07 	call	0xef6	; 0xef6 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin3,Output);
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	63 e0       	ldi	r22, 0x03	; 3
    111c:	41 e0       	ldi	r20, 0x01	; 1
    111e:	0e 94 7b 07 	call	0xef6	; 0xef6 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin4,Output);
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	64 e0       	ldi	r22, 0x04	; 4
    1126:	41 e0       	ldi	r20, 0x01	; 1
    1128:	0e 94 7b 07 	call	0xef6	; 0xef6 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin5,Output);
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	65 e0       	ldi	r22, 0x05	; 5
    1130:	41 e0       	ldi	r20, 0x01	; 1
    1132:	0e 94 7b 07 	call	0xef6	; 0xef6 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin6,Output);
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	66 e0       	ldi	r22, 0x06	; 6
    113a:	41 e0       	ldi	r20, 0x01	; 1
    113c:	0e 94 7b 07 	call	0xef6	; 0xef6 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin7,Output);
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	67 e0       	ldi	r22, 0x07	; 7
    1144:	41 e0       	ldi	r20, 0x01	; 1
    1146:	0e 94 7b 07 	call	0xef6	; 0xef6 <DIO_voidSetDir>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a8 e4       	ldi	r26, 0x48	; 72
    1150:	b2 e4       	ldi	r27, 0x42	; 66
    1152:	8f a3       	std	Y+39, r24	; 0x27
    1154:	98 a7       	std	Y+40, r25	; 0x28
    1156:	a9 a7       	std	Y+41, r26	; 0x29
    1158:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115a:	6f a1       	ldd	r22, Y+39	; 0x27
    115c:	78 a5       	ldd	r23, Y+40	; 0x28
    115e:	89 a5       	ldd	r24, Y+41	; 0x29
    1160:	9a a5       	ldd	r25, Y+42	; 0x2a
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	4a e7       	ldi	r20, 0x7A	; 122
    1168:	53 e4       	ldi	r21, 0x43	; 67
    116a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	8b a3       	std	Y+35, r24	; 0x23
    1174:	9c a3       	std	Y+36, r25	; 0x24
    1176:	ad a3       	std	Y+37, r26	; 0x25
    1178:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    117a:	6b a1       	ldd	r22, Y+35	; 0x23
    117c:	7c a1       	ldd	r23, Y+36	; 0x24
    117e:	8d a1       	ldd	r24, Y+37	; 0x25
    1180:	9e a1       	ldd	r25, Y+38	; 0x26
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    118e:	88 23       	and	r24, r24
    1190:	2c f4       	brge	.+10     	; 0x119c <LCD_Init+0xca>
		__ticks = 1;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9a a3       	std	Y+34, r25	; 0x22
    1198:	89 a3       	std	Y+33, r24	; 0x21
    119a:	3f c0       	rjmp	.+126    	; 0x121a <LCD_Init+0x148>
	else if (__tmp > 65535)
    119c:	6b a1       	ldd	r22, Y+35	; 0x23
    119e:	7c a1       	ldd	r23, Y+36	; 0x24
    11a0:	8d a1       	ldd	r24, Y+37	; 0x25
    11a2:	9e a1       	ldd	r25, Y+38	; 0x26
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	3f ef       	ldi	r19, 0xFF	; 255
    11a8:	4f e7       	ldi	r20, 0x7F	; 127
    11aa:	57 e4       	ldi	r21, 0x47	; 71
    11ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11b0:	18 16       	cp	r1, r24
    11b2:	4c f5       	brge	.+82     	; 0x1206 <LCD_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b4:	6f a1       	ldd	r22, Y+39	; 0x27
    11b6:	78 a5       	ldd	r23, Y+40	; 0x28
    11b8:	89 a5       	ldd	r24, Y+41	; 0x29
    11ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e2       	ldi	r20, 0x20	; 32
    11c2:	51 e4       	ldi	r21, 0x41	; 65
    11c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	9a a3       	std	Y+34, r25	; 0x22
    11da:	89 a3       	std	Y+33, r24	; 0x21
    11dc:	0f c0       	rjmp	.+30     	; 0x11fc <LCD_Init+0x12a>
    11de:	89 e1       	ldi	r24, 0x19	; 25
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	98 a3       	std	Y+32, r25	; 0x20
    11e4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11e8:	98 a1       	ldd	r25, Y+32	; 0x20
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <LCD_Init+0x118>
    11ee:	98 a3       	std	Y+32, r25	; 0x20
    11f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f2:	89 a1       	ldd	r24, Y+33	; 0x21
    11f4:	9a a1       	ldd	r25, Y+34	; 0x22
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	9a a3       	std	Y+34, r25	; 0x22
    11fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fc:	89 a1       	ldd	r24, Y+33	; 0x21
    11fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	69 f7       	brne	.-38     	; 0x11de <LCD_Init+0x10c>
    1204:	14 c0       	rjmp	.+40     	; 0x122e <LCD_Init+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1206:	6b a1       	ldd	r22, Y+35	; 0x23
    1208:	7c a1       	ldd	r23, Y+36	; 0x24
    120a:	8d a1       	ldd	r24, Y+37	; 0x25
    120c:	9e a1       	ldd	r25, Y+38	; 0x26
    120e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	9a a3       	std	Y+34, r25	; 0x22
    1218:	89 a3       	std	Y+33, r24	; 0x21
    121a:	89 a1       	ldd	r24, Y+33	; 0x21
    121c:	9a a1       	ldd	r25, Y+34	; 0x22
    121e:	9e 8f       	std	Y+30, r25	; 0x1e
    1220:	8d 8f       	std	Y+29, r24	; 0x1d
    1222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1224:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <LCD_Init+0x154>
    122a:	9e 8f       	std	Y+30, r25	; 0x1e
    122c:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(50);
	/*LCD_WriteCommand(0x30); for 1 line*/
	LCD_WriteCommand(0x38); /*for 2 lines*/
    122e:	88 e3       	ldi	r24, 0x38	; 56
    1230:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	a0 e2       	ldi	r26, 0x20	; 32
    123a:	b1 e4       	ldi	r27, 0x41	; 65
    123c:	89 8f       	std	Y+25, r24	; 0x19
    123e:	9a 8f       	std	Y+26, r25	; 0x1a
    1240:	ab 8f       	std	Y+27, r26	; 0x1b
    1242:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1244:	69 8d       	ldd	r22, Y+25	; 0x19
    1246:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    124a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	4a e7       	ldi	r20, 0x7A	; 122
    1252:	53 e4       	ldi	r21, 0x43	; 67
    1254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	8d 8b       	std	Y+21, r24	; 0x15
    125e:	9e 8b       	std	Y+22, r25	; 0x16
    1260:	af 8b       	std	Y+23, r26	; 0x17
    1262:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1264:	6d 89       	ldd	r22, Y+21	; 0x15
    1266:	7e 89       	ldd	r23, Y+22	; 0x16
    1268:	8f 89       	ldd	r24, Y+23	; 0x17
    126a:	98 8d       	ldd	r25, Y+24	; 0x18
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1278:	88 23       	and	r24, r24
    127a:	2c f4       	brge	.+10     	; 0x1286 <LCD_Init+0x1b4>
		__ticks = 1;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	9c 8b       	std	Y+20, r25	; 0x14
    1282:	8b 8b       	std	Y+19, r24	; 0x13
    1284:	3f c0       	rjmp	.+126    	; 0x1304 <LCD_Init+0x232>
	else if (__tmp > 65535)
    1286:	6d 89       	ldd	r22, Y+21	; 0x15
    1288:	7e 89       	ldd	r23, Y+22	; 0x16
    128a:	8f 89       	ldd	r24, Y+23	; 0x17
    128c:	98 8d       	ldd	r25, Y+24	; 0x18
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	3f ef       	ldi	r19, 0xFF	; 255
    1292:	4f e7       	ldi	r20, 0x7F	; 127
    1294:	57 e4       	ldi	r21, 0x47	; 71
    1296:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    129a:	18 16       	cp	r1, r24
    129c:	4c f5       	brge	.+82     	; 0x12f0 <LCD_Init+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129e:	69 8d       	ldd	r22, Y+25	; 0x19
    12a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e2       	ldi	r20, 0x20	; 32
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9c 8b       	std	Y+20, r25	; 0x14
    12c4:	8b 8b       	std	Y+19, r24	; 0x13
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <LCD_Init+0x214>
    12c8:	89 e1       	ldi	r24, 0x19	; 25
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9a 8b       	std	Y+18, r25	; 0x12
    12ce:	89 8b       	std	Y+17, r24	; 0x11
    12d0:	89 89       	ldd	r24, Y+17	; 0x11
    12d2:	9a 89       	ldd	r25, Y+18	; 0x12
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <LCD_Init+0x202>
    12d8:	9a 8b       	std	Y+18, r25	; 0x12
    12da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12dc:	8b 89       	ldd	r24, Y+19	; 0x13
    12de:	9c 89       	ldd	r25, Y+20	; 0x14
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9c 8b       	std	Y+20, r25	; 0x14
    12e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	8b 89       	ldd	r24, Y+19	; 0x13
    12e8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	69 f7       	brne	.-38     	; 0x12c8 <LCD_Init+0x1f6>
    12ee:	14 c0       	rjmp	.+40     	; 0x1318 <LCD_Init+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f0:	6d 89       	ldd	r22, Y+21	; 0x15
    12f2:	7e 89       	ldd	r23, Y+22	; 0x16
    12f4:	8f 89       	ldd	r24, Y+23	; 0x17
    12f6:	98 8d       	ldd	r25, Y+24	; 0x18
    12f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	9c 8b       	std	Y+20, r25	; 0x14
    1302:	8b 8b       	std	Y+19, r24	; 0x13
    1304:	8b 89       	ldd	r24, Y+19	; 0x13
    1306:	9c 89       	ldd	r25, Y+20	; 0x14
    1308:	98 8b       	std	Y+16, r25	; 0x10
    130a:	8f 87       	std	Y+15, r24	; 0x0f
    130c:	8f 85       	ldd	r24, Y+15	; 0x0f
    130e:	98 89       	ldd	r25, Y+16	; 0x10
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <LCD_Init+0x23e>
    1314:	98 8b       	std	Y+16, r25	; 0x10
    1316:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_WriteCommand(0x0c);
    1318:	8c e0       	ldi	r24, 0x0C	; 12
    131a:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a0 e2       	ldi	r26, 0x20	; 32
    1324:	b1 e4       	ldi	r27, 0x41	; 65
    1326:	8b 87       	std	Y+11, r24	; 0x0b
    1328:	9c 87       	std	Y+12, r25	; 0x0c
    132a:	ad 87       	std	Y+13, r26	; 0x0d
    132c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1330:	7c 85       	ldd	r23, Y+12	; 0x0c
    1332:	8d 85       	ldd	r24, Y+13	; 0x0d
    1334:	9e 85       	ldd	r25, Y+14	; 0x0e
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	4a e7       	ldi	r20, 0x7A	; 122
    133c:	53 e4       	ldi	r21, 0x43	; 67
    133e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	8f 83       	std	Y+7, r24	; 0x07
    1348:	98 87       	std	Y+8, r25	; 0x08
    134a:	a9 87       	std	Y+9, r26	; 0x09
    134c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    134e:	6f 81       	ldd	r22, Y+7	; 0x07
    1350:	78 85       	ldd	r23, Y+8	; 0x08
    1352:	89 85       	ldd	r24, Y+9	; 0x09
    1354:	9a 85       	ldd	r25, Y+10	; 0x0a
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e8       	ldi	r20, 0x80	; 128
    135c:	5f e3       	ldi	r21, 0x3F	; 63
    135e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1362:	88 23       	and	r24, r24
    1364:	2c f4       	brge	.+10     	; 0x1370 <LCD_Init+0x29e>
		__ticks = 1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9e 83       	std	Y+6, r25	; 0x06
    136c:	8d 83       	std	Y+5, r24	; 0x05
    136e:	3f c0       	rjmp	.+126    	; 0x13ee <LCD_Init+0x31c>
	else if (__tmp > 65535)
    1370:	6f 81       	ldd	r22, Y+7	; 0x07
    1372:	78 85       	ldd	r23, Y+8	; 0x08
    1374:	89 85       	ldd	r24, Y+9	; 0x09
    1376:	9a 85       	ldd	r25, Y+10	; 0x0a
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	3f ef       	ldi	r19, 0xFF	; 255
    137c:	4f e7       	ldi	r20, 0x7F	; 127
    137e:	57 e4       	ldi	r21, 0x47	; 71
    1380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1384:	18 16       	cp	r1, r24
    1386:	4c f5       	brge	.+82     	; 0x13da <LCD_Init+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1388:	6b 85       	ldd	r22, Y+11	; 0x0b
    138a:	7c 85       	ldd	r23, Y+12	; 0x0c
    138c:	8d 85       	ldd	r24, Y+13	; 0x0d
    138e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e2       	ldi	r20, 0x20	; 32
    1396:	51 e4       	ldi	r21, 0x41	; 65
    1398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	9e 83       	std	Y+6, r25	; 0x06
    13ae:	8d 83       	std	Y+5, r24	; 0x05
    13b0:	0f c0       	rjmp	.+30     	; 0x13d0 <LCD_Init+0x2fe>
    13b2:	89 e1       	ldi	r24, 0x19	; 25
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	9c 83       	std	Y+4, r25	; 0x04
    13b8:	8b 83       	std	Y+3, r24	; 0x03
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <LCD_Init+0x2ec>
    13c2:	9c 83       	std	Y+4, r25	; 0x04
    13c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	69 f7       	brne	.-38     	; 0x13b2 <LCD_Init+0x2e0>
    13d8:	14 c0       	rjmp	.+40     	; 0x1402 <LCD_Init+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13da:	6f 81       	ldd	r22, Y+7	; 0x07
    13dc:	78 85       	ldd	r23, Y+8	; 0x08
    13de:	89 85       	ldd	r24, Y+9	; 0x09
    13e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	9a 83       	std	Y+2, r25	; 0x02
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <LCD_Init+0x328>
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	LCD_CLear();
    1402:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_CLear>
	LCD_Set_Entry_Mode(1);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LCD_Set_Entry_Mode>

}
    140c:	aa 96       	adiw	r28, 0x2a	; 42
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <LCD_WriteCommand>:

void LCD_WriteCommand(u8 com)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	2f 97       	sbiw	r28, 0x0f	; 15
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidWriteVal(PortD,Pin0,Zero_Volt); /*RS=0*/
    1434:	83 e0       	ldi	r24, 0x03	; 3
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_High(com)));
    143e:	a5 e3       	ldi	r26, 0x35	; 53
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e5 e3       	ldi	r30, 0x35	; 53
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	28 2f       	mov	r18, r24
    144a:	2f 70       	andi	r18, 0x0F	; 15
    144c:	8f 85       	ldd	r24, Y+15	; 0x0f
    144e:	82 95       	swap	r24
    1450:	8f 70       	andi	r24, 0x0F	; 15
    1452:	88 2f       	mov	r24, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	90 70       	andi	r25, 0x00	; 0
    1458:	82 95       	swap	r24
    145a:	92 95       	swap	r25
    145c:	90 7f       	andi	r25, 0xF0	; 240
    145e:	98 27       	eor	r25, r24
    1460:	80 7f       	andi	r24, 0xF0	; 240
    1462:	98 27       	eor	r25, r24
    1464:	82 2b       	or	r24, r18
    1466:	8c 93       	st	X, r24
	Assign_Nibble_Low(PORTC,(Get_Nibble_Low(com)));
    1468:	a5 e3       	ldi	r26, 0x35	; 53
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e3       	ldi	r30, 0x35	; 53
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	98 2f       	mov	r25, r24
    1474:	90 7f       	andi	r25, 0xF0	; 240
    1476:	8f 85       	ldd	r24, Y+15	; 0x0f
    1478:	8f 70       	andi	r24, 0x0F	; 15
    147a:	89 2b       	or	r24, r25
    147c:	8c 93       	st	X, r24

	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	61 e0       	ldi	r22, 0x01	; 1
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_voidWriteVal>
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a0 e0       	ldi	r26, 0x00	; 0
    148e:	b0 e4       	ldi	r27, 0x40	; 64
    1490:	8b 87       	std	Y+11, r24	; 0x0b
    1492:	9c 87       	std	Y+12, r25	; 0x0c
    1494:	ad 87       	std	Y+13, r26	; 0x0d
    1496:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1498:	6b 85       	ldd	r22, Y+11	; 0x0b
    149a:	7c 85       	ldd	r23, Y+12	; 0x0c
    149c:	8d 85       	ldd	r24, Y+13	; 0x0d
    149e:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	4a e7       	ldi	r20, 0x7A	; 122
    14a6:	53 e4       	ldi	r21, 0x43	; 67
    14a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	8f 83       	std	Y+7, r24	; 0x07
    14b2:	98 87       	std	Y+8, r25	; 0x08
    14b4:	a9 87       	std	Y+9, r26	; 0x09
    14b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14b8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ba:	78 85       	ldd	r23, Y+8	; 0x08
    14bc:	89 85       	ldd	r24, Y+9	; 0x09
    14be:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e8       	ldi	r20, 0x80	; 128
    14c6:	5f e3       	ldi	r21, 0x3F	; 63
    14c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14cc:	88 23       	and	r24, r24
    14ce:	2c f4       	brge	.+10     	; 0x14da <LCD_WriteCommand+0xbc>
		__ticks = 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	9e 83       	std	Y+6, r25	; 0x06
    14d6:	8d 83       	std	Y+5, r24	; 0x05
    14d8:	3f c0       	rjmp	.+126    	; 0x1558 <LCD_WriteCommand+0x13a>
	else if (__tmp > 65535)
    14da:	6f 81       	ldd	r22, Y+7	; 0x07
    14dc:	78 85       	ldd	r23, Y+8	; 0x08
    14de:	89 85       	ldd	r24, Y+9	; 0x09
    14e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	3f ef       	ldi	r19, 0xFF	; 255
    14e6:	4f e7       	ldi	r20, 0x7F	; 127
    14e8:	57 e4       	ldi	r21, 0x47	; 71
    14ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ee:	18 16       	cp	r1, r24
    14f0:	4c f5       	brge	.+82     	; 0x1544 <LCD_WriteCommand+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e2       	ldi	r20, 0x20	; 32
    1500:	51 e4       	ldi	r21, 0x41	; 65
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	8d 83       	std	Y+5, r24	; 0x05
    151a:	0f c0       	rjmp	.+30     	; 0x153a <LCD_WriteCommand+0x11c>
    151c:	89 e1       	ldi	r24, 0x19	; 25
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9c 83       	std	Y+4, r25	; 0x04
    1522:	8b 83       	std	Y+3, r24	; 0x03
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <LCD_WriteCommand+0x10a>
    152c:	9c 83       	std	Y+4, r25	; 0x04
    152e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	9e 83       	std	Y+6, r25	; 0x06
    1538:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	69 f7       	brne	.-38     	; 0x151c <LCD_WriteCommand+0xfe>
    1542:	14 c0       	rjmp	.+40     	; 0x156c <LCD_WriteCommand+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1544:	6f 81       	ldd	r22, Y+7	; 0x07
    1546:	78 85       	ldd	r23, Y+8	; 0x08
    1548:	89 85       	ldd	r24, Y+9	; 0x09
    154a:	9a 85       	ldd	r25, Y+10	; 0x0a
    154c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	8d 83       	std	Y+5, r24	; 0x05
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	9e 81       	ldd	r25, Y+6	; 0x06
    155c:	9a 83       	std	Y+2, r25	; 0x02
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	9a 81       	ldd	r25, Y+2	; 0x02
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <LCD_WriteCommand+0x146>
    1568:	9a 83       	std	Y+2, r25	; 0x02
    156a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_voidWriteVal>

}
    1576:	2f 96       	adiw	r28, 0x0f	; 15
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <LCD_WriteData>:

void LCD_WriteData(u8 com)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	2f 97       	sbiw	r28, 0x0f	; 15
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidWriteVal(PortD,Pin0,Five_Volt); /*RS*/
    159e:	83 e0       	ldi	r24, 0x03	; 3
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_High(com)));
    15a8:	a5 e3       	ldi	r26, 0x35	; 53
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e5 e3       	ldi	r30, 0x35	; 53
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	28 2f       	mov	r18, r24
    15b4:	2f 70       	andi	r18, 0x0F	; 15
    15b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b8:	82 95       	swap	r24
    15ba:	8f 70       	andi	r24, 0x0F	; 15
    15bc:	88 2f       	mov	r24, r24
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	90 70       	andi	r25, 0x00	; 0
    15c2:	82 95       	swap	r24
    15c4:	92 95       	swap	r25
    15c6:	90 7f       	andi	r25, 0xF0	; 240
    15c8:	98 27       	eor	r25, r24
    15ca:	80 7f       	andi	r24, 0xF0	; 240
    15cc:	98 27       	eor	r25, r24
    15ce:	82 2b       	or	r24, r18
    15d0:	8c 93       	st	X, r24
	Assign_Nibble_Low(PORTC,(Get_Nibble_Low(com)));
    15d2:	a5 e3       	ldi	r26, 0x35	; 53
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e5 e3       	ldi	r30, 0x35	; 53
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	98 2f       	mov	r25, r24
    15de:	90 7f       	andi	r25, 0xF0	; 240
    15e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e2:	8f 70       	andi	r24, 0x0F	; 15
    15e4:	89 2b       	or	r24, r25
    15e6:	8c 93       	st	X, r24

	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	61 e0       	ldi	r22, 0x01	; 1
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_voidWriteVal>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a0 ea       	ldi	r26, 0xA0	; 160
    15f8:	b1 e4       	ldi	r27, 0x41	; 65
    15fa:	8b 87       	std	Y+11, r24	; 0x0b
    15fc:	9c 87       	std	Y+12, r25	; 0x0c
    15fe:	ad 87       	std	Y+13, r26	; 0x0d
    1600:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1602:	6b 85       	ldd	r22, Y+11	; 0x0b
    1604:	7c 85       	ldd	r23, Y+12	; 0x0c
    1606:	8d 85       	ldd	r24, Y+13	; 0x0d
    1608:	9e 85       	ldd	r25, Y+14	; 0x0e
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	4a e7       	ldi	r20, 0x7A	; 122
    1610:	53 e4       	ldi	r21, 0x43	; 67
    1612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	8f 83       	std	Y+7, r24	; 0x07
    161c:	98 87       	std	Y+8, r25	; 0x08
    161e:	a9 87       	std	Y+9, r26	; 0x09
    1620:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1622:	6f 81       	ldd	r22, Y+7	; 0x07
    1624:	78 85       	ldd	r23, Y+8	; 0x08
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e8       	ldi	r20, 0x80	; 128
    1630:	5f e3       	ldi	r21, 0x3F	; 63
    1632:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1636:	88 23       	and	r24, r24
    1638:	2c f4       	brge	.+10     	; 0x1644 <LCD_WriteData+0xbc>
		__ticks = 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9e 83       	std	Y+6, r25	; 0x06
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	3f c0       	rjmp	.+126    	; 0x16c2 <LCD_WriteData+0x13a>
	else if (__tmp > 65535)
    1644:	6f 81       	ldd	r22, Y+7	; 0x07
    1646:	78 85       	ldd	r23, Y+8	; 0x08
    1648:	89 85       	ldd	r24, Y+9	; 0x09
    164a:	9a 85       	ldd	r25, Y+10	; 0x0a
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	3f ef       	ldi	r19, 0xFF	; 255
    1650:	4f e7       	ldi	r20, 0x7F	; 127
    1652:	57 e4       	ldi	r21, 0x47	; 71
    1654:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1658:	18 16       	cp	r1, r24
    165a:	4c f5       	brge	.+82     	; 0x16ae <LCD_WriteData+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165c:	6b 85       	ldd	r22, Y+11	; 0x0b
    165e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1660:	8d 85       	ldd	r24, Y+13	; 0x0d
    1662:	9e 85       	ldd	r25, Y+14	; 0x0e
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9e 83       	std	Y+6, r25	; 0x06
    1682:	8d 83       	std	Y+5, r24	; 0x05
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <LCD_WriteData+0x11c>
    1686:	89 e1       	ldi	r24, 0x19	; 25
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9c 83       	std	Y+4, r25	; 0x04
    168c:	8b 83       	std	Y+3, r24	; 0x03
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <LCD_WriteData+0x10a>
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	69 f7       	brne	.-38     	; 0x1686 <LCD_WriteData+0xfe>
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <LCD_WriteData+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ae:	6f 81       	ldd	r22, Y+7	; 0x07
    16b0:	78 85       	ldd	r23, Y+8	; 0x08
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <LCD_WriteData+0x146>
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    16d6:	83 e0       	ldi	r24, 0x03	; 3
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_voidWriteVal>

	English_Char++;
    16e0:	80 91 8e 00 	lds	r24, 0x008E
    16e4:	8f 5f       	subi	r24, 0xFF	; 255
    16e6:	80 93 8e 00 	sts	0x008E, r24

}
    16ea:	2f 96       	adiw	r28, 0x0f	; 15
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <LCD_CLear>:

void LCD_CLear()
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	2e 97       	sbiw	r28, 0x0e	; 14
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x01);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a0 ea       	ldi	r26, 0xA0	; 160
    171c:	b1 e4       	ldi	r27, 0x41	; 65
    171e:	8b 87       	std	Y+11, r24	; 0x0b
    1720:	9c 87       	std	Y+12, r25	; 0x0c
    1722:	ad 87       	std	Y+13, r26	; 0x0d
    1724:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1726:	6b 85       	ldd	r22, Y+11	; 0x0b
    1728:	7c 85       	ldd	r23, Y+12	; 0x0c
    172a:	8d 85       	ldd	r24, Y+13	; 0x0d
    172c:	9e 85       	ldd	r25, Y+14	; 0x0e
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	4a e7       	ldi	r20, 0x7A	; 122
    1734:	53 e4       	ldi	r21, 0x43	; 67
    1736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	8f 83       	std	Y+7, r24	; 0x07
    1740:	98 87       	std	Y+8, r25	; 0x08
    1742:	a9 87       	std	Y+9, r26	; 0x09
    1744:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1746:	6f 81       	ldd	r22, Y+7	; 0x07
    1748:	78 85       	ldd	r23, Y+8	; 0x08
    174a:	89 85       	ldd	r24, Y+9	; 0x09
    174c:	9a 85       	ldd	r25, Y+10	; 0x0a
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e8       	ldi	r20, 0x80	; 128
    1754:	5f e3       	ldi	r21, 0x3F	; 63
    1756:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    175a:	88 23       	and	r24, r24
    175c:	2c f4       	brge	.+10     	; 0x1768 <LCD_CLear+0x6c>
		__ticks = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
    1766:	3f c0       	rjmp	.+126    	; 0x17e6 <LCD_CLear+0xea>
	else if (__tmp > 65535)
    1768:	6f 81       	ldd	r22, Y+7	; 0x07
    176a:	78 85       	ldd	r23, Y+8	; 0x08
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	57 e4       	ldi	r21, 0x47	; 71
    1778:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    177c:	18 16       	cp	r1, r24
    177e:	4c f5       	brge	.+82     	; 0x17d2 <LCD_CLear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1780:	6b 85       	ldd	r22, Y+11	; 0x0b
    1782:	7c 85       	ldd	r23, Y+12	; 0x0c
    1784:	8d 85       	ldd	r24, Y+13	; 0x0d
    1786:	9e 85       	ldd	r25, Y+14	; 0x0e
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e2       	ldi	r20, 0x20	; 32
    178e:	51 e4       	ldi	r21, 0x41	; 65
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	0f c0       	rjmp	.+30     	; 0x17c8 <LCD_CLear+0xcc>
    17aa:	89 e1       	ldi	r24, 0x19	; 25
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9c 83       	std	Y+4, r25	; 0x04
    17b0:	8b 83       	std	Y+3, r24	; 0x03
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <LCD_CLear+0xba>
    17ba:	9c 83       	std	Y+4, r25	; 0x04
    17bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	9e 81       	ldd	r25, Y+6	; 0x06
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	69 f7       	brne	.-38     	; 0x17aa <LCD_CLear+0xae>
    17d0:	14 c0       	rjmp	.+40     	; 0x17fa <LCD_CLear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d2:	6f 81       	ldd	r22, Y+7	; 0x07
    17d4:	78 85       	ldd	r23, Y+8	; 0x08
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	9e 83       	std	Y+6, r25	; 0x06
    17e4:	8d 83       	std	Y+5, r24	; 0x05
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <LCD_CLear+0xf6>
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	charact_number=0;
    17fa:	10 92 8c 00 	sts	0x008C, r1
}
    17fe:	2e 96       	adiw	r28, 0x0e	; 14
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <LCD_GoTo>:

void LCD_GoTo(u8 x, u8 y)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <LCD_GoTo+0x6>
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	6a 83       	std	Y+2, r22	; 0x02
	if(y)
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	88 23       	and	r24, r24
    1822:	29 f0       	breq	.+10     	; 0x182e <LCD_GoTo+0x1e>
		English_Char=4*16+x;
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	80 5c       	subi	r24, 0xC0	; 192
    1828:	80 93 8e 00 	sts	0x008E, r24
    182c:	03 c0       	rjmp	.+6      	; 0x1834 <LCD_GoTo+0x24>
	else
		English_Char=x;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	80 93 8e 00 	sts	0x008E, r24

	LCD_Set_DD_Add(English_Char);
    1834:	80 91 8e 00 	lds	r24, 0x008E
    1838:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_Set_DD_Add>

}
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <LCD_WrtireString>:


u8 LCD_WrtireString(u8* str)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <LCD_WrtireString+0x6>
    184c:	00 d0       	rcall	.+0      	; 0x184e <LCD_WrtireString+0x8>
    184e:	0f 92       	push	r0
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	9c 83       	std	Y+4, r25	; 0x04
    1856:	8b 83       	std	Y+3, r24	; 0x03
	u8 count=0;
    1858:	1a 82       	std	Y+2, r1	; 0x02
	u8 size=0;
    185a:	19 82       	std	Y+1, r1	; 0x01
    185c:	06 c0       	rjmp	.+12     	; 0x186a <LCD_WrtireString+0x24>

	while( (!((*(str+count))=='\0')) && size<=16)
	{
		count++;
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	8a 83       	std	Y+2, r24	; 0x02
		size++;
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	8f 5f       	subi	r24, 0xFF	; 255
    1868:	89 83       	std	Y+1, r24	; 0x01
u8 LCD_WrtireString(u8* str)
{
	u8 count=0;
	u8 size=0;

	while( (!((*(str+count))=='\0')) && size<=16)
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	fc 01       	movw	r30, r24
    1876:	e2 0f       	add	r30, r18
    1878:	f3 1f       	adc	r31, r19
    187a:	80 81       	ld	r24, Z
    187c:	88 23       	and	r24, r24
    187e:	19 f0       	breq	.+6      	; 0x1886 <LCD_WrtireString+0x40>
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	81 31       	cpi	r24, 0x11	; 17
    1884:	60 f3       	brcs	.-40     	; 0x185e <LCD_WrtireString+0x18>
	{
		count++;
		size++;
	}

	if(size<=16)
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	81 31       	cpi	r24, 0x11	; 17
    188a:	b8 f4       	brcc	.+46     	; 0x18ba <LCD_WrtireString+0x74>
	{
		for(count=0;count<size;count++)
    188c:	1a 82       	std	Y+2, r1	; 0x02
    188e:	0e c0       	rjmp	.+28     	; 0x18ac <LCD_WrtireString+0x66>
			LCD_WriteData(*(str+count));
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	fc 01       	movw	r30, r24
    189c:	e2 0f       	add	r30, r18
    189e:	f3 1f       	adc	r31, r19
    18a0:	80 81       	ld	r24, Z
    18a2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
		size++;
	}

	if(size<=16)
	{
		for(count=0;count<size;count++)
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	8f 5f       	subi	r24, 0xFF	; 255
    18aa:	8a 83       	std	Y+2, r24	; 0x02
    18ac:	9a 81       	ldd	r25, Y+2	; 0x02
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	98 17       	cp	r25, r24
    18b2:	70 f3       	brcs	.-36     	; 0x1890 <LCD_WrtireString+0x4a>
			LCD_WriteData(*(str+count));
		return 1;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <LCD_WrtireString+0x76>
	}
	else
		return 0;
    18ba:	1d 82       	std	Y+5, r1	; 0x05
    18bc:	8d 81       	ldd	r24, Y+5	; 0x05

}
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <LCD_Set_CG_Add>:


void LCD_Set_CG_Add(u8 add)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	2f 97       	sbiw	r28, 0x0f	; 15
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_WriteCommand(add);
    18e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e6:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a0 e2       	ldi	r26, 0x20	; 32
    18f0:	b1 e4       	ldi	r27, 0x41	; 65
    18f2:	8b 87       	std	Y+11, r24	; 0x0b
    18f4:	9c 87       	std	Y+12, r25	; 0x0c
    18f6:	ad 87       	std	Y+13, r26	; 0x0d
    18f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1900:	9e 85       	ldd	r25, Y+14	; 0x0e
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a e7       	ldi	r20, 0x7A	; 122
    1908:	53 e4       	ldi	r21, 0x43	; 67
    190a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	8f 83       	std	Y+7, r24	; 0x07
    1914:	98 87       	std	Y+8, r25	; 0x08
    1916:	a9 87       	std	Y+9, r26	; 0x09
    1918:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    191a:	6f 81       	ldd	r22, Y+7	; 0x07
    191c:	78 85       	ldd	r23, Y+8	; 0x08
    191e:	89 85       	ldd	r24, Y+9	; 0x09
    1920:	9a 85       	ldd	r25, Y+10	; 0x0a
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    192e:	88 23       	and	r24, r24
    1930:	2c f4       	brge	.+10     	; 0x193c <LCD_Set_CG_Add+0x6e>
		__ticks = 1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9e 83       	std	Y+6, r25	; 0x06
    1938:	8d 83       	std	Y+5, r24	; 0x05
    193a:	3f c0       	rjmp	.+126    	; 0x19ba <LCD_Set_CG_Add+0xec>
	else if (__tmp > 65535)
    193c:	6f 81       	ldd	r22, Y+7	; 0x07
    193e:	78 85       	ldd	r23, Y+8	; 0x08
    1940:	89 85       	ldd	r24, Y+9	; 0x09
    1942:	9a 85       	ldd	r25, Y+10	; 0x0a
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	3f ef       	ldi	r19, 0xFF	; 255
    1948:	4f e7       	ldi	r20, 0x7F	; 127
    194a:	57 e4       	ldi	r21, 0x47	; 71
    194c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1950:	18 16       	cp	r1, r24
    1952:	4c f5       	brge	.+82     	; 0x19a6 <LCD_Set_CG_Add+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1954:	6b 85       	ldd	r22, Y+11	; 0x0b
    1956:	7c 85       	ldd	r23, Y+12	; 0x0c
    1958:	8d 85       	ldd	r24, Y+13	; 0x0d
    195a:	9e 85       	ldd	r25, Y+14	; 0x0e
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9e 83       	std	Y+6, r25	; 0x06
    197a:	8d 83       	std	Y+5, r24	; 0x05
    197c:	0f c0       	rjmp	.+30     	; 0x199c <LCD_Set_CG_Add+0xce>
    197e:	89 e1       	ldi	r24, 0x19	; 25
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9c 83       	std	Y+4, r25	; 0x04
    1984:	8b 83       	std	Y+3, r24	; 0x03
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <LCD_Set_CG_Add+0xbc>
    198e:	9c 83       	std	Y+4, r25	; 0x04
    1990:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	9e 81       	ldd	r25, Y+6	; 0x06
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	9e 83       	std	Y+6, r25	; 0x06
    199a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	69 f7       	brne	.-38     	; 0x197e <LCD_Set_CG_Add+0xb0>
    19a4:	14 c0       	rjmp	.+40     	; 0x19ce <LCD_Set_CG_Add+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a6:	6f 81       	ldd	r22, Y+7	; 0x07
    19a8:	78 85       	ldd	r23, Y+8	; 0x08
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCD_Set_CG_Add+0xf8>
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    19ce:	2f 96       	adiw	r28, 0x0f	; 15
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <LCD_Shift>:

void LCD_Shift()
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	2e 97       	sbiw	r28, 0x0e	; 14
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x1c);
    19f4:	8c e1       	ldi	r24, 0x1C	; 28
    19f6:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	a0 e2       	ldi	r26, 0x20	; 32
    1a00:	b1 e4       	ldi	r27, 0x41	; 65
    1a02:	8b 87       	std	Y+11, r24	; 0x0b
    1a04:	9c 87       	std	Y+12, r25	; 0x0c
    1a06:	ad 87       	std	Y+13, r26	; 0x0d
    1a08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4a e7       	ldi	r20, 0x7A	; 122
    1a18:	53 e4       	ldi	r21, 0x43	; 67
    1a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	8f 83       	std	Y+7, r24	; 0x07
    1a24:	98 87       	std	Y+8, r25	; 0x08
    1a26:	a9 87       	std	Y+9, r26	; 0x09
    1a28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e8       	ldi	r20, 0x80	; 128
    1a38:	5f e3       	ldi	r21, 0x3F	; 63
    1a3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <LCD_Shift+0x6c>
		__ticks = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9e 83       	std	Y+6, r25	; 0x06
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	3f c0       	rjmp	.+126    	; 0x1aca <LCD_Shift+0xea>
	else if (__tmp > 65535)
    1a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4e:	78 85       	ldd	r23, Y+8	; 0x08
    1a50:	89 85       	ldd	r24, Y+9	; 0x09
    1a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	3f ef       	ldi	r19, 0xFF	; 255
    1a58:	4f e7       	ldi	r20, 0x7F	; 127
    1a5a:	57 e4       	ldi	r21, 0x47	; 71
    1a5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a60:	18 16       	cp	r1, r24
    1a62:	4c f5       	brge	.+82     	; 0x1ab6 <LCD_Shift+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e2       	ldi	r20, 0x20	; 32
    1a72:	51 e4       	ldi	r21, 0x41	; 65
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <LCD_Shift+0xcc>
    1a8e:	89 e1       	ldi	r24, 0x19	; 25
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9c 83       	std	Y+4, r25	; 0x04
    1a94:	8b 83       	std	Y+3, r24	; 0x03
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <LCD_Shift+0xba>
    1a9e:	9c 83       	std	Y+4, r25	; 0x04
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	69 f7       	brne	.-38     	; 0x1a8e <LCD_Shift+0xae>
    1ab4:	14 c0       	rjmp	.+40     	; 0x1ade <LCD_Shift+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab8:	78 85       	ldd	r23, Y+8	; 0x08
    1aba:	89 85       	ldd	r24, Y+9	; 0x09
    1abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <LCD_Shift+0xf6>
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1ade:	2e 96       	adiw	r28, 0x0e	; 14
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <LCD_Set_Entry_Mode>:
void LCD_Set_Entry_Mode(u8 I_D)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	2f 97       	sbiw	r28, 0x0f	; 15
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	8f 87       	std	Y+15, r24	; 0x0f
	if(I_D)
    1b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b08:	88 23       	and	r24, r24
    1b0a:	21 f0       	breq	.+8      	; 0x1b14 <LCD_Set_Entry_Mode+0x24>
		LCD_WriteCommand(0x06);
    1b0c:	86 e0       	ldi	r24, 0x06	; 6
    1b0e:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <LCD_Set_Entry_Mode+0x2a>
	else
		LCD_WriteCommand(0x07);
    1b14:	87 e0       	ldi	r24, 0x07	; 7
    1b16:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	a0 e2       	ldi	r26, 0x20	; 32
    1b20:	b1 e4       	ldi	r27, 0x41	; 65
    1b22:	8b 87       	std	Y+11, r24	; 0x0b
    1b24:	9c 87       	std	Y+12, r25	; 0x0c
    1b26:	ad 87       	std	Y+13, r26	; 0x0d
    1b28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a e7       	ldi	r20, 0x7A	; 122
    1b38:	53 e4       	ldi	r21, 0x43	; 67
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8f 83       	std	Y+7, r24	; 0x07
    1b44:	98 87       	std	Y+8, r25	; 0x08
    1b46:	a9 87       	std	Y+9, r26	; 0x09
    1b48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e8       	ldi	r20, 0x80	; 128
    1b58:	5f e3       	ldi	r21, 0x3F	; 63
    1b5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b5e:	88 23       	and	r24, r24
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <LCD_Set_Entry_Mode+0x7c>
		__ticks = 1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	3f c0       	rjmp	.+126    	; 0x1bea <LCD_Set_Entry_Mode+0xfa>
	else if (__tmp > 65535)
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	4c f5       	brge	.+82     	; 0x1bd6 <LCD_Set_Entry_Mode+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	51 e4       	ldi	r21, 0x41	; 65
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9e 83       	std	Y+6, r25	; 0x06
    1baa:	8d 83       	std	Y+5, r24	; 0x05
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <LCD_Set_Entry_Mode+0xdc>
    1bae:	89 e1       	ldi	r24, 0x19	; 25
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9c 83       	std	Y+4, r25	; 0x04
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_Set_Entry_Mode+0xca>
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	69 f7       	brne	.-38     	; 0x1bae <LCD_Set_Entry_Mode+0xbe>
    1bd4:	14 c0       	rjmp	.+40     	; 0x1bfe <LCD_Set_Entry_Mode+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <LCD_Set_Entry_Mode+0x106>
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1bfe:	2f 96       	adiw	r28, 0x0f	; 15
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	08 95       	ret

00001c10 <LCD_Set_DD_Add>:

void LCD_Set_DD_Add(u8 add)
{
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	2f 97       	sbiw	r28, 0x0f	; 15
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_WriteCommand(add);
    1c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c28:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e2       	ldi	r26, 0x20	; 32
    1c32:	b1 e4       	ldi	r27, 0x41	; 65
    1c34:	8b 87       	std	Y+11, r24	; 0x0b
    1c36:	9c 87       	std	Y+12, r25	; 0x0c
    1c38:	ad 87       	std	Y+13, r26	; 0x0d
    1c3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	4a e7       	ldi	r20, 0x7A	; 122
    1c4a:	53 e4       	ldi	r21, 0x43	; 67
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	8f 83       	std	Y+7, r24	; 0x07
    1c56:	98 87       	std	Y+8, r25	; 0x08
    1c58:	a9 87       	std	Y+9, r26	; 0x09
    1c5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5e:	78 85       	ldd	r23, Y+8	; 0x08
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e8       	ldi	r20, 0x80	; 128
    1c6a:	5f e3       	ldi	r21, 0x3F	; 63
    1c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c70:	88 23       	and	r24, r24
    1c72:	2c f4       	brge	.+10     	; 0x1c7e <LCD_Set_DD_Add+0x6e>
		__ticks = 1;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	3f c0       	rjmp	.+126    	; 0x1cfc <LCD_Set_DD_Add+0xec>
	else if (__tmp > 65535)
    1c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c80:	78 85       	ldd	r23, Y+8	; 0x08
    1c82:	89 85       	ldd	r24, Y+9	; 0x09
    1c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	57 e4       	ldi	r21, 0x47	; 71
    1c8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c92:	18 16       	cp	r1, r24
    1c94:	4c f5       	brge	.+82     	; 0x1ce8 <LCD_Set_DD_Add+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e2       	ldi	r20, 0x20	; 32
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	0f c0       	rjmp	.+30     	; 0x1cde <LCD_Set_DD_Add+0xce>
    1cc0:	89 e1       	ldi	r24, 0x19	; 25
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9c 83       	std	Y+4, r25	; 0x04
    1cc6:	8b 83       	std	Y+3, r24	; 0x03
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_Set_DD_Add+0xbc>
    1cd0:	9c 83       	std	Y+4, r25	; 0x04
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	9e 83       	std	Y+6, r25	; 0x06
    1cdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	69 f7       	brne	.-38     	; 0x1cc0 <LCD_Set_DD_Add+0xb0>
    1ce6:	14 c0       	rjmp	.+40     	; 0x1d10 <LCD_Set_DD_Add+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cea:	78 85       	ldd	r23, Y+8	; 0x08
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	9a 83       	std	Y+2, r25	; 0x02
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	9a 81       	ldd	r25, Y+2	; 0x02
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_Set_DD_Add+0xf8>
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1d10:	2f 96       	adiw	r28, 0x0f	; 15
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <LCD_Arabic_Dict>:


void LCD_Arabic_Dict(u8 charact)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <LCD_Arabic_Dict+0x6>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <LCD_Arabic_Dict+0x8>
    1d2a:	0f 92       	push	r0
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	8b 83       	std	Y+3, r24	; 0x03
	LCD_Set_CG_Add(0x40+8*charact_number);
    1d32:	80 91 8c 00 	lds	r24, 0x008C
    1d36:	88 2f       	mov	r24, r24
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	08 96       	adiw	r24, 0x08	; 8
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_Set_CG_Add>
	switch (charact)
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	3d 83       	std	Y+5, r19	; 0x05
    1d54:	2c 83       	std	Y+4, r18	; 0x04
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5a:	8e 30       	cpi	r24, 0x0E	; 14
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <LCD_Arabic_Dict+0x40>
    1d60:	fc c1       	rjmp	.+1016   	; 0x215a <LCD_Arabic_Dict+0x438>
    1d62:	2c 81       	ldd	r18, Y+4	; 0x04
    1d64:	3d 81       	ldd	r19, Y+5	; 0x05
    1d66:	2f 30       	cpi	r18, 0x0F	; 15
    1d68:	31 05       	cpc	r19, r1
    1d6a:	0c f0       	brlt	.+2      	; 0x1d6e <LCD_Arabic_Dict+0x4c>
    1d6c:	55 c0       	rjmp	.+170    	; 0x1e18 <LCD_Arabic_Dict+0xf6>
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	87 30       	cpi	r24, 0x07	; 7
    1d74:	91 05       	cpc	r25, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <LCD_Arabic_Dict+0x58>
    1d78:	41 c1       	rjmp	.+642    	; 0x1ffc <LCD_Arabic_Dict+0x2da>
    1d7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7e:	28 30       	cpi	r18, 0x08	; 8
    1d80:	31 05       	cpc	r19, r1
    1d82:	2c f5       	brge	.+74     	; 0x1dce <LCD_Arabic_Dict+0xac>
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	9d 81       	ldd	r25, Y+5	; 0x05
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <LCD_Arabic_Dict+0x6e>
    1d8e:	d2 c0       	rjmp	.+420    	; 0x1f34 <LCD_Arabic_Dict+0x212>
    1d90:	2c 81       	ldd	r18, Y+4	; 0x04
    1d92:	3d 81       	ldd	r19, Y+5	; 0x05
    1d94:	24 30       	cpi	r18, 0x04	; 4
    1d96:	31 05       	cpc	r19, r1
    1d98:	6c f4       	brge	.+26     	; 0x1db4 <LCD_Arabic_Dict+0x92>
    1d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9e:	81 30       	cpi	r24, 0x01	; 1
    1da0:	91 05       	cpc	r25, r1
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <LCD_Arabic_Dict+0x84>
    1da4:	94 c0       	rjmp	.+296    	; 0x1ece <LCD_Arabic_Dict+0x1ac>
    1da6:	2c 81       	ldd	r18, Y+4	; 0x04
    1da8:	3d 81       	ldd	r19, Y+5	; 0x05
    1daa:	22 30       	cpi	r18, 0x02	; 2
    1dac:	31 05       	cpc	r19, r1
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <LCD_Arabic_Dict+0x90>
    1db0:	a8 c0       	rjmp	.+336    	; 0x1f02 <LCD_Arabic_Dict+0x1e0>
    1db2:	49 c3       	rjmp	.+1682   	; 0x2446 <LCD_Arabic_Dict+0x724>
    1db4:	8c 81       	ldd	r24, Y+4	; 0x04
    1db6:	9d 81       	ldd	r25, Y+5	; 0x05
    1db8:	85 30       	cpi	r24, 0x05	; 5
    1dba:	91 05       	cpc	r25, r1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <LCD_Arabic_Dict+0x9e>
    1dbe:	ec c0       	rjmp	.+472    	; 0x1f98 <LCD_Arabic_Dict+0x276>
    1dc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc4:	26 30       	cpi	r18, 0x06	; 6
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	0c f0       	brlt	.+2      	; 0x1dcc <LCD_Arabic_Dict+0xaa>
    1dca:	ff c0       	rjmp	.+510    	; 0x1fca <LCD_Arabic_Dict+0x2a8>
    1dcc:	cc c0       	rjmp	.+408    	; 0x1f66 <LCD_Arabic_Dict+0x244>
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd2:	8a 30       	cpi	r24, 0x0A	; 10
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <LCD_Arabic_Dict+0xb8>
    1dd8:	5c c1       	rjmp	.+696    	; 0x2092 <LCD_Arabic_Dict+0x370>
    1dda:	2c 81       	ldd	r18, Y+4	; 0x04
    1ddc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dde:	2b 30       	cpi	r18, 0x0B	; 11
    1de0:	31 05       	cpc	r19, r1
    1de2:	6c f4       	brge	.+26     	; 0x1dfe <LCD_Arabic_Dict+0xdc>
    1de4:	8c 81       	ldd	r24, Y+4	; 0x04
    1de6:	9d 81       	ldd	r25, Y+5	; 0x05
    1de8:	88 30       	cpi	r24, 0x08	; 8
    1dea:	91 05       	cpc	r25, r1
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <LCD_Arabic_Dict+0xce>
    1dee:	1f c1       	rjmp	.+574    	; 0x202e <LCD_Arabic_Dict+0x30c>
    1df0:	2c 81       	ldd	r18, Y+4	; 0x04
    1df2:	3d 81       	ldd	r19, Y+5	; 0x05
    1df4:	29 30       	cpi	r18, 0x09	; 9
    1df6:	31 05       	cpc	r19, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <LCD_Arabic_Dict+0xda>
    1dfa:	32 c1       	rjmp	.+612    	; 0x2060 <LCD_Arabic_Dict+0x33e>
    1dfc:	24 c3       	rjmp	.+1608   	; 0x2446 <LCD_Arabic_Dict+0x724>
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	8c 30       	cpi	r24, 0x0C	; 12
    1e04:	91 05       	cpc	r25, r1
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <LCD_Arabic_Dict+0xe8>
    1e08:	76 c1       	rjmp	.+748    	; 0x20f6 <LCD_Arabic_Dict+0x3d4>
    1e0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e0e:	2d 30       	cpi	r18, 0x0D	; 13
    1e10:	31 05       	cpc	r19, r1
    1e12:	0c f0       	brlt	.+2      	; 0x1e16 <LCD_Arabic_Dict+0xf4>
    1e14:	89 c1       	rjmp	.+786    	; 0x2128 <LCD_Arabic_Dict+0x406>
    1e16:	56 c1       	rjmp	.+684    	; 0x20c4 <LCD_Arabic_Dict+0x3a2>
    1e18:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1c:	85 31       	cpi	r24, 0x15	; 21
    1e1e:	91 05       	cpc	r25, r1
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <LCD_Arabic_Dict+0x102>
    1e22:	4a c2       	rjmp	.+1172   	; 0x22b8 <LCD_Arabic_Dict+0x596>
    1e24:	2c 81       	ldd	r18, Y+4	; 0x04
    1e26:	3d 81       	ldd	r19, Y+5	; 0x05
    1e28:	26 31       	cpi	r18, 0x16	; 22
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	2c f5       	brge	.+74     	; 0x1e78 <LCD_Arabic_Dict+0x156>
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	9d 81       	ldd	r25, Y+5	; 0x05
    1e32:	81 31       	cpi	r24, 0x11	; 17
    1e34:	91 05       	cpc	r25, r1
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <LCD_Arabic_Dict+0x118>
    1e38:	db c1       	rjmp	.+950    	; 0x21f0 <LCD_Arabic_Dict+0x4ce>
    1e3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3e:	22 31       	cpi	r18, 0x12	; 18
    1e40:	31 05       	cpc	r19, r1
    1e42:	6c f4       	brge	.+26     	; 0x1e5e <LCD_Arabic_Dict+0x13c>
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	9d 81       	ldd	r25, Y+5	; 0x05
    1e48:	8f 30       	cpi	r24, 0x0F	; 15
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <LCD_Arabic_Dict+0x12e>
    1e4e:	9e c1       	rjmp	.+828    	; 0x218c <LCD_Arabic_Dict+0x46a>
    1e50:	2c 81       	ldd	r18, Y+4	; 0x04
    1e52:	3d 81       	ldd	r19, Y+5	; 0x05
    1e54:	20 31       	cpi	r18, 0x10	; 16
    1e56:	31 05       	cpc	r19, r1
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <LCD_Arabic_Dict+0x13a>
    1e5a:	b1 c1       	rjmp	.+866    	; 0x21be <LCD_Arabic_Dict+0x49c>
    1e5c:	f4 c2       	rjmp	.+1512   	; 0x2446 <LCD_Arabic_Dict+0x724>
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	9d 81       	ldd	r25, Y+5	; 0x05
    1e62:	83 31       	cpi	r24, 0x13	; 19
    1e64:	91 05       	cpc	r25, r1
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <LCD_Arabic_Dict+0x148>
    1e68:	f5 c1       	rjmp	.+1002   	; 0x2254 <LCD_Arabic_Dict+0x532>
    1e6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6e:	24 31       	cpi	r18, 0x14	; 20
    1e70:	31 05       	cpc	r19, r1
    1e72:	0c f0       	brlt	.+2      	; 0x1e76 <LCD_Arabic_Dict+0x154>
    1e74:	08 c2       	rjmp	.+1040   	; 0x2286 <LCD_Arabic_Dict+0x564>
    1e76:	d5 c1       	rjmp	.+938    	; 0x2222 <LCD_Arabic_Dict+0x500>
    1e78:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7c:	89 31       	cpi	r24, 0x19	; 25
    1e7e:	91 05       	cpc	r25, r1
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <LCD_Arabic_Dict+0x162>
    1e82:	7e c2       	rjmp	.+1276   	; 0x2380 <LCD_Arabic_Dict+0x65e>
    1e84:	2c 81       	ldd	r18, Y+4	; 0x04
    1e86:	3d 81       	ldd	r19, Y+5	; 0x05
    1e88:	2a 31       	cpi	r18, 0x1A	; 26
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	6c f4       	brge	.+26     	; 0x1ea8 <LCD_Arabic_Dict+0x186>
    1e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e90:	9d 81       	ldd	r25, Y+5	; 0x05
    1e92:	87 31       	cpi	r24, 0x17	; 23
    1e94:	91 05       	cpc	r25, r1
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <LCD_Arabic_Dict+0x178>
    1e98:	41 c2       	rjmp	.+1154   	; 0x231c <LCD_Arabic_Dict+0x5fa>
    1e9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9e:	28 31       	cpi	r18, 0x18	; 24
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	0c f0       	brlt	.+2      	; 0x1ea6 <LCD_Arabic_Dict+0x184>
    1ea4:	54 c2       	rjmp	.+1192   	; 0x234e <LCD_Arabic_Dict+0x62c>
    1ea6:	21 c2       	rjmp	.+1090   	; 0x22ea <LCD_Arabic_Dict+0x5c8>
    1ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1eac:	8b 31       	cpi	r24, 0x1B	; 27
    1eae:	91 05       	cpc	r25, r1
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <LCD_Arabic_Dict+0x192>
    1eb2:	98 c2       	rjmp	.+1328   	; 0x23e4 <LCD_Arabic_Dict+0x6c2>
    1eb4:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb6:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb8:	2b 31       	cpi	r18, 0x1B	; 27
    1eba:	31 05       	cpc	r19, r1
    1ebc:	0c f4       	brge	.+2      	; 0x1ec0 <LCD_Arabic_Dict+0x19e>
    1ebe:	79 c2       	rjmp	.+1266   	; 0x23b2 <LCD_Arabic_Dict+0x690>
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	8c 31       	cpi	r24, 0x1C	; 28
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <LCD_Arabic_Dict+0x1aa>
    1eca:	a5 c2       	rjmp	.+1354   	; 0x2416 <LCD_Arabic_Dict+0x6f4>
    1ecc:	bc c2       	rjmp	.+1400   	; 0x2446 <LCD_Arabic_Dict+0x724>
	{
	int count;
	case 1:
		/* alf */
	    for(count=0;count<5;count++)
    1ece:	1a 82       	std	Y+2, r1	; 0x02
    1ed0:	19 82       	std	Y+1, r1	; 0x01
    1ed2:	08 c0       	rjmp	.+16     	; 0x1ee4 <LCD_Arabic_Dict+0x1c2>
	    	LCD_WriteData(0x04);
    1ed4:	84 e0       	ldi	r24, 0x04	; 4
    1ed6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	switch (charact)
	{
	int count;
	case 1:
		/* alf */
	    for(count=0;count<5;count++)
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee8:	85 30       	cpi	r24, 0x05	; 5
    1eea:	91 05       	cpc	r25, r1
    1eec:	9c f3       	brlt	.-26     	; 0x1ed4 <LCD_Arabic_Dict+0x1b2>
	    	LCD_WriteData(0x04);
	    LCD_WriteData(0x07);
    1eee:	87 e0       	ldi	r24, 0x07	; 7
    1ef0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    1f00:	a2 c2       	rjmp	.+1348   	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 2:
		/* ba2 */
	    LCD_WriteData(0x00);
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0xff);
    1f20:	8f ef       	ldi	r24, 0xFF	; 255
    1f22:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    1f32:	89 c2       	rjmp	.+1298   	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 3:
		/* ta2 */
	    LCD_WriteData(0x00);
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0xf5);
    1f46:	85 ef       	ldi	r24, 0xF5	; 245
    1f48:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0xff);
    1f52:	8f ef       	ldi	r24, 0xFF	; 255
    1f54:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    1f64:	70 c2       	rjmp	.+1248   	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 4:
		/* tha2 */
	    LCD_WriteData(0x00);
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x08);
    1f72:	88 e0       	ldi	r24, 0x08	; 8
    1f74:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0xf5);
    1f78:	85 ef       	ldi	r24, 0xF5	; 245
    1f7a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0xff);
    1f84:	8f ef       	ldi	r24, 0xFF	; 255
    1f86:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    1f96:	57 c2       	rjmp	.+1198   	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 5:
		/* gem */
	    LCD_WriteData(0x00);
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x0c);
    1fa4:	8c e0       	ldi	r24, 0x0C	; 12
    1fa6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0xf2);
    1faa:	82 ef       	ldi	r24, 0xF2	; 242
    1fac:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0xff);
    1fb6:	8f ef       	ldi	r24, 0xFF	; 255
    1fb8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    1fc8:	3e c2       	rjmp	.+1148   	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 6:
		/* 7a2 */
	    LCD_WriteData(0x00);
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x0c);
    1fd6:	8c e0       	ldi	r24, 0x0C	; 12
    1fd8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0xf2);
    1fdc:	82 ef       	ldi	r24, 0xF2	; 242
    1fde:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0xff);
    1fe8:	8f ef       	ldi	r24, 0xFF	; 255
    1fea:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    1ffa:	25 c2       	rjmp	.+1098   	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 7:
		/* kha2 */
	    LCD_WriteData(0x04);
    1ffc:	84 e0       	ldi	r24, 0x04	; 4
    1ffe:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x0c);
    2008:	8c e0       	ldi	r24, 0x0C	; 12
    200a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0xf2);
    200e:	82 ef       	ldi	r24, 0xF2	; 242
    2010:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0xff);
    201a:	8f ef       	ldi	r24, 0xFF	; 255
    201c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    202c:	0c c2       	rjmp	.+1048   	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 8:
		/* dal */
	    LCD_WriteData(0x00);
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x0f);
    204c:	8f e0       	ldi	r24, 0x0F	; 15
    204e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    205e:	f3 c1       	rjmp	.+998    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 9:
		/* zal */
	    LCD_WriteData(0x00);
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x0f);
    207e:	8f e0       	ldi	r24, 0x0F	; 15
    2080:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    2090:	da c1       	rjmp	.+948    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 10:
		/* ra2 */
	    LCD_WriteData(0x00);
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x03);
    20b0:	83 e0       	ldi	r24, 0x03	; 3
    20b2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x02);
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x04);
    20bc:	84 e0       	ldi	r24, 0x04	; 4
    20be:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    20c2:	c1 c1       	rjmp	.+898    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 11:
		/* zan */
	    LCD_WriteData(0x00);
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x02);
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x03);
    20e2:	83 e0       	ldi	r24, 0x03	; 3
    20e4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x02);
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x04);
    20ee:	84 e0       	ldi	r24, 0x04	; 4
    20f0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    20f4:	a8 c1       	rjmp	.+848    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 12:
		/* seen */
	    LCD_WriteData(0x00);
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x15);
    2108:	85 e1       	ldi	r24, 0x15	; 21
    210a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x15);
    210e:	85 e1       	ldi	r24, 0x15	; 21
    2110:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2114:	8f e1       	ldi	r24, 0x1F	; 31
    2116:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    2126:	8f c1       	rjmp	.+798    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 13:
		/* sheen */
	    LCD_WriteData(0x04);
    2128:	84 e0       	ldi	r24, 0x04	; 4
    212a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x0a);
    212e:	8a e0       	ldi	r24, 0x0A	; 10
    2130:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x15);
    213a:	85 e1       	ldi	r24, 0x15	; 21
    213c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x15);
    2140:	85 e1       	ldi	r24, 0x15	; 21
    2142:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2146:	8f e1       	ldi	r24, 0x1F	; 31
    2148:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    2158:	76 c1       	rjmp	.+748    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 14:
		/* saad */
	    LCD_WriteData(0x00);
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x06);
    216c:	86 e0       	ldi	r24, 0x06	; 6
    216e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x09);
    2172:	89 e0       	ldi	r24, 0x09	; 9
    2174:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2178:	8f e1       	ldi	r24, 0x1F	; 31
    217a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    218a:	5d c1       	rjmp	.+698    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 15:
		/* daad */
	    LCD_WriteData(0x00);
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x04);
    2192:	84 e0       	ldi	r24, 0x04	; 4
    2194:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x06);
    219e:	86 e0       	ldi	r24, 0x06	; 6
    21a0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x09);
    21a4:	89 e0       	ldi	r24, 0x09	; 9
    21a6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    21aa:	8f e1       	ldi	r24, 0x1F	; 31
    21ac:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    21bc:	44 c1       	rjmp	.+648    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 16:
		/* taah */
	    LCD_WriteData(0x00);
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x08);
    21c4:	88 e0       	ldi	r24, 0x08	; 8
    21c6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x08);
    21ca:	88 e0       	ldi	r24, 0x08	; 8
    21cc:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x0e);
    21d0:	8e e0       	ldi	r24, 0x0E	; 14
    21d2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x09);
    21d6:	89 e0       	ldi	r24, 0x09	; 9
    21d8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    21dc:	8f e1       	ldi	r24, 0x1F	; 31
    21de:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    21ee:	2b c1       	rjmp	.+598    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 17:
	    /* zaah */
	    LCD_WriteData(0x00);
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x0a);
    21f6:	8a e0       	ldi	r24, 0x0A	; 10
    21f8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x08);
    21fc:	88 e0       	ldi	r24, 0x08	; 8
    21fe:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x0e);
    2202:	8e e0       	ldi	r24, 0x0E	; 14
    2204:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x09);
    2208:	89 e0       	ldi	r24, 0x09	; 9
    220a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    220e:	8f e1       	ldi	r24, 0x1F	; 31
    2210:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    2220:	12 c1       	rjmp	.+548    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 18:
		/* 3een */
	    LCD_WriteData(0x00);
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x07);
    222e:	87 e0       	ldi	r24, 0x07	; 7
    2230:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2234:	88 e0       	ldi	r24, 0x08	; 8
    2236:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x08);
    223a:	88 e0       	ldi	r24, 0x08	; 8
    223c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2240:	8f e1       	ldi	r24, 0x1F	; 31
    2242:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    2252:	f9 c0       	rjmp	.+498    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 19:
		/* 3'een */
	    LCD_WriteData(0x04);
    2254:	84 e0       	ldi	r24, 0x04	; 4
    2256:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x07);
    2260:	87 e0       	ldi	r24, 0x07	; 7
    2262:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x08);
    2266:	88 e0       	ldi	r24, 0x08	; 8
    2268:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x08);
    226c:	88 e0       	ldi	r24, 0x08	; 8
    226e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2272:	8f e1       	ldi	r24, 0x1F	; 31
    2274:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    2284:	e0 c0       	rjmp	.+448    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 20:
		/* faa2 */
	    LCD_WriteData(0x02);
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2292:	83 e0       	ldi	r24, 0x03	; 3
    2294:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2298:	83 e0       	ldi	r24, 0x03	; 3
    229a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    22a4:	8f e1       	ldi	r24, 0x1F	; 31
    22a6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    22b6:	c7 c0       	rjmp	.+398    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 21:
		/* k'aaf */
	    LCD_WriteData(0x03);
    22b8:	83 e0       	ldi	r24, 0x03	; 3
    22ba:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x03);
    22c4:	83 e0       	ldi	r24, 0x03	; 3
    22c6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x03);
    22ca:	83 e0       	ldi	r24, 0x03	; 3
    22cc:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    22d6:	8f e1       	ldi	r24, 0x1F	; 31
    22d8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    22e8:	ae c0       	rjmp	.+348    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 22:
		/* kaaf */
	    LCD_WriteData(0x00);
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x0f);
    22f0:	8f e0       	ldi	r24, 0x0F	; 15
    22f2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x04);
    22f6:	84 e0       	ldi	r24, 0x04	; 4
    22f8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x02);
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2308:	8f e1       	ldi	r24, 0x1F	; 31
    230a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    231a:	95 c0       	rjmp	.+298    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 23:
		/* laam */
	    LCD_WriteData(0x00);
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    233a:	8f e1       	ldi	r24, 0x1F	; 31
    233c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    234c:	7c c0       	rjmp	.+248    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 24:
		/* meem */
	    LCD_WriteData(0x00);
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2366:	83 e0       	ldi	r24, 0x03	; 3
    2368:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    236c:	8f e1       	ldi	r24, 0x1F	; 31
    236e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2372:	83 e0       	ldi	r24, 0x03	; 3
    2374:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    237e:	63 c0       	rjmp	.+198    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 25:
		/* noon */
	    LCD_WriteData(0x00);
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x05);
    2392:	85 e0       	ldi	r24, 0x05	; 5
    2394:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    239e:	8f e1       	ldi	r24, 0x1F	; 31
    23a0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    23b0:	4a c0       	rjmp	.+148    	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 26:
		/* heeh */
	    LCD_WriteData(0x00);
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x06);
    23ca:	86 e0       	ldi	r24, 0x06	; 6
    23cc:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    23d0:	8f e1       	ldi	r24, 0x1F	; 31
    23d2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x06);
    23d6:	86 e0       	ldi	r24, 0x06	; 6
    23d8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    23e2:	31 c0       	rjmp	.+98     	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 27:
		/* waaw */
	    LCD_WriteData(0x00);
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x03);
    23fc:	83 e0       	ldi	r24, 0x03	; 3
    23fe:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x03);
    2402:	83 e0       	ldi	r24, 0x03	; 3
    2404:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x02);
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
    2414:	18 c0       	rjmp	.+48     	; 0x2446 <LCD_Arabic_Dict+0x724>
	    break;

	case 28:
		/* yaah */
	    LCD_WriteData(0x00);
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x01);
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2434:	8f e1       	ldi	r24, 0x1F	; 31
    2436:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x00);
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    LCD_WriteData(0x0a);
    2440:	8a e0       	ldi	r24, 0x0A	; 10
    2442:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	}
	English_Char-=8;
    2446:	80 91 8e 00 	lds	r24, 0x008E
    244a:	88 50       	subi	r24, 0x08	; 8
    244c:	80 93 8e 00 	sts	0x008E, r24
	LCD_Set_DD_Add(0x80+charact_number+English_Char);
    2450:	90 91 8c 00 	lds	r25, 0x008C
    2454:	80 91 8e 00 	lds	r24, 0x008E
    2458:	89 0f       	add	r24, r25
    245a:	80 58       	subi	r24, 0x80	; 128
    245c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_Set_DD_Add>

}
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <LCD_WriteArabicData>:
void LCD_WriteArabicData(u8 data)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	0f 92       	push	r0
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	89 83       	std	Y+1, r24	; 0x01
	if(!(IS_WRITTEN(data)))
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <IS_WRITTEN>
    2482:	88 23       	and	r24, r24
    2484:	99 f4       	brne	.+38     	; 0x24ac <LCD_WriteArabicData+0x3c>
	{
		LCD_Arabic_Dict(data);
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_Arabic_Dict>
		LCD_WriteData(charact_number);
    248c:	80 91 8c 00 	lds	r24, 0x008C
    2490:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	    charact_number++;
    2494:	80 91 8c 00 	lds	r24, 0x008C
    2498:	8f 5f       	subi	r24, 0xFF	; 255
    249a:	80 93 8c 00 	sts	0x008C, r24
	    if(charact_number>7)
    249e:	80 91 8c 00 	lds	r24, 0x008C
    24a2:	88 30       	cpi	r24, 0x08	; 8
    24a4:	38 f0       	brcs	.+14     	; 0x24b4 <LCD_WriteArabicData+0x44>
	    	charact_number=0;
    24a6:	10 92 8c 00 	sts	0x008C, r1
    24aa:	04 c0       	rjmp	.+8      	; 0x24b4 <LCD_WriteArabicData+0x44>
	}
	else
		LCD_WriteData(current_charact);
    24ac:	80 91 8d 00 	lds	r24, 0x008D
    24b0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	English_Char--;
    24b4:	80 91 8e 00 	lds	r24, 0x008E
    24b8:	81 50       	subi	r24, 0x01	; 1
    24ba:	80 93 8e 00 	sts	0x008E, r24

}
    24be:	0f 90       	pop	r0
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	08 95       	ret

000024c6 <IS_WRITTEN>:

u8 IS_WRITTEN(u8 data)
{
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <IS_WRITTEN+0x6>
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <IS_WRITTEN+0x8>
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	8b 83       	std	Y+3, r24	; 0x03
	int count;
	for(count=0;count<8;count++)
    24d4:	1a 82       	std	Y+2, r1	; 0x02
    24d6:	19 82       	std	Y+1, r1	; 0x01
    24d8:	14 c0       	rjmp	.+40     	; 0x2502 <IS_WRITTEN+0x3c>
		if(charact_prev[count]==data)
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	fc 01       	movw	r30, r24
    24e0:	e5 58       	subi	r30, 0x85	; 133
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	90 81       	ld	r25, Z
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	98 17       	cp	r25, r24
    24ea:	31 f4       	brne	.+12     	; 0x24f8 <IS_WRITTEN+0x32>
		{
			current_charact=count;
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	80 93 8d 00 	sts	0x008D, r24
			return 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	8c 83       	std	Y+4, r24	; 0x04
    24f6:	14 c0       	rjmp	.+40     	; 0x2520 <IS_WRITTEN+0x5a>
}

u8 IS_WRITTEN(u8 data)
{
	int count;
	for(count=0;count<8;count++)
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	9a 81       	ldd	r25, Y+2	; 0x02
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	9a 83       	std	Y+2, r25	; 0x02
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	9a 81       	ldd	r25, Y+2	; 0x02
    2506:	88 30       	cpi	r24, 0x08	; 8
    2508:	91 05       	cpc	r25, r1
    250a:	3c f3       	brlt	.-50     	; 0x24da <IS_WRITTEN+0x14>
		if(charact_prev[count]==data)
		{
			current_charact=count;
			return 1;
		}
	charact_prev[charact_number]=data;
    250c:	80 91 8c 00 	lds	r24, 0x008C
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	fc 01       	movw	r30, r24
    2516:	e5 58       	subi	r30, 0x85	; 133
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	80 83       	st	Z, r24

	return 0;
    251e:	1c 82       	std	Y+4, r1	; 0x04
    2520:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <LCD_WrtireString_Arabic>:

u8 LCD_WrtireString_Arabic(u8* str)
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	00 d0       	rcall	.+0      	; 0x2536 <LCD_WrtireString_Arabic+0x6>
    2536:	00 d0       	rcall	.+0      	; 0x2538 <LCD_WrtireString_Arabic+0x8>
    2538:	00 d0       	rcall	.+0      	; 0x253a <LCD_WrtireString_Arabic+0xa>
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	9d 83       	std	Y+5, r25	; 0x05
    2540:	8c 83       	std	Y+4, r24	; 0x04
	if(English_Char>6*16+7)
    2542:	80 91 8e 00 	lds	r24, 0x008E
    2546:	88 36       	cpi	r24, 0x68	; 104
    2548:	10 f0       	brcs	.+4      	; 0x254e <LCD_WrtireString_Arabic+0x1e>
		English_Char=0;
    254a:	10 92 8e 00 	sts	0x008E, r1

	int count=0;
    254e:	1b 82       	std	Y+3, r1	; 0x03
    2550:	1a 82       	std	Y+2, r1	; 0x02
	u8 size=0;
    2552:	19 82       	std	Y+1, r1	; 0x01
    2554:	08 c0       	rjmp	.+16     	; 0x2566 <LCD_WrtireString_Arabic+0x36>

	while( (!((*(str+count))=='\0')) && size<=16)
	{
		count++;
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	9b 81       	ldd	r25, Y+3	; 0x03
    255a:	01 96       	adiw	r24, 0x01	; 1
    255c:	9b 83       	std	Y+3, r25	; 0x03
    255e:	8a 83       	std	Y+2, r24	; 0x02
		size++;
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	8f 5f       	subi	r24, 0xFF	; 255
    2564:	89 83       	std	Y+1, r24	; 0x01
		English_Char=0;

	int count=0;
	u8 size=0;

	while( (!((*(str+count))=='\0')) && size<=16)
    2566:	2a 81       	ldd	r18, Y+2	; 0x02
    2568:	3b 81       	ldd	r19, Y+3	; 0x03
    256a:	8c 81       	ldd	r24, Y+4	; 0x04
    256c:	9d 81       	ldd	r25, Y+5	; 0x05
    256e:	fc 01       	movw	r30, r24
    2570:	e2 0f       	add	r30, r18
    2572:	f3 1f       	adc	r31, r19
    2574:	80 81       	ld	r24, Z
    2576:	88 23       	and	r24, r24
    2578:	19 f0       	breq	.+6      	; 0x2580 <LCD_WrtireString_Arabic+0x50>
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	81 31       	cpi	r24, 0x11	; 17
    257e:	58 f3       	brcs	.-42     	; 0x2556 <LCD_WrtireString_Arabic+0x26>
	{
		count++;
		size++;
	}

		if(size<=16)
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	81 31       	cpi	r24, 0x11	; 17
    2584:	90 f5       	brcc	.+100    	; 0x25ea <LCD_WrtireString_Arabic+0xba>
		{
			for(count=size-1;count>=0;count--)
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	9b 83       	std	Y+3, r25	; 0x03
    2590:	8a 83       	std	Y+2, r24	; 0x02
    2592:	24 c0       	rjmp	.+72     	; 0x25dc <LCD_WrtireString_Arabic+0xac>
			{
				if((*(str+count))<=28)
    2594:	2a 81       	ldd	r18, Y+2	; 0x02
    2596:	3b 81       	ldd	r19, Y+3	; 0x03
    2598:	8c 81       	ldd	r24, Y+4	; 0x04
    259a:	9d 81       	ldd	r25, Y+5	; 0x05
    259c:	fc 01       	movw	r30, r24
    259e:	e2 0f       	add	r30, r18
    25a0:	f3 1f       	adc	r31, r19
    25a2:	80 81       	ld	r24, Z
    25a4:	8d 31       	cpi	r24, 0x1D	; 29
    25a6:	58 f4       	brcc	.+22     	; 0x25be <LCD_WrtireString_Arabic+0x8e>
					LCD_WriteArabicData(*(str+count));
    25a8:	2a 81       	ldd	r18, Y+2	; 0x02
    25aa:	3b 81       	ldd	r19, Y+3	; 0x03
    25ac:	8c 81       	ldd	r24, Y+4	; 0x04
    25ae:	9d 81       	ldd	r25, Y+5	; 0x05
    25b0:	fc 01       	movw	r30, r24
    25b2:	e2 0f       	add	r30, r18
    25b4:	f3 1f       	adc	r31, r19
    25b6:	80 81       	ld	r24, Z
    25b8:	0e 94 38 12 	call	0x2470	; 0x2470 <LCD_WriteArabicData>
    25bc:	0a c0       	rjmp	.+20     	; 0x25d2 <LCD_WrtireString_Arabic+0xa2>
				else
					LCD_WriteData(*(str+count));
    25be:	2a 81       	ldd	r18, Y+2	; 0x02
    25c0:	3b 81       	ldd	r19, Y+3	; 0x03
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	9d 81       	ldd	r25, Y+5	; 0x05
    25c6:	fc 01       	movw	r30, r24
    25c8:	e2 0f       	add	r30, r18
    25ca:	f3 1f       	adc	r31, r19
    25cc:	80 81       	ld	r24, Z
    25ce:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
		size++;
	}

		if(size<=16)
		{
			for(count=size-1;count>=0;count--)
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	9b 81       	ldd	r25, Y+3	; 0x03
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	9b 83       	std	Y+3, r25	; 0x03
    25da:	8a 83       	std	Y+2, r24	; 0x02
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	9b 81       	ldd	r25, Y+3	; 0x03
    25e0:	99 23       	and	r25, r25
    25e2:	c4 f6       	brge	.-80     	; 0x2594 <LCD_WrtireString_Arabic+0x64>
				if((*(str+count))<=28)
					LCD_WriteArabicData(*(str+count));
				else
					LCD_WriteData(*(str+count));
			}
			return 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	8e 83       	std	Y+6, r24	; 0x06
    25e8:	01 c0       	rjmp	.+2      	; 0x25ec <LCD_WrtireString_Arabic+0xbc>
		}
		else
			return 0;
    25ea:	1e 82       	std	Y+6, r1	; 0x06
    25ec:	8e 81       	ldd	r24, Y+6	; 0x06
}
    25ee:	26 96       	adiw	r28, 0x06	; 6
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <LCD_Mode_Init>:
#include "DIO.h"
#include "Arabic.h"
#include <avr/delay.h>

void LCD_Mode_Init()
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
    2608:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_Init>

}
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <LCD_Mode>:


void LCD_Mode(u8 Number)
{
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	cb 57       	subi	r28, 0x7B	; 123
    2620:	d0 40       	sbci	r29, 0x00	; 0
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	de bf       	out	0x3e, r29	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	fe 01       	movw	r30, r28
    262e:	ec 58       	subi	r30, 0x8C	; 140
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 83       	st	Z, r24
	u8* data="Maha Ezzat";
    2634:	fe 01       	movw	r30, r28
    2636:	e6 59       	subi	r30, 0x96	; 150
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	80 e6       	ldi	r24, 0x60	; 96
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
	u8* data1="Mah";
    2642:	fe 01       	movw	r30, r28
    2644:	e8 59       	subi	r30, 0x98	; 152
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	8b e6       	ldi	r24, 0x6B	; 107
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	80 83       	st	Z, r24
	u8* data2="Ezz";
    2650:	fe 01       	movw	r30, r28
    2652:	ea 59       	subi	r30, 0x9A	; 154
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	8f e6       	ldi	r24, 0x6F	; 111
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	80 83       	st	Z, r24
	s8 count,count2=0,count3=0;
    265e:	fe 01       	movw	r30, r28
    2660:	ec 59       	subi	r30, 0x9C	; 156
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	10 82       	st	Z, r1
    2666:	fe 01       	movw	r30, r28
    2668:	ed 59       	subi	r30, 0x9D	; 157
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	10 82       	st	Z, r1
	u8 Arabic_name[8]={al,ai,ah,' ',au,aN,aj,'\0'};
    266e:	ce 01       	movw	r24, r28
    2670:	84 59       	subi	r24, 0x94	; 148
    2672:	9f 4f       	sbci	r25, 0xFF	; 255
    2674:	e9 96       	adiw	r28, 0x39	; 57
    2676:	9f af       	std	Y+63, r25	; 0x3f
    2678:	8e af       	std	Y+62, r24	; 0x3e
    267a:	e9 97       	sbiw	r28, 0x39	; 57
    267c:	23 e8       	ldi	r18, 0x83	; 131
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	eb 96       	adiw	r28, 0x3b	; 59
    2682:	3f af       	std	Y+63, r19	; 0x3f
    2684:	2e af       	std	Y+62, r18	; 0x3e
    2686:	eb 97       	sbiw	r28, 0x3b	; 59
    2688:	38 e0       	ldi	r19, 0x08	; 8
    268a:	ec 96       	adiw	r28, 0x3c	; 60
    268c:	3f af       	std	Y+63, r19	; 0x3f
    268e:	ec 97       	sbiw	r28, 0x3c	; 60
    2690:	eb 96       	adiw	r28, 0x3b	; 59
    2692:	ee ad       	ldd	r30, Y+62	; 0x3e
    2694:	ff ad       	ldd	r31, Y+63	; 0x3f
    2696:	eb 97       	sbiw	r28, 0x3b	; 59
    2698:	00 80       	ld	r0, Z
    269a:	eb 96       	adiw	r28, 0x3b	; 59
    269c:	2e ad       	ldd	r18, Y+62	; 0x3e
    269e:	3f ad       	ldd	r19, Y+63	; 0x3f
    26a0:	eb 97       	sbiw	r28, 0x3b	; 59
    26a2:	2f 5f       	subi	r18, 0xFF	; 255
    26a4:	3f 4f       	sbci	r19, 0xFF	; 255
    26a6:	eb 96       	adiw	r28, 0x3b	; 59
    26a8:	3f af       	std	Y+63, r19	; 0x3f
    26aa:	2e af       	std	Y+62, r18	; 0x3e
    26ac:	eb 97       	sbiw	r28, 0x3b	; 59
    26ae:	e9 96       	adiw	r28, 0x39	; 57
    26b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    26b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    26b4:	e9 97       	sbiw	r28, 0x39	; 57
    26b6:	00 82       	st	Z, r0
    26b8:	e9 96       	adiw	r28, 0x39	; 57
    26ba:	2e ad       	ldd	r18, Y+62	; 0x3e
    26bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    26be:	e9 97       	sbiw	r28, 0x39	; 57
    26c0:	2f 5f       	subi	r18, 0xFF	; 255
    26c2:	3f 4f       	sbci	r19, 0xFF	; 255
    26c4:	e9 96       	adiw	r28, 0x39	; 57
    26c6:	3f af       	std	Y+63, r19	; 0x3f
    26c8:	2e af       	std	Y+62, r18	; 0x3e
    26ca:	e9 97       	sbiw	r28, 0x39	; 57
    26cc:	ec 96       	adiw	r28, 0x3c	; 60
    26ce:	3f ad       	ldd	r19, Y+63	; 0x3f
    26d0:	ec 97       	sbiw	r28, 0x3c	; 60
    26d2:	31 50       	subi	r19, 0x01	; 1
    26d4:	ec 96       	adiw	r28, 0x3c	; 60
    26d6:	3f af       	std	Y+63, r19	; 0x3f
    26d8:	ec 97       	sbiw	r28, 0x3c	; 60
    26da:	ec 96       	adiw	r28, 0x3c	; 60
    26dc:	6f ad       	ldd	r22, Y+63	; 0x3f
    26de:	ec 97       	sbiw	r28, 0x3c	; 60
    26e0:	66 23       	and	r22, r22
    26e2:	b1 f6       	brne	.-84     	; 0x2690 <LCD_Mode+0x7e>

	switch (Number)
    26e4:	fe 01       	movw	r30, r28
    26e6:	ec 58       	subi	r30, 0x8C	; 140
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 81       	ld	r24, Z
    26ec:	e8 2f       	mov	r30, r24
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	e7 96       	adiw	r28, 0x37	; 55
    26f2:	ff af       	std	Y+63, r31	; 0x3f
    26f4:	ee af       	std	Y+62, r30	; 0x3e
    26f6:	e7 97       	sbiw	r28, 0x37	; 55
    26f8:	e7 96       	adiw	r28, 0x37	; 55
    26fa:	2e ad       	ldd	r18, Y+62	; 0x3e
    26fc:	3f ad       	ldd	r19, Y+63	; 0x3f
    26fe:	e7 97       	sbiw	r28, 0x37	; 55
    2700:	27 30       	cpi	r18, 0x07	; 7
    2702:	31 05       	cpc	r19, r1
    2704:	09 f4       	brne	.+2      	; 0x2708 <LCD_Mode+0xf6>
    2706:	e2 c3       	rjmp	.+1988   	; 0x2ecc <LCD_Mode+0x8ba>
    2708:	e7 96       	adiw	r28, 0x37	; 55
    270a:	6e ad       	ldd	r22, Y+62	; 0x3e
    270c:	7f ad       	ldd	r23, Y+63	; 0x3f
    270e:	e7 97       	sbiw	r28, 0x37	; 55
    2710:	68 30       	cpi	r22, 0x08	; 8
    2712:	71 05       	cpc	r23, r1
    2714:	dc f4       	brge	.+54     	; 0x274c <LCD_Mode+0x13a>
    2716:	e7 96       	adiw	r28, 0x37	; 55
    2718:	8e ad       	ldd	r24, Y+62	; 0x3e
    271a:	9f ad       	ldd	r25, Y+63	; 0x3f
    271c:	e7 97       	sbiw	r28, 0x37	; 55
    271e:	85 30       	cpi	r24, 0x05	; 5
    2720:	91 05       	cpc	r25, r1
    2722:	09 f4       	brne	.+2      	; 0x2726 <LCD_Mode+0x114>
    2724:	9d c6       	rjmp	.+3386   	; 0x3460 <LCD_Mode+0xe4e>
    2726:	e7 96       	adiw	r28, 0x37	; 55
    2728:	ee ad       	ldd	r30, Y+62	; 0x3e
    272a:	ff ad       	ldd	r31, Y+63	; 0x3f
    272c:	e7 97       	sbiw	r28, 0x37	; 55
    272e:	e6 30       	cpi	r30, 0x06	; 6
    2730:	f1 05       	cpc	r31, r1
    2732:	0c f0       	brlt	.+2      	; 0x2736 <LCD_Mode+0x124>
    2734:	a7 c4       	rjmp	.+2382   	; 0x3084 <LCD_Mode+0xa72>
    2736:	e7 96       	adiw	r28, 0x37	; 55
    2738:	2e ad       	ldd	r18, Y+62	; 0x3e
    273a:	3f ad       	ldd	r19, Y+63	; 0x3f
    273c:	e7 97       	sbiw	r28, 0x37	; 55
    273e:	24 30       	cpi	r18, 0x04	; 4
    2740:	31 05       	cpc	r19, r1
    2742:	11 f4       	brne	.+4      	; 0x2748 <LCD_Mode+0x136>
    2744:	0c 94 0a 1c 	jmp	0x3814	; 0x3814 <LCD_Mode+0x1202>
    2748:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <LCD_Mode+0x13a6>
    274c:	e7 96       	adiw	r28, 0x37	; 55
    274e:	6e ad       	ldd	r22, Y+62	; 0x3e
    2750:	7f ad       	ldd	r23, Y+63	; 0x3f
    2752:	e7 97       	sbiw	r28, 0x37	; 55
    2754:	69 30       	cpi	r22, 0x09	; 9
    2756:	71 05       	cpc	r23, r1
    2758:	19 f1       	breq	.+70     	; 0x27a0 <LCD_Mode+0x18e>
    275a:	e7 96       	adiw	r28, 0x37	; 55
    275c:	8e ad       	ldd	r24, Y+62	; 0x3e
    275e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2760:	e7 97       	sbiw	r28, 0x37	; 55
    2762:	89 30       	cpi	r24, 0x09	; 9
    2764:	91 05       	cpc	r25, r1
    2766:	0c f4       	brge	.+2      	; 0x276a <LCD_Mode+0x158>
    2768:	8d c2       	rjmp	.+1306   	; 0x2c84 <LCD_Mode+0x672>
    276a:	e7 96       	adiw	r28, 0x37	; 55
    276c:	ee ad       	ldd	r30, Y+62	; 0x3e
    276e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2770:	e7 97       	sbiw	r28, 0x37	; 55
    2772:	ea 30       	cpi	r30, 0x0A	; 10
    2774:	f1 05       	cpc	r31, r1
    2776:	11 f0       	breq	.+4      	; 0x277c <LCD_Mode+0x16a>
    2778:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <LCD_Mode+0x13a6>

/*******************************************************************************************/
	/*LCD Mod10(Arabic)*/
	case 10:

		LCD_WrtireString(data);
    277c:	fe 01       	movw	r30, r28
    277e:	e6 59       	subi	r30, 0x96	; 150
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_WrtireString>
		LCD_GoTo(5,1);
    278a:	85 e0       	ldi	r24, 0x05	; 5
    278c:	61 e0       	ldi	r22, 0x01	; 1
    278e:	0e 94 08 0c 	call	0x1810	; 0x1810 <LCD_GoTo>
		LCD_WrtireString_Arabic(Arabic_name);
    2792:	ce 01       	movw	r24, r28
    2794:	84 59       	subi	r24, 0x94	; 148
    2796:	9f 4f       	sbci	r25, 0xFF	; 255
    2798:	0e 94 98 12 	call	0x2530	; 0x2530 <LCD_WrtireString_Arabic>
    279c:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <LCD_Mode+0x13a6>
/*******************************************************************************************/
	/*LCD Mod9*/
	case 9:
		while(1)
		{
			if(count2<10)
    27a0:	fe 01       	movw	r30, r28
    27a2:	ec 59       	subi	r30, 0x9C	; 156
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	80 81       	ld	r24, Z
    27a8:	8a 30       	cpi	r24, 0x0A	; 10
    27aa:	0c f0       	brlt	.+2      	; 0x27ae <LCD_Mode+0x19c>
    27ac:	71 c1       	rjmp	.+738    	; 0x2a90 <LCD_Mode+0x47e>
			{
				for(count=0;count<=9-count2;count++)
    27ae:	fe 01       	movw	r30, r28
    27b0:	eb 59       	subi	r30, 0x9B	; 155
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	10 82       	st	Z, r1
    27b6:	53 c1       	rjmp	.+678    	; 0x2a5e <LCD_Mode+0x44c>
				{
					for(count3=0;count3<count;count3++)
    27b8:	fe 01       	movw	r30, r28
    27ba:	ed 59       	subi	r30, 0x9D	; 157
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	10 82       	st	Z, r1
    27c0:	0c c0       	rjmp	.+24     	; 0x27da <LCD_Mode+0x1c8>
						LCD_WriteData(' ');
    27c2:	80 e2       	ldi	r24, 0x20	; 32
    27c4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
		{
			if(count2<10)
			{
				for(count=0;count<=9-count2;count++)
				{
					for(count3=0;count3<count;count3++)
    27c8:	de 01       	movw	r26, r28
    27ca:	ad 59       	subi	r26, 0x9D	; 157
    27cc:	bf 4f       	sbci	r27, 0xFF	; 255
    27ce:	fe 01       	movw	r30, r28
    27d0:	ed 59       	subi	r30, 0x9D	; 157
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	8f 5f       	subi	r24, 0xFF	; 255
    27d8:	8c 93       	st	X, r24
    27da:	fe 01       	movw	r30, r28
    27dc:	ed 59       	subi	r30, 0x9D	; 157
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	de 01       	movw	r26, r28
    27e2:	ab 59       	subi	r26, 0x9B	; 155
    27e4:	bf 4f       	sbci	r27, 0xFF	; 255
    27e6:	90 81       	ld	r25, Z
    27e8:	8c 91       	ld	r24, X
    27ea:	98 17       	cp	r25, r24
    27ec:	54 f3       	brlt	.-44     	; 0x27c2 <LCD_Mode+0x1b0>
						LCD_WriteData(' ');
					LCD_WriteData(*(data+(9-count2)));
    27ee:	fe 01       	movw	r30, r28
    27f0:	ec 59       	subi	r30, 0x9C	; 156
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	28 2f       	mov	r18, r24
    27f8:	33 27       	eor	r19, r19
    27fa:	27 fd       	sbrc	r18, 7
    27fc:	30 95       	com	r19
    27fe:	89 e0       	ldi	r24, 0x09	; 9
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	82 1b       	sub	r24, r18
    2804:	93 0b       	sbc	r25, r19
    2806:	9c 01       	movw	r18, r24
    2808:	fe 01       	movw	r30, r28
    280a:	e6 59       	subi	r30, 0x96	; 150
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	80 81       	ld	r24, Z
    2810:	91 81       	ldd	r25, Z+1	; 0x01
    2812:	fc 01       	movw	r30, r24
    2814:	e2 0f       	add	r30, r18
    2816:	f3 1f       	adc	r31, r19
    2818:	80 81       	ld	r24, Z
    281a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>

					for(count3=0;count3<9-count2-count;count3++)
    281e:	fe 01       	movw	r30, r28
    2820:	ed 59       	subi	r30, 0x9D	; 157
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	10 82       	st	Z, r1
    2826:	0c c0       	rjmp	.+24     	; 0x2840 <LCD_Mode+0x22e>
						LCD_WriteData(' ');
    2828:	80 e2       	ldi	r24, 0x20	; 32
    282a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
				{
					for(count3=0;count3<count;count3++)
						LCD_WriteData(' ');
					LCD_WriteData(*(data+(9-count2)));

					for(count3=0;count3<9-count2-count;count3++)
    282e:	de 01       	movw	r26, r28
    2830:	ad 59       	subi	r26, 0x9D	; 157
    2832:	bf 4f       	sbci	r27, 0xFF	; 255
    2834:	fe 01       	movw	r30, r28
    2836:	ed 59       	subi	r30, 0x9D	; 157
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	8f 5f       	subi	r24, 0xFF	; 255
    283e:	8c 93       	st	X, r24
    2840:	fe 01       	movw	r30, r28
    2842:	ed 59       	subi	r30, 0x9D	; 157
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 81       	ld	r24, Z
    2848:	48 2f       	mov	r20, r24
    284a:	55 27       	eor	r21, r21
    284c:	47 fd       	sbrc	r20, 7
    284e:	50 95       	com	r21
    2850:	fe 01       	movw	r30, r28
    2852:	ec 59       	subi	r30, 0x9C	; 156
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	80 81       	ld	r24, Z
    2858:	28 2f       	mov	r18, r24
    285a:	33 27       	eor	r19, r19
    285c:	27 fd       	sbrc	r18, 7
    285e:	30 95       	com	r19
    2860:	89 e0       	ldi	r24, 0x09	; 9
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	bc 01       	movw	r22, r24
    2866:	62 1b       	sub	r22, r18
    2868:	73 0b       	sbc	r23, r19
    286a:	9b 01       	movw	r18, r22
    286c:	fe 01       	movw	r30, r28
    286e:	eb 59       	subi	r30, 0x9B	; 155
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	80 81       	ld	r24, Z
    2874:	99 27       	eor	r25, r25
    2876:	87 fd       	sbrc	r24, 7
    2878:	90 95       	com	r25
    287a:	f9 01       	movw	r30, r18
    287c:	e8 1b       	sub	r30, r24
    287e:	f9 0b       	sbc	r31, r25
    2880:	cf 01       	movw	r24, r30
    2882:	48 17       	cp	r20, r24
    2884:	59 07       	cpc	r21, r25
    2886:	84 f2       	brlt	.-96     	; 0x2828 <LCD_Mode+0x216>
						LCD_WriteData(' ');
					for(count3=10-count2;count3<10;count3++)
    2888:	fe 01       	movw	r30, r28
    288a:	ec 59       	subi	r30, 0x9C	; 156
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	90 81       	ld	r25, Z
    2890:	8a e0       	ldi	r24, 0x0A	; 10
    2892:	89 1b       	sub	r24, r25
    2894:	fe 01       	movw	r30, r28
    2896:	ed 59       	subi	r30, 0x9D	; 157
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 83       	st	Z, r24
    289c:	1c c0       	rjmp	.+56     	; 0x28d6 <LCD_Mode+0x2c4>
						LCD_WriteData(*(data+count3));
    289e:	fe 01       	movw	r30, r28
    28a0:	ed 59       	subi	r30, 0x9D	; 157
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	28 2f       	mov	r18, r24
    28a8:	33 27       	eor	r19, r19
    28aa:	27 fd       	sbrc	r18, 7
    28ac:	30 95       	com	r19
    28ae:	fe 01       	movw	r30, r28
    28b0:	e6 59       	subi	r30, 0x96	; 150
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	91 81       	ldd	r25, Z+1	; 0x01
    28b8:	fc 01       	movw	r30, r24
    28ba:	e2 0f       	add	r30, r18
    28bc:	f3 1f       	adc	r31, r19
    28be:	80 81       	ld	r24, Z
    28c0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
						LCD_WriteData(' ');
					LCD_WriteData(*(data+(9-count2)));

					for(count3=0;count3<9-count2-count;count3++)
						LCD_WriteData(' ');
					for(count3=10-count2;count3<10;count3++)
    28c4:	de 01       	movw	r26, r28
    28c6:	ad 59       	subi	r26, 0x9D	; 157
    28c8:	bf 4f       	sbci	r27, 0xFF	; 255
    28ca:	fe 01       	movw	r30, r28
    28cc:	ed 59       	subi	r30, 0x9D	; 157
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 81       	ld	r24, Z
    28d2:	8f 5f       	subi	r24, 0xFF	; 255
    28d4:	8c 93       	st	X, r24
    28d6:	fe 01       	movw	r30, r28
    28d8:	ed 59       	subi	r30, 0x9D	; 157
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	80 81       	ld	r24, Z
    28de:	8a 30       	cpi	r24, 0x0A	; 10
    28e0:	f4 f2       	brlt	.-68     	; 0x289e <LCD_Mode+0x28c>
    28e2:	fe 01       	movw	r30, r28
    28e4:	e1 5a       	subi	r30, 0xA1	; 161
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	aa e7       	ldi	r26, 0x7A	; 122
    28ee:	b4 e4       	ldi	r27, 0x44	; 68
    28f0:	80 83       	st	Z, r24
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	a2 83       	std	Z+2, r26	; 0x02
    28f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f8:	8e 01       	movw	r16, r28
    28fa:	05 5a       	subi	r16, 0xA5	; 165
    28fc:	1f 4f       	sbci	r17, 0xFF	; 255
    28fe:	fe 01       	movw	r30, r28
    2900:	e1 5a       	subi	r30, 0xA1	; 161
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	60 81       	ld	r22, Z
    2906:	71 81       	ldd	r23, Z+1	; 0x01
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	4a e7       	ldi	r20, 0x7A	; 122
    2912:	53 e4       	ldi	r21, 0x43	; 67
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	f8 01       	movw	r30, r16
    291e:	80 83       	st	Z, r24
    2920:	91 83       	std	Z+1, r25	; 0x01
    2922:	a2 83       	std	Z+2, r26	; 0x02
    2924:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2926:	fe 01       	movw	r30, r28
    2928:	e5 5a       	subi	r30, 0xA5	; 165
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	60 81       	ld	r22, Z
    292e:	71 81       	ldd	r23, Z+1	; 0x01
    2930:	82 81       	ldd	r24, Z+2	; 0x02
    2932:	93 81       	ldd	r25, Z+3	; 0x03
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	44 f4       	brge	.+16     	; 0x2954 <LCD_Mode+0x342>
		__ticks = 1;
    2944:	fe 01       	movw	r30, r28
    2946:	e7 5a       	subi	r30, 0xA7	; 167
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	80 83       	st	Z, r24
    2952:	64 c0       	rjmp	.+200    	; 0x2a1c <LCD_Mode+0x40a>
	else if (__tmp > 65535)
    2954:	fe 01       	movw	r30, r28
    2956:	e5 5a       	subi	r30, 0xA5	; 165
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	60 81       	ld	r22, Z
    295c:	71 81       	ldd	r23, Z+1	; 0x01
    295e:	82 81       	ldd	r24, Z+2	; 0x02
    2960:	93 81       	ldd	r25, Z+3	; 0x03
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	3f ef       	ldi	r19, 0xFF	; 255
    2966:	4f e7       	ldi	r20, 0x7F	; 127
    2968:	57 e4       	ldi	r21, 0x47	; 71
    296a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    296e:	18 16       	cp	r1, r24
    2970:	0c f0       	brlt	.+2      	; 0x2974 <LCD_Mode+0x362>
    2972:	43 c0       	rjmp	.+134    	; 0x29fa <LCD_Mode+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2974:	fe 01       	movw	r30, r28
    2976:	e1 5a       	subi	r30, 0xA1	; 161
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	60 81       	ld	r22, Z
    297c:	71 81       	ldd	r23, Z+1	; 0x01
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e2       	ldi	r20, 0x20	; 32
    2988:	51 e4       	ldi	r21, 0x41	; 65
    298a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	8e 01       	movw	r16, r28
    2994:	07 5a       	subi	r16, 0xA7	; 167
    2996:	1f 4f       	sbci	r17, 0xFF	; 255
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	f8 01       	movw	r30, r16
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
    29aa:	1f c0       	rjmp	.+62     	; 0x29ea <LCD_Mode+0x3d8>
    29ac:	fe 01       	movw	r30, r28
    29ae:	e9 5a       	subi	r30, 0xA9	; 169
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	89 e1       	ldi	r24, 0x19	; 25
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
    29ba:	fe 01       	movw	r30, r28
    29bc:	e9 5a       	subi	r30, 0xA9	; 169
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	80 81       	ld	r24, Z
    29c2:	91 81       	ldd	r25, Z+1	; 0x01
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <LCD_Mode+0x3b2>
    29c8:	fe 01       	movw	r30, r28
    29ca:	e9 5a       	subi	r30, 0xA9	; 169
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d2:	de 01       	movw	r26, r28
    29d4:	a7 5a       	subi	r26, 0xA7	; 167
    29d6:	bf 4f       	sbci	r27, 0xFF	; 255
    29d8:	fe 01       	movw	r30, r28
    29da:	e7 5a       	subi	r30, 0xA7	; 167
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	80 81       	ld	r24, Z
    29e0:	91 81       	ldd	r25, Z+1	; 0x01
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	11 96       	adiw	r26, 0x01	; 1
    29e6:	9c 93       	st	X, r25
    29e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ea:	fe 01       	movw	r30, r28
    29ec:	e7 5a       	subi	r30, 0xA7	; 167
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	80 81       	ld	r24, Z
    29f2:	91 81       	ldd	r25, Z+1	; 0x01
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	d1 f6       	brne	.-76     	; 0x29ac <LCD_Mode+0x39a>
    29f8:	27 c0       	rjmp	.+78     	; 0x2a48 <LCD_Mode+0x436>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fa:	8e 01       	movw	r16, r28
    29fc:	07 5a       	subi	r16, 0xA7	; 167
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	fe 01       	movw	r30, r28
    2a02:	e5 5a       	subi	r30, 0xA5	; 165
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	60 81       	ld	r22, Z
    2a08:	71 81       	ldd	r23, Z+1	; 0x01
    2a0a:	82 81       	ldd	r24, Z+2	; 0x02
    2a0c:	93 81       	ldd	r25, Z+3	; 0x03
    2a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	f8 01       	movw	r30, r16
    2a18:	91 83       	std	Z+1, r25	; 0x01
    2a1a:	80 83       	st	Z, r24
    2a1c:	de 01       	movw	r26, r28
    2a1e:	ab 5a       	subi	r26, 0xAB	; 171
    2a20:	bf 4f       	sbci	r27, 0xFF	; 255
    2a22:	fe 01       	movw	r30, r28
    2a24:	e7 5a       	subi	r30, 0xA7	; 167
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	8d 93       	st	X+, r24
    2a2e:	9c 93       	st	X, r25
    2a30:	fe 01       	movw	r30, r28
    2a32:	eb 5a       	subi	r30, 0xAB	; 171
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	80 81       	ld	r24, Z
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <LCD_Mode+0x428>
    2a3e:	fe 01       	movw	r30, r28
    2a40:	eb 5a       	subi	r30, 0xAB	; 171
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	80 83       	st	Z, r24
						LCD_WriteData(*(data+count3));

					_delay_ms(1000);
					LCD_CLear();
    2a48:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_CLear>
	case 9:
		while(1)
		{
			if(count2<10)
			{
				for(count=0;count<=9-count2;count++)
    2a4c:	de 01       	movw	r26, r28
    2a4e:	ab 59       	subi	r26, 0x9B	; 155
    2a50:	bf 4f       	sbci	r27, 0xFF	; 255
    2a52:	fe 01       	movw	r30, r28
    2a54:	eb 59       	subi	r30, 0x9B	; 155
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	8f 5f       	subi	r24, 0xFF	; 255
    2a5c:	8c 93       	st	X, r24
    2a5e:	fe 01       	movw	r30, r28
    2a60:	eb 59       	subi	r30, 0x9B	; 155
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	48 2f       	mov	r20, r24
    2a68:	55 27       	eor	r21, r21
    2a6a:	47 fd       	sbrc	r20, 7
    2a6c:	50 95       	com	r21
    2a6e:	fe 01       	movw	r30, r28
    2a70:	ec 59       	subi	r30, 0x9C	; 156
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	80 81       	ld	r24, Z
    2a76:	28 2f       	mov	r18, r24
    2a78:	33 27       	eor	r19, r19
    2a7a:	27 fd       	sbrc	r18, 7
    2a7c:	30 95       	com	r19
    2a7e:	89 e0       	ldi	r24, 0x09	; 9
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	82 1b       	sub	r24, r18
    2a84:	93 0b       	sbc	r25, r19
    2a86:	84 17       	cp	r24, r20
    2a88:	95 07       	cpc	r25, r21
    2a8a:	0c f0       	brlt	.+2      	; 0x2a8e <LCD_Mode+0x47c>
    2a8c:	95 ce       	rjmp	.-726    	; 0x27b8 <LCD_Mode+0x1a6>
    2a8e:	31 c0       	rjmp	.+98     	; 0x2af2 <LCD_Mode+0x4e0>
					LCD_CLear();
				}
			}
			else
			{
				if(count2%2)
    2a90:	fe 01       	movw	r30, r28
    2a92:	ec 59       	subi	r30, 0x9C	; 156
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	80 81       	ld	r24, Z
    2a98:	88 2f       	mov	r24, r24
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	81 70       	andi	r24, 0x01	; 1
    2a9e:	90 70       	andi	r25, 0x00	; 0
    2aa0:	88 23       	and	r24, r24
    2aa2:	39 f1       	breq	.+78     	; 0x2af2 <LCD_Mode+0x4e0>
				{
					for(count=0;count<10;count++)
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	eb 59       	subi	r30, 0x9B	; 155
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	10 82       	st	Z, r1
    2aac:	1c c0       	rjmp	.+56     	; 0x2ae6 <LCD_Mode+0x4d4>
						LCD_WriteData(*(data+count));
    2aae:	fe 01       	movw	r30, r28
    2ab0:	eb 59       	subi	r30, 0x9B	; 155
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	80 81       	ld	r24, Z
    2ab6:	28 2f       	mov	r18, r24
    2ab8:	33 27       	eor	r19, r19
    2aba:	27 fd       	sbrc	r18, 7
    2abc:	30 95       	com	r19
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e6 59       	subi	r30, 0x96	; 150
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	80 81       	ld	r24, Z
    2ac6:	91 81       	ldd	r25, Z+1	; 0x01
    2ac8:	fc 01       	movw	r30, r24
    2aca:	e2 0f       	add	r30, r18
    2acc:	f3 1f       	adc	r31, r19
    2ace:	80 81       	ld	r24, Z
    2ad0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
			}
			else
			{
				if(count2%2)
				{
					for(count=0;count<10;count++)
    2ad4:	de 01       	movw	r26, r28
    2ad6:	ab 59       	subi	r26, 0x9B	; 155
    2ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    2ada:	fe 01       	movw	r30, r28
    2adc:	eb 59       	subi	r30, 0x9B	; 155
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8f 5f       	subi	r24, 0xFF	; 255
    2ae4:	8c 93       	st	X, r24
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	eb 59       	subi	r30, 0x9B	; 155
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	80 81       	ld	r24, Z
    2aee:	8a 30       	cpi	r24, 0x0A	; 10
    2af0:	f4 f2       	brlt	.-68     	; 0x2aae <LCD_Mode+0x49c>
						LCD_WriteData(*(data+count));
				}
			}
				count2++;
    2af2:	de 01       	movw	r26, r28
    2af4:	ac 59       	subi	r26, 0x9C	; 156
    2af6:	bf 4f       	sbci	r27, 0xFF	; 255
    2af8:	fe 01       	movw	r30, r28
    2afa:	ec 59       	subi	r30, 0x9C	; 156
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 81       	ld	r24, Z
    2b00:	8f 5f       	subi	r24, 0xFF	; 255
    2b02:	8c 93       	st	X, r24
				if(count2>15)
    2b04:	fe 01       	movw	r30, r28
    2b06:	ec 59       	subi	r30, 0x9C	; 156
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	80 81       	ld	r24, Z
    2b0c:	80 31       	cpi	r24, 0x10	; 16
    2b0e:	24 f0       	brlt	.+8      	; 0x2b18 <LCD_Mode+0x506>
					count2=0;
    2b10:	fe 01       	movw	r30, r28
    2b12:	ec 59       	subi	r30, 0x9C	; 156
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	10 82       	st	Z, r1
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ef 5a       	subi	r30, 0xAF	; 175
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	aa e7       	ldi	r26, 0x7A	; 122
    2b24:	b4 e4       	ldi	r27, 0x44	; 68
    2b26:	80 83       	st	Z, r24
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	a2 83       	std	Z+2, r26	; 0x02
    2b2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b2e:	8e 01       	movw	r16, r28
    2b30:	03 5b       	subi	r16, 0xB3	; 179
    2b32:	1f 4f       	sbci	r17, 0xFF	; 255
    2b34:	fe 01       	movw	r30, r28
    2b36:	ef 5a       	subi	r30, 0xAF	; 175
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	60 81       	ld	r22, Z
    2b3c:	71 81       	ldd	r23, Z+1	; 0x01
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	93 81       	ldd	r25, Z+3	; 0x03
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	4a e7       	ldi	r20, 0x7A	; 122
    2b48:	53 e4       	ldi	r21, 0x43	; 67
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	f8 01       	movw	r30, r16
    2b54:	80 83       	st	Z, r24
    2b56:	91 83       	std	Z+1, r25	; 0x01
    2b58:	a2 83       	std	Z+2, r26	; 0x02
    2b5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e3 5b       	subi	r30, 0xB3	; 179
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	60 81       	ld	r22, Z
    2b64:	71 81       	ldd	r23, Z+1	; 0x01
    2b66:	82 81       	ldd	r24, Z+2	; 0x02
    2b68:	93 81       	ldd	r25, Z+3	; 0x03
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b76:	88 23       	and	r24, r24
    2b78:	44 f4       	brge	.+16     	; 0x2b8a <LCD_Mode+0x578>
		__ticks = 1;
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e5 5b       	subi	r30, 0xB5	; 181
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	80 83       	st	Z, r24
    2b88:	64 c0       	rjmp	.+200    	; 0x2c52 <LCD_Mode+0x640>
	else if (__tmp > 65535)
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e3 5b       	subi	r30, 0xB3	; 179
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	60 81       	ld	r22, Z
    2b92:	71 81       	ldd	r23, Z+1	; 0x01
    2b94:	82 81       	ldd	r24, Z+2	; 0x02
    2b96:	93 81       	ldd	r25, Z+3	; 0x03
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	3f ef       	ldi	r19, 0xFF	; 255
    2b9c:	4f e7       	ldi	r20, 0x7F	; 127
    2b9e:	57 e4       	ldi	r21, 0x47	; 71
    2ba0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba4:	18 16       	cp	r1, r24
    2ba6:	0c f0       	brlt	.+2      	; 0x2baa <LCD_Mode+0x598>
    2ba8:	43 c0       	rjmp	.+134    	; 0x2c30 <LCD_Mode+0x61e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2baa:	fe 01       	movw	r30, r28
    2bac:	ef 5a       	subi	r30, 0xAF	; 175
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	60 81       	ld	r22, Z
    2bb2:	71 81       	ldd	r23, Z+1	; 0x01
    2bb4:	82 81       	ldd	r24, Z+2	; 0x02
    2bb6:	93 81       	ldd	r25, Z+3	; 0x03
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e2       	ldi	r20, 0x20	; 32
    2bbe:	51 e4       	ldi	r21, 0x41	; 65
    2bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	8e 01       	movw	r16, r28
    2bca:	05 5b       	subi	r16, 0xB5	; 181
    2bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bce:	bc 01       	movw	r22, r24
    2bd0:	cd 01       	movw	r24, r26
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	f8 01       	movw	r30, r16
    2bdc:	91 83       	std	Z+1, r25	; 0x01
    2bde:	80 83       	st	Z, r24
    2be0:	1f c0       	rjmp	.+62     	; 0x2c20 <LCD_Mode+0x60e>
    2be2:	fe 01       	movw	r30, r28
    2be4:	e7 5b       	subi	r30, 0xB7	; 183
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	89 e1       	ldi	r24, 0x19	; 25
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	80 83       	st	Z, r24
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e7 5b       	subi	r30, 0xB7	; 183
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	80 81       	ld	r24, Z
    2bf8:	91 81       	ldd	r25, Z+1	; 0x01
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <LCD_Mode+0x5e8>
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e7 5b       	subi	r30, 0xB7	; 183
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c08:	de 01       	movw	r26, r28
    2c0a:	a5 5b       	subi	r26, 0xB5	; 181
    2c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e5 5b       	subi	r30, 0xB5	; 181
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	80 81       	ld	r24, Z
    2c16:	91 81       	ldd	r25, Z+1	; 0x01
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	11 96       	adiw	r26, 0x01	; 1
    2c1c:	9c 93       	st	X, r25
    2c1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c20:	fe 01       	movw	r30, r28
    2c22:	e5 5b       	subi	r30, 0xB5	; 181
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 81       	ld	r24, Z
    2c28:	91 81       	ldd	r25, Z+1	; 0x01
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	d1 f6       	brne	.-76     	; 0x2be2 <LCD_Mode+0x5d0>
    2c2e:	27 c0       	rjmp	.+78     	; 0x2c7e <LCD_Mode+0x66c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	8e 01       	movw	r16, r28
    2c32:	05 5b       	subi	r16, 0xB5	; 181
    2c34:	1f 4f       	sbci	r17, 0xFF	; 255
    2c36:	fe 01       	movw	r30, r28
    2c38:	e3 5b       	subi	r30, 0xB3	; 179
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	80 83       	st	Z, r24
    2c52:	de 01       	movw	r26, r28
    2c54:	a9 5b       	subi	r26, 0xB9	; 185
    2c56:	bf 4f       	sbci	r27, 0xFF	; 255
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e5 5b       	subi	r30, 0xB5	; 181
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	80 81       	ld	r24, Z
    2c60:	91 81       	ldd	r25, Z+1	; 0x01
    2c62:	8d 93       	st	X+, r24
    2c64:	9c 93       	st	X, r25
    2c66:	fe 01       	movw	r30, r28
    2c68:	e9 5b       	subi	r30, 0xB9	; 185
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	80 81       	ld	r24, Z
    2c6e:	91 81       	ldd	r25, Z+1	; 0x01
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	f1 f7       	brne	.-4      	; 0x2c70 <LCD_Mode+0x65e>
    2c74:	fe 01       	movw	r30, r28
    2c76:	e9 5b       	subi	r30, 0xB9	; 185
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	91 83       	std	Z+1, r25	; 0x01
    2c7c:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_CLear();
    2c7e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_CLear>
    2c82:	8e cd       	rjmp	.-1252   	; 0x27a0 <LCD_Mode+0x18e>
/*******************************************************************************************/
	/*LCD Mod8*/
	case 8:
		while(1)
		{
			for(count=0;count<count2;count++)
    2c84:	fe 01       	movw	r30, r28
    2c86:	eb 59       	subi	r30, 0x9B	; 155
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	10 82       	st	Z, r1
    2c8c:	0c c0       	rjmp	.+24     	; 0x2ca6 <LCD_Mode+0x694>
				LCD_WriteData(' ');
    2c8e:	80 e2       	ldi	r24, 0x20	; 32
    2c90:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
/*******************************************************************************************/
	/*LCD Mod8*/
	case 8:
		while(1)
		{
			for(count=0;count<count2;count++)
    2c94:	de 01       	movw	r26, r28
    2c96:	ab 59       	subi	r26, 0x9B	; 155
    2c98:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	eb 59       	subi	r30, 0x9B	; 155
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8f 5f       	subi	r24, 0xFF	; 255
    2ca4:	8c 93       	st	X, r24
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	eb 59       	subi	r30, 0x9B	; 155
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	de 01       	movw	r26, r28
    2cae:	ac 59       	subi	r26, 0x9C	; 156
    2cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb2:	90 81       	ld	r25, Z
    2cb4:	8c 91       	ld	r24, X
    2cb6:	98 17       	cp	r25, r24
    2cb8:	54 f3       	brlt	.-44     	; 0x2c8e <LCD_Mode+0x67c>
				LCD_WriteData(' ');
			for(count=0;count<3;count++)
    2cba:	fe 01       	movw	r30, r28
    2cbc:	eb 59       	subi	r30, 0x9B	; 155
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	10 82       	st	Z, r1
    2cc2:	1c c0       	rjmp	.+56     	; 0x2cfc <LCD_Mode+0x6ea>
				LCD_WriteData(*(data1+count));
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	eb 59       	subi	r30, 0x9B	; 155
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	28 2f       	mov	r18, r24
    2cce:	33 27       	eor	r19, r19
    2cd0:	27 fd       	sbrc	r18, 7
    2cd2:	30 95       	com	r19
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	e8 59       	subi	r30, 0x98	; 152
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	80 81       	ld	r24, Z
    2cdc:	91 81       	ldd	r25, Z+1	; 0x01
    2cde:	fc 01       	movw	r30, r24
    2ce0:	e2 0f       	add	r30, r18
    2ce2:	f3 1f       	adc	r31, r19
    2ce4:	80 81       	ld	r24, Z
    2ce6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	case 8:
		while(1)
		{
			for(count=0;count<count2;count++)
				LCD_WriteData(' ');
			for(count=0;count<3;count++)
    2cea:	de 01       	movw	r26, r28
    2cec:	ab 59       	subi	r26, 0x9B	; 155
    2cee:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	eb 59       	subi	r30, 0x9B	; 155
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 81       	ld	r24, Z
    2cf8:	8f 5f       	subi	r24, 0xFF	; 255
    2cfa:	8c 93       	st	X, r24
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	eb 59       	subi	r30, 0x9B	; 155
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	80 81       	ld	r24, Z
    2d04:	83 30       	cpi	r24, 0x03	; 3
    2d06:	f4 f2       	brlt	.-68     	; 0x2cc4 <LCD_Mode+0x6b2>
				LCD_WriteData(*(data1+count));

			LCD_WriteCommand(0xc0);
    2d08:	80 ec       	ldi	r24, 0xC0	; 192
    2d0a:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
			for(count=13-count2;count>0;count--)
    2d0e:	fe 01       	movw	r30, r28
    2d10:	ec 59       	subi	r30, 0x9C	; 156
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	90 81       	ld	r25, Z
    2d16:	8d e0       	ldi	r24, 0x0D	; 13
    2d18:	89 1b       	sub	r24, r25
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	eb 59       	subi	r30, 0x9B	; 155
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	80 83       	st	Z, r24
    2d22:	0c c0       	rjmp	.+24     	; 0x2d3c <LCD_Mode+0x72a>
				LCD_WriteData(' ');
    2d24:	80 e2       	ldi	r24, 0x20	; 32
    2d26:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
				LCD_WriteData(' ');
			for(count=0;count<3;count++)
				LCD_WriteData(*(data1+count));

			LCD_WriteCommand(0xc0);
			for(count=13-count2;count>0;count--)
    2d2a:	de 01       	movw	r26, r28
    2d2c:	ab 59       	subi	r26, 0x9B	; 155
    2d2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d30:	fe 01       	movw	r30, r28
    2d32:	eb 59       	subi	r30, 0x9B	; 155
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 81       	ld	r24, Z
    2d38:	81 50       	subi	r24, 0x01	; 1
    2d3a:	8c 93       	st	X, r24
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	eb 59       	subi	r30, 0x9B	; 155
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 81       	ld	r24, Z
    2d44:	18 16       	cp	r1, r24
    2d46:	74 f3       	brlt	.-36     	; 0x2d24 <LCD_Mode+0x712>
				LCD_WriteData(' ');
			for(count=0;count<3;count++)
    2d48:	fe 01       	movw	r30, r28
    2d4a:	eb 59       	subi	r30, 0x9B	; 155
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	10 82       	st	Z, r1
    2d50:	1c c0       	rjmp	.+56     	; 0x2d8a <LCD_Mode+0x778>
				LCD_WriteData(*(data2+count));
    2d52:	fe 01       	movw	r30, r28
    2d54:	eb 59       	subi	r30, 0x9B	; 155
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	33 27       	eor	r19, r19
    2d5e:	27 fd       	sbrc	r18, 7
    2d60:	30 95       	com	r19
    2d62:	fe 01       	movw	r30, r28
    2d64:	ea 59       	subi	r30, 0x9A	; 154
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	e2 0f       	add	r30, r18
    2d70:	f3 1f       	adc	r31, r19
    2d72:	80 81       	ld	r24, Z
    2d74:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
				LCD_WriteData(*(data1+count));

			LCD_WriteCommand(0xc0);
			for(count=13-count2;count>0;count--)
				LCD_WriteData(' ');
			for(count=0;count<3;count++)
    2d78:	de 01       	movw	r26, r28
    2d7a:	ab 59       	subi	r26, 0x9B	; 155
    2d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d7e:	fe 01       	movw	r30, r28
    2d80:	eb 59       	subi	r30, 0x9B	; 155
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 81       	ld	r24, Z
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	8c 93       	st	X, r24
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	eb 59       	subi	r30, 0x9B	; 155
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	80 81       	ld	r24, Z
    2d92:	83 30       	cpi	r24, 0x03	; 3
    2d94:	f4 f2       	brlt	.-68     	; 0x2d52 <LCD_Mode+0x740>
				LCD_WriteData(*(data2+count));

			count2++;
    2d96:	de 01       	movw	r26, r28
    2d98:	ac 59       	subi	r26, 0x9C	; 156
    2d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	ec 59       	subi	r30, 0x9C	; 156
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 81       	ld	r24, Z
    2da4:	8f 5f       	subi	r24, 0xFF	; 255
    2da6:	8c 93       	st	X, r24
			if(count2>13)
    2da8:	fe 01       	movw	r30, r28
    2daa:	ec 59       	subi	r30, 0x9C	; 156
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 81       	ld	r24, Z
    2db0:	8e 30       	cpi	r24, 0x0E	; 14
    2db2:	24 f0       	brlt	.+8      	; 0x2dbc <LCD_Mode+0x7aa>
				count2=0;
    2db4:	fe 01       	movw	r30, r28
    2db6:	ec 59       	subi	r30, 0x9C	; 156
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	10 82       	st	Z, r1
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	ed 5b       	subi	r30, 0xBD	; 189
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	aa e7       	ldi	r26, 0x7A	; 122
    2dc8:	b4 e4       	ldi	r27, 0x44	; 68
    2dca:	80 83       	st	Z, r24
    2dcc:	91 83       	std	Z+1, r25	; 0x01
    2dce:	a2 83       	std	Z+2, r26	; 0x02
    2dd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd2:	8e 01       	movw	r16, r28
    2dd4:	01 5c       	subi	r16, 0xC1	; 193
    2dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd8:	fe 01       	movw	r30, r28
    2dda:	ed 5b       	subi	r30, 0xBD	; 189
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	60 81       	ld	r22, Z
    2de0:	71 81       	ldd	r23, Z+1	; 0x01
    2de2:	82 81       	ldd	r24, Z+2	; 0x02
    2de4:	93 81       	ldd	r25, Z+3	; 0x03
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	4a e7       	ldi	r20, 0x7A	; 122
    2dec:	53 e4       	ldi	r21, 0x43	; 67
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	f8 01       	movw	r30, r16
    2df8:	80 83       	st	Z, r24
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	a2 83       	std	Z+2, r26	; 0x02
    2dfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e00:	fe 01       	movw	r30, r28
    2e02:	ff 96       	adiw	r30, 0x3f	; 63
    2e04:	60 81       	ld	r22, Z
    2e06:	71 81       	ldd	r23, Z+1	; 0x01
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e8       	ldi	r20, 0x80	; 128
    2e12:	5f e3       	ldi	r21, 0x3F	; 63
    2e14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e18:	88 23       	and	r24, r24
    2e1a:	2c f4       	brge	.+10     	; 0x2e26 <LCD_Mode+0x814>
		__ticks = 1;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	9e af       	std	Y+62, r25	; 0x3e
    2e22:	8d af       	std	Y+61, r24	; 0x3d
    2e24:	46 c0       	rjmp	.+140    	; 0x2eb2 <LCD_Mode+0x8a0>
	else if (__tmp > 65535)
    2e26:	fe 01       	movw	r30, r28
    2e28:	ff 96       	adiw	r30, 0x3f	; 63
    2e2a:	60 81       	ld	r22, Z
    2e2c:	71 81       	ldd	r23, Z+1	; 0x01
    2e2e:	82 81       	ldd	r24, Z+2	; 0x02
    2e30:	93 81       	ldd	r25, Z+3	; 0x03
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	3f ef       	ldi	r19, 0xFF	; 255
    2e36:	4f e7       	ldi	r20, 0x7F	; 127
    2e38:	57 e4       	ldi	r21, 0x47	; 71
    2e3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e3e:	18 16       	cp	r1, r24
    2e40:	64 f5       	brge	.+88     	; 0x2e9a <LCD_Mode+0x888>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e42:	fe 01       	movw	r30, r28
    2e44:	ed 5b       	subi	r30, 0xBD	; 189
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	60 81       	ld	r22, Z
    2e4a:	71 81       	ldd	r23, Z+1	; 0x01
    2e4c:	82 81       	ldd	r24, Z+2	; 0x02
    2e4e:	93 81       	ldd	r25, Z+3	; 0x03
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e2       	ldi	r20, 0x20	; 32
    2e56:	51 e4       	ldi	r21, 0x41	; 65
    2e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	bc 01       	movw	r22, r24
    2e62:	cd 01       	movw	r24, r26
    2e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	9e af       	std	Y+62, r25	; 0x3e
    2e6e:	8d af       	std	Y+61, r24	; 0x3d
    2e70:	0f c0       	rjmp	.+30     	; 0x2e90 <LCD_Mode+0x87e>
    2e72:	89 e1       	ldi	r24, 0x19	; 25
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	9c af       	std	Y+60, r25	; 0x3c
    2e78:	8b af       	std	Y+59, r24	; 0x3b
    2e7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e7c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	f1 f7       	brne	.-4      	; 0x2e7e <LCD_Mode+0x86c>
    2e82:	9c af       	std	Y+60, r25	; 0x3c
    2e84:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e86:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e88:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	9e af       	std	Y+62, r25	; 0x3e
    2e8e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e90:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e92:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e94:	00 97       	sbiw	r24, 0x00	; 0
    2e96:	69 f7       	brne	.-38     	; 0x2e72 <LCD_Mode+0x860>
    2e98:	16 c0       	rjmp	.+44     	; 0x2ec6 <LCD_Mode+0x8b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	ff 96       	adiw	r30, 0x3f	; 63
    2e9e:	60 81       	ld	r22, Z
    2ea0:	71 81       	ldd	r23, Z+1	; 0x01
    2ea2:	82 81       	ldd	r24, Z+2	; 0x02
    2ea4:	93 81       	ldd	r25, Z+3	; 0x03
    2ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	9e af       	std	Y+62, r25	; 0x3e
    2eb0:	8d af       	std	Y+61, r24	; 0x3d
    2eb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eb6:	9a af       	std	Y+58, r25	; 0x3a
    2eb8:	89 af       	std	Y+57, r24	; 0x39
    2eba:	89 ad       	ldd	r24, Y+57	; 0x39
    2ebc:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	f1 f7       	brne	.-4      	; 0x2ebe <LCD_Mode+0x8ac>
    2ec2:	9a af       	std	Y+58, r25	; 0x3a
    2ec4:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			LCD_CLear();
    2ec6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_CLear>
    2eca:	dc ce       	rjmp	.-584    	; 0x2c84 <LCD_Mode+0x672>
/*******************************************************************************************/
	/*LCD Mod7*/
	case 7:
		while(1)
		{
			if(count2%2)
    2ecc:	fe 01       	movw	r30, r28
    2ece:	ec 59       	subi	r30, 0x9C	; 156
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	88 2f       	mov	r24, r24
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	81 70       	andi	r24, 0x01	; 1
    2eda:	90 70       	andi	r25, 0x00	; 0
    2edc:	88 23       	and	r24, r24
    2ede:	19 f0       	breq	.+6      	; 0x2ee6 <LCD_Mode+0x8d4>
				LCD_WriteCommand(0xc0);
    2ee0:	80 ec       	ldi	r24, 0xC0	; 192
    2ee2:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
			for(count=2*count2;count>0;count--)
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	ec 59       	subi	r30, 0x9C	; 156
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	80 81       	ld	r24, Z
    2eee:	99 27       	eor	r25, r25
    2ef0:	87 fd       	sbrc	r24, 7
    2ef2:	90 95       	com	r25
    2ef4:	88 0f       	add	r24, r24
    2ef6:	99 1f       	adc	r25, r25
    2ef8:	fe 01       	movw	r30, r28
    2efa:	eb 59       	subi	r30, 0x9B	; 155
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	80 83       	st	Z, r24
    2f00:	0c c0       	rjmp	.+24     	; 0x2f1a <LCD_Mode+0x908>
				LCD_WriteData(' ');
    2f02:	80 e2       	ldi	r24, 0x20	; 32
    2f04:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	case 7:
		while(1)
		{
			if(count2%2)
				LCD_WriteCommand(0xc0);
			for(count=2*count2;count>0;count--)
    2f08:	de 01       	movw	r26, r28
    2f0a:	ab 59       	subi	r26, 0x9B	; 155
    2f0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f0e:	fe 01       	movw	r30, r28
    2f10:	eb 59       	subi	r30, 0x9B	; 155
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 81       	ld	r24, Z
    2f16:	81 50       	subi	r24, 0x01	; 1
    2f18:	8c 93       	st	X, r24
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	eb 59       	subi	r30, 0x9B	; 155
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	80 81       	ld	r24, Z
    2f22:	18 16       	cp	r1, r24
    2f24:	74 f3       	brlt	.-36     	; 0x2f02 <LCD_Mode+0x8f0>
				LCD_WriteData(' ');
			for(count=0;count<4;count++)
    2f26:	fe 01       	movw	r30, r28
    2f28:	eb 59       	subi	r30, 0x9B	; 155
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	10 82       	st	Z, r1
    2f2e:	1c c0       	rjmp	.+56     	; 0x2f68 <LCD_Mode+0x956>
				LCD_WriteData(*(data+count));
    2f30:	fe 01       	movw	r30, r28
    2f32:	eb 59       	subi	r30, 0x9B	; 155
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 81       	ld	r24, Z
    2f38:	28 2f       	mov	r18, r24
    2f3a:	33 27       	eor	r19, r19
    2f3c:	27 fd       	sbrc	r18, 7
    2f3e:	30 95       	com	r19
    2f40:	fe 01       	movw	r30, r28
    2f42:	e6 59       	subi	r30, 0x96	; 150
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 81       	ld	r24, Z
    2f48:	91 81       	ldd	r25, Z+1	; 0x01
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	e2 0f       	add	r30, r18
    2f4e:	f3 1f       	adc	r31, r19
    2f50:	80 81       	ld	r24, Z
    2f52:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
		{
			if(count2%2)
				LCD_WriteCommand(0xc0);
			for(count=2*count2;count>0;count--)
				LCD_WriteData(' ');
			for(count=0;count<4;count++)
    2f56:	de 01       	movw	r26, r28
    2f58:	ab 59       	subi	r26, 0x9B	; 155
    2f5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	eb 59       	subi	r30, 0x9B	; 155
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	80 81       	ld	r24, Z
    2f64:	8f 5f       	subi	r24, 0xFF	; 255
    2f66:	8c 93       	st	X, r24
    2f68:	fe 01       	movw	r30, r28
    2f6a:	eb 59       	subi	r30, 0x9B	; 155
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	80 81       	ld	r24, Z
    2f70:	84 30       	cpi	r24, 0x04	; 4
    2f72:	f4 f2       	brlt	.-68     	; 0x2f30 <LCD_Mode+0x91e>
				LCD_WriteData(*(data+count));
			count2++;
    2f74:	de 01       	movw	r26, r28
    2f76:	ac 59       	subi	r26, 0x9C	; 156
    2f78:	bf 4f       	sbci	r27, 0xFF	; 255
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	ec 59       	subi	r30, 0x9C	; 156
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	80 81       	ld	r24, Z
    2f82:	8f 5f       	subi	r24, 0xFF	; 255
    2f84:	8c 93       	st	X, r24
			if(count2>5)
    2f86:	fe 01       	movw	r30, r28
    2f88:	ec 59       	subi	r30, 0x9C	; 156
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	80 81       	ld	r24, Z
    2f8e:	86 30       	cpi	r24, 0x06	; 6
    2f90:	24 f0       	brlt	.+8      	; 0x2f9a <LCD_Mode+0x988>
				count2=0;
    2f92:	fe 01       	movw	r30, r28
    2f94:	ec 59       	subi	r30, 0x9C	; 156
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	10 82       	st	Z, r1
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	aa e7       	ldi	r26, 0x7A	; 122
    2fa0:	b4 e4       	ldi	r27, 0x44	; 68
    2fa2:	8d ab       	std	Y+53, r24	; 0x35
    2fa4:	9e ab       	std	Y+54, r25	; 0x36
    2fa6:	af ab       	std	Y+55, r26	; 0x37
    2fa8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2faa:	6d a9       	ldd	r22, Y+53	; 0x35
    2fac:	7e a9       	ldd	r23, Y+54	; 0x36
    2fae:	8f a9       	ldd	r24, Y+55	; 0x37
    2fb0:	98 ad       	ldd	r25, Y+56	; 0x38
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	4a e7       	ldi	r20, 0x7A	; 122
    2fb8:	53 e4       	ldi	r21, 0x43	; 67
    2fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	89 ab       	std	Y+49, r24	; 0x31
    2fc4:	9a ab       	std	Y+50, r25	; 0x32
    2fc6:	ab ab       	std	Y+51, r26	; 0x33
    2fc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fca:	69 a9       	ldd	r22, Y+49	; 0x31
    2fcc:	7a a9       	ldd	r23, Y+50	; 0x32
    2fce:	8b a9       	ldd	r24, Y+51	; 0x33
    2fd0:	9c a9       	ldd	r25, Y+52	; 0x34
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e8       	ldi	r20, 0x80	; 128
    2fd8:	5f e3       	ldi	r21, 0x3F	; 63
    2fda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fde:	88 23       	and	r24, r24
    2fe0:	2c f4       	brge	.+10     	; 0x2fec <LCD_Mode+0x9da>
		__ticks = 1;
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	98 ab       	std	Y+48, r25	; 0x30
    2fe8:	8f a7       	std	Y+47, r24	; 0x2f
    2fea:	3f c0       	rjmp	.+126    	; 0x306a <LCD_Mode+0xa58>
	else if (__tmp > 65535)
    2fec:	69 a9       	ldd	r22, Y+49	; 0x31
    2fee:	7a a9       	ldd	r23, Y+50	; 0x32
    2ff0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ff2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	3f ef       	ldi	r19, 0xFF	; 255
    2ff8:	4f e7       	ldi	r20, 0x7F	; 127
    2ffa:	57 e4       	ldi	r21, 0x47	; 71
    2ffc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3000:	18 16       	cp	r1, r24
    3002:	4c f5       	brge	.+82     	; 0x3056 <LCD_Mode+0xa44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3004:	6d a9       	ldd	r22, Y+53	; 0x35
    3006:	7e a9       	ldd	r23, Y+54	; 0x36
    3008:	8f a9       	ldd	r24, Y+55	; 0x37
    300a:	98 ad       	ldd	r25, Y+56	; 0x38
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e2       	ldi	r20, 0x20	; 32
    3012:	51 e4       	ldi	r21, 0x41	; 65
    3014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	98 ab       	std	Y+48, r25	; 0x30
    302a:	8f a7       	std	Y+47, r24	; 0x2f
    302c:	0f c0       	rjmp	.+30     	; 0x304c <LCD_Mode+0xa3a>
    302e:	89 e1       	ldi	r24, 0x19	; 25
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9e a7       	std	Y+46, r25	; 0x2e
    3034:	8d a7       	std	Y+45, r24	; 0x2d
    3036:	8d a5       	ldd	r24, Y+45	; 0x2d
    3038:	9e a5       	ldd	r25, Y+46	; 0x2e
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <LCD_Mode+0xa28>
    303e:	9e a7       	std	Y+46, r25	; 0x2e
    3040:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3042:	8f a5       	ldd	r24, Y+47	; 0x2f
    3044:	98 a9       	ldd	r25, Y+48	; 0x30
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	98 ab       	std	Y+48, r25	; 0x30
    304a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304c:	8f a5       	ldd	r24, Y+47	; 0x2f
    304e:	98 a9       	ldd	r25, Y+48	; 0x30
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	69 f7       	brne	.-38     	; 0x302e <LCD_Mode+0xa1c>
    3054:	14 c0       	rjmp	.+40     	; 0x307e <LCD_Mode+0xa6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3056:	69 a9       	ldd	r22, Y+49	; 0x31
    3058:	7a a9       	ldd	r23, Y+50	; 0x32
    305a:	8b a9       	ldd	r24, Y+51	; 0x33
    305c:	9c a9       	ldd	r25, Y+52	; 0x34
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	98 ab       	std	Y+48, r25	; 0x30
    3068:	8f a7       	std	Y+47, r24	; 0x2f
    306a:	8f a5       	ldd	r24, Y+47	; 0x2f
    306c:	98 a9       	ldd	r25, Y+48	; 0x30
    306e:	9c a7       	std	Y+44, r25	; 0x2c
    3070:	8b a7       	std	Y+43, r24	; 0x2b
    3072:	8b a5       	ldd	r24, Y+43	; 0x2b
    3074:	9c a5       	ldd	r25, Y+44	; 0x2c
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	f1 f7       	brne	.-4      	; 0x3076 <LCD_Mode+0xa64>
    307a:	9c a7       	std	Y+44, r25	; 0x2c
    307c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			LCD_CLear();
    307e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_CLear>
    3082:	24 cf       	rjmp	.-440    	; 0x2ecc <LCD_Mode+0x8ba>
/*******************************************************************************************/
	/*LCD Mod6*/
	case 6:
		while(1)
		{
			if(count2<16)
    3084:	fe 01       	movw	r30, r28
    3086:	ec 59       	subi	r30, 0x9C	; 156
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	80 31       	cpi	r24, 0x10	; 16
    308e:	0c f0       	brlt	.+2      	; 0x3092 <LCD_Mode+0xa80>
    3090:	a2 c0       	rjmp	.+324    	; 0x31d6 <LCD_Mode+0xbc4>
			{
				for(count=0;count<count2;count++)
    3092:	fe 01       	movw	r30, r28
    3094:	eb 59       	subi	r30, 0x9B	; 155
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	10 82       	st	Z, r1
    309a:	0c c0       	rjmp	.+24     	; 0x30b4 <LCD_Mode+0xaa2>
					LCD_WriteData(' ');
    309c:	80 e2       	ldi	r24, 0x20	; 32
    309e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	case 6:
		while(1)
		{
			if(count2<16)
			{
				for(count=0;count<count2;count++)
    30a2:	de 01       	movw	r26, r28
    30a4:	ab 59       	subi	r26, 0x9B	; 155
    30a6:	bf 4f       	sbci	r27, 0xFF	; 255
    30a8:	fe 01       	movw	r30, r28
    30aa:	eb 59       	subi	r30, 0x9B	; 155
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	80 81       	ld	r24, Z
    30b0:	8f 5f       	subi	r24, 0xFF	; 255
    30b2:	8c 93       	st	X, r24
    30b4:	fe 01       	movw	r30, r28
    30b6:	eb 59       	subi	r30, 0x9B	; 155
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	de 01       	movw	r26, r28
    30bc:	ac 59       	subi	r26, 0x9C	; 156
    30be:	bf 4f       	sbci	r27, 0xFF	; 255
    30c0:	90 81       	ld	r25, Z
    30c2:	8c 91       	ld	r24, X
    30c4:	98 17       	cp	r25, r24
    30c6:	54 f3       	brlt	.-44     	; 0x309c <LCD_Mode+0xa8a>
					LCD_WriteData(' ');
				for(count=0;count<10;count++)
    30c8:	fe 01       	movw	r30, r28
    30ca:	eb 59       	subi	r30, 0x9B	; 155
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	10 82       	st	Z, r1
    30d0:	1c c0       	rjmp	.+56     	; 0x310a <LCD_Mode+0xaf8>
					LCD_WriteData(*(data+count));
    30d2:	fe 01       	movw	r30, r28
    30d4:	eb 59       	subi	r30, 0x9B	; 155
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	80 81       	ld	r24, Z
    30da:	28 2f       	mov	r18, r24
    30dc:	33 27       	eor	r19, r19
    30de:	27 fd       	sbrc	r18, 7
    30e0:	30 95       	com	r19
    30e2:	fe 01       	movw	r30, r28
    30e4:	e6 59       	subi	r30, 0x96	; 150
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	80 81       	ld	r24, Z
    30ea:	91 81       	ldd	r25, Z+1	; 0x01
    30ec:	fc 01       	movw	r30, r24
    30ee:	e2 0f       	add	r30, r18
    30f0:	f3 1f       	adc	r31, r19
    30f2:	80 81       	ld	r24, Z
    30f4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
		{
			if(count2<16)
			{
				for(count=0;count<count2;count++)
					LCD_WriteData(' ');
				for(count=0;count<10;count++)
    30f8:	de 01       	movw	r26, r28
    30fa:	ab 59       	subi	r26, 0x9B	; 155
    30fc:	bf 4f       	sbci	r27, 0xFF	; 255
    30fe:	fe 01       	movw	r30, r28
    3100:	eb 59       	subi	r30, 0x9B	; 155
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	80 81       	ld	r24, Z
    3106:	8f 5f       	subi	r24, 0xFF	; 255
    3108:	8c 93       	st	X, r24
    310a:	fe 01       	movw	r30, r28
    310c:	eb 59       	subi	r30, 0x9B	; 155
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	80 81       	ld	r24, Z
    3112:	8a 30       	cpi	r24, 0x0A	; 10
    3114:	f4 f2       	brlt	.-68     	; 0x30d2 <LCD_Mode+0xac0>
					LCD_WriteData(*(data+count));
				if (count2>6)
    3116:	fe 01       	movw	r30, r28
    3118:	ec 59       	subi	r30, 0x9C	; 156
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	80 81       	ld	r24, Z
    311e:	87 30       	cpi	r24, 0x07	; 7
    3120:	0c f4       	brge	.+2      	; 0x3124 <LCD_Mode+0xb12>
    3122:	16 c1       	rjmp	.+556    	; 0x3350 <LCD_Mode+0xd3e>
				{
					LCD_WriteCommand(0xc0);
    3124:	80 ec       	ldi	r24, 0xC0	; 192
    3126:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
					for(count=0;count<22-count2;count++)
    312a:	fe 01       	movw	r30, r28
    312c:	eb 59       	subi	r30, 0x9B	; 155
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	10 82       	st	Z, r1
    3132:	0c c0       	rjmp	.+24     	; 0x314c <LCD_Mode+0xb3a>
						LCD_WriteData(' ');
    3134:	80 e2       	ldi	r24, 0x20	; 32
    3136:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
				for(count=0;count<10;count++)
					LCD_WriteData(*(data+count));
				if (count2>6)
				{
					LCD_WriteCommand(0xc0);
					for(count=0;count<22-count2;count++)
    313a:	de 01       	movw	r26, r28
    313c:	ab 59       	subi	r26, 0x9B	; 155
    313e:	bf 4f       	sbci	r27, 0xFF	; 255
    3140:	fe 01       	movw	r30, r28
    3142:	eb 59       	subi	r30, 0x9B	; 155
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 81       	ld	r24, Z
    3148:	8f 5f       	subi	r24, 0xFF	; 255
    314a:	8c 93       	st	X, r24
    314c:	fe 01       	movw	r30, r28
    314e:	eb 59       	subi	r30, 0x9B	; 155
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	80 81       	ld	r24, Z
    3154:	48 2f       	mov	r20, r24
    3156:	55 27       	eor	r21, r21
    3158:	47 fd       	sbrc	r20, 7
    315a:	50 95       	com	r21
    315c:	fe 01       	movw	r30, r28
    315e:	ec 59       	subi	r30, 0x9C	; 156
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	80 81       	ld	r24, Z
    3164:	28 2f       	mov	r18, r24
    3166:	33 27       	eor	r19, r19
    3168:	27 fd       	sbrc	r18, 7
    316a:	30 95       	com	r19
    316c:	86 e1       	ldi	r24, 0x16	; 22
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	82 1b       	sub	r24, r18
    3172:	93 0b       	sbc	r25, r19
    3174:	48 17       	cp	r20, r24
    3176:	59 07       	cpc	r21, r25
    3178:	ec f2       	brlt	.-70     	; 0x3134 <LCD_Mode+0xb22>
						LCD_WriteData(' ');

					for(count=16-count2;count<10;count++)
    317a:	fe 01       	movw	r30, r28
    317c:	ec 59       	subi	r30, 0x9C	; 156
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	90 81       	ld	r25, Z
    3182:	80 e1       	ldi	r24, 0x10	; 16
    3184:	89 1b       	sub	r24, r25
    3186:	fe 01       	movw	r30, r28
    3188:	eb 59       	subi	r30, 0x9B	; 155
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	80 83       	st	Z, r24
    318e:	1c c0       	rjmp	.+56     	; 0x31c8 <LCD_Mode+0xbb6>
						LCD_WriteData(*(data+count));
    3190:	fe 01       	movw	r30, r28
    3192:	eb 59       	subi	r30, 0x9B	; 155
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	80 81       	ld	r24, Z
    3198:	28 2f       	mov	r18, r24
    319a:	33 27       	eor	r19, r19
    319c:	27 fd       	sbrc	r18, 7
    319e:	30 95       	com	r19
    31a0:	fe 01       	movw	r30, r28
    31a2:	e6 59       	subi	r30, 0x96	; 150
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	80 81       	ld	r24, Z
    31a8:	91 81       	ldd	r25, Z+1	; 0x01
    31aa:	fc 01       	movw	r30, r24
    31ac:	e2 0f       	add	r30, r18
    31ae:	f3 1f       	adc	r31, r19
    31b0:	80 81       	ld	r24, Z
    31b2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
				{
					LCD_WriteCommand(0xc0);
					for(count=0;count<22-count2;count++)
						LCD_WriteData(' ');

					for(count=16-count2;count<10;count++)
    31b6:	de 01       	movw	r26, r28
    31b8:	ab 59       	subi	r26, 0x9B	; 155
    31ba:	bf 4f       	sbci	r27, 0xFF	; 255
    31bc:	fe 01       	movw	r30, r28
    31be:	eb 59       	subi	r30, 0x9B	; 155
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	80 81       	ld	r24, Z
    31c4:	8f 5f       	subi	r24, 0xFF	; 255
    31c6:	8c 93       	st	X, r24
    31c8:	fe 01       	movw	r30, r28
    31ca:	eb 59       	subi	r30, 0x9B	; 155
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	80 81       	ld	r24, Z
    31d0:	8a 30       	cpi	r24, 0x0A	; 10
    31d2:	f4 f2       	brlt	.-68     	; 0x3190 <LCD_Mode+0xb7e>
    31d4:	bd c0       	rjmp	.+378    	; 0x3350 <LCD_Mode+0xd3e>
						LCD_WriteData(*(data+count));
				}
			}

			else if(count2<22)
    31d6:	fe 01       	movw	r30, r28
    31d8:	ec 59       	subi	r30, 0x9C	; 156
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 81       	ld	r24, Z
    31de:	86 31       	cpi	r24, 0x16	; 22
    31e0:	0c f0       	brlt	.+2      	; 0x31e4 <LCD_Mode+0xbd2>
    31e2:	53 c0       	rjmp	.+166    	; 0x328a <LCD_Mode+0xc78>
				{
					LCD_WriteCommand(0xc0);
    31e4:	80 ec       	ldi	r24, 0xC0	; 192
    31e6:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
					for(count=0;count<22-count2;count++)
    31ea:	fe 01       	movw	r30, r28
    31ec:	eb 59       	subi	r30, 0x9B	; 155
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	10 82       	st	Z, r1
    31f2:	0c c0       	rjmp	.+24     	; 0x320c <LCD_Mode+0xbfa>
						LCD_WriteData(' ');
    31f4:	80 e2       	ldi	r24, 0x20	; 32
    31f6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
			}

			else if(count2<22)
				{
					LCD_WriteCommand(0xc0);
					for(count=0;count<22-count2;count++)
    31fa:	de 01       	movw	r26, r28
    31fc:	ab 59       	subi	r26, 0x9B	; 155
    31fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3200:	fe 01       	movw	r30, r28
    3202:	eb 59       	subi	r30, 0x9B	; 155
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	80 81       	ld	r24, Z
    3208:	8f 5f       	subi	r24, 0xFF	; 255
    320a:	8c 93       	st	X, r24
    320c:	fe 01       	movw	r30, r28
    320e:	eb 59       	subi	r30, 0x9B	; 155
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	80 81       	ld	r24, Z
    3214:	48 2f       	mov	r20, r24
    3216:	55 27       	eor	r21, r21
    3218:	47 fd       	sbrc	r20, 7
    321a:	50 95       	com	r21
    321c:	fe 01       	movw	r30, r28
    321e:	ec 59       	subi	r30, 0x9C	; 156
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	80 81       	ld	r24, Z
    3224:	28 2f       	mov	r18, r24
    3226:	33 27       	eor	r19, r19
    3228:	27 fd       	sbrc	r18, 7
    322a:	30 95       	com	r19
    322c:	86 e1       	ldi	r24, 0x16	; 22
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	82 1b       	sub	r24, r18
    3232:	93 0b       	sbc	r25, r19
    3234:	48 17       	cp	r20, r24
    3236:	59 07       	cpc	r21, r25
    3238:	ec f2       	brlt	.-70     	; 0x31f4 <LCD_Mode+0xbe2>
						LCD_WriteData(' ');

					for(count=0;count<10;count++)
    323a:	fe 01       	movw	r30, r28
    323c:	eb 59       	subi	r30, 0x9B	; 155
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	10 82       	st	Z, r1
    3242:	1c c0       	rjmp	.+56     	; 0x327c <LCD_Mode+0xc6a>
						LCD_WriteData(*(data+count));
    3244:	fe 01       	movw	r30, r28
    3246:	eb 59       	subi	r30, 0x9B	; 155
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	80 81       	ld	r24, Z
    324c:	28 2f       	mov	r18, r24
    324e:	33 27       	eor	r19, r19
    3250:	27 fd       	sbrc	r18, 7
    3252:	30 95       	com	r19
    3254:	fe 01       	movw	r30, r28
    3256:	e6 59       	subi	r30, 0x96	; 150
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	80 81       	ld	r24, Z
    325c:	91 81       	ldd	r25, Z+1	; 0x01
    325e:	fc 01       	movw	r30, r24
    3260:	e2 0f       	add	r30, r18
    3262:	f3 1f       	adc	r31, r19
    3264:	80 81       	ld	r24, Z
    3266:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
				{
					LCD_WriteCommand(0xc0);
					for(count=0;count<22-count2;count++)
						LCD_WriteData(' ');

					for(count=0;count<10;count++)
    326a:	de 01       	movw	r26, r28
    326c:	ab 59       	subi	r26, 0x9B	; 155
    326e:	bf 4f       	sbci	r27, 0xFF	; 255
    3270:	fe 01       	movw	r30, r28
    3272:	eb 59       	subi	r30, 0x9B	; 155
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	80 81       	ld	r24, Z
    3278:	8f 5f       	subi	r24, 0xFF	; 255
    327a:	8c 93       	st	X, r24
    327c:	fe 01       	movw	r30, r28
    327e:	eb 59       	subi	r30, 0x9B	; 155
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	80 81       	ld	r24, Z
    3284:	8a 30       	cpi	r24, 0x0A	; 10
    3286:	f4 f2       	brlt	.-68     	; 0x3244 <LCD_Mode+0xc32>
    3288:	63 c0       	rjmp	.+198    	; 0x3350 <LCD_Mode+0xd3e>
						LCD_WriteData(*(data+count));
				}
			else
			{
				for(count=0;count<=count2-22;count++)
    328a:	fe 01       	movw	r30, r28
    328c:	eb 59       	subi	r30, 0x9B	; 155
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	10 82       	st	Z, r1
    3292:	1c c0       	rjmp	.+56     	; 0x32cc <LCD_Mode+0xcba>
					LCD_WriteData(*(data+count));
    3294:	fe 01       	movw	r30, r28
    3296:	eb 59       	subi	r30, 0x9B	; 155
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	80 81       	ld	r24, Z
    329c:	28 2f       	mov	r18, r24
    329e:	33 27       	eor	r19, r19
    32a0:	27 fd       	sbrc	r18, 7
    32a2:	30 95       	com	r19
    32a4:	fe 01       	movw	r30, r28
    32a6:	e6 59       	subi	r30, 0x96	; 150
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	80 81       	ld	r24, Z
    32ac:	91 81       	ldd	r25, Z+1	; 0x01
    32ae:	fc 01       	movw	r30, r24
    32b0:	e2 0f       	add	r30, r18
    32b2:	f3 1f       	adc	r31, r19
    32b4:	80 81       	ld	r24, Z
    32b6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
					for(count=0;count<10;count++)
						LCD_WriteData(*(data+count));
				}
			else
			{
				for(count=0;count<=count2-22;count++)
    32ba:	de 01       	movw	r26, r28
    32bc:	ab 59       	subi	r26, 0x9B	; 155
    32be:	bf 4f       	sbci	r27, 0xFF	; 255
    32c0:	fe 01       	movw	r30, r28
    32c2:	eb 59       	subi	r30, 0x9B	; 155
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	80 81       	ld	r24, Z
    32c8:	8f 5f       	subi	r24, 0xFF	; 255
    32ca:	8c 93       	st	X, r24
    32cc:	fe 01       	movw	r30, r28
    32ce:	eb 59       	subi	r30, 0x9B	; 155
    32d0:	ff 4f       	sbci	r31, 0xFF	; 255
    32d2:	80 81       	ld	r24, Z
    32d4:	28 2f       	mov	r18, r24
    32d6:	33 27       	eor	r19, r19
    32d8:	27 fd       	sbrc	r18, 7
    32da:	30 95       	com	r19
    32dc:	fe 01       	movw	r30, r28
    32de:	ec 59       	subi	r30, 0x9C	; 156
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	80 81       	ld	r24, Z
    32e4:	99 27       	eor	r25, r25
    32e6:	87 fd       	sbrc	r24, 7
    32e8:	90 95       	com	r25
    32ea:	46 97       	sbiw	r24, 0x16	; 22
    32ec:	82 17       	cp	r24, r18
    32ee:	93 07       	cpc	r25, r19
    32f0:	8c f6       	brge	.-94     	; 0x3294 <LCD_Mode+0xc82>
					LCD_WriteData(*(data+count));

				LCD_WriteCommand(0xc0);
    32f2:	80 ec       	ldi	r24, 0xC0	; 192
    32f4:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
				for(count=count2-22;count<10;count++)
    32f8:	fe 01       	movw	r30, r28
    32fa:	ec 59       	subi	r30, 0x9C	; 156
    32fc:	ff 4f       	sbci	r31, 0xFF	; 255
    32fe:	80 81       	ld	r24, Z
    3300:	86 51       	subi	r24, 0x16	; 22
    3302:	fe 01       	movw	r30, r28
    3304:	eb 59       	subi	r30, 0x9B	; 155
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	80 83       	st	Z, r24
    330a:	1c c0       	rjmp	.+56     	; 0x3344 <LCD_Mode+0xd32>
					LCD_WriteData(*(data+count));
    330c:	fe 01       	movw	r30, r28
    330e:	eb 59       	subi	r30, 0x9B	; 155
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	80 81       	ld	r24, Z
    3314:	28 2f       	mov	r18, r24
    3316:	33 27       	eor	r19, r19
    3318:	27 fd       	sbrc	r18, 7
    331a:	30 95       	com	r19
    331c:	fe 01       	movw	r30, r28
    331e:	e6 59       	subi	r30, 0x96	; 150
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	80 81       	ld	r24, Z
    3324:	91 81       	ldd	r25, Z+1	; 0x01
    3326:	fc 01       	movw	r30, r24
    3328:	e2 0f       	add	r30, r18
    332a:	f3 1f       	adc	r31, r19
    332c:	80 81       	ld	r24, Z
    332e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
			{
				for(count=0;count<=count2-22;count++)
					LCD_WriteData(*(data+count));

				LCD_WriteCommand(0xc0);
				for(count=count2-22;count<10;count++)
    3332:	de 01       	movw	r26, r28
    3334:	ab 59       	subi	r26, 0x9B	; 155
    3336:	bf 4f       	sbci	r27, 0xFF	; 255
    3338:	fe 01       	movw	r30, r28
    333a:	eb 59       	subi	r30, 0x9B	; 155
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	80 81       	ld	r24, Z
    3340:	8f 5f       	subi	r24, 0xFF	; 255
    3342:	8c 93       	st	X, r24
    3344:	fe 01       	movw	r30, r28
    3346:	eb 59       	subi	r30, 0x9B	; 155
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 81       	ld	r24, Z
    334c:	8a 30       	cpi	r24, 0x0A	; 10
    334e:	f4 f2       	brlt	.-68     	; 0x330c <LCD_Mode+0xcfa>
					LCD_WriteData(*(data+count));
			}

			count2++;
    3350:	de 01       	movw	r26, r28
    3352:	ac 59       	subi	r26, 0x9C	; 156
    3354:	bf 4f       	sbci	r27, 0xFF	; 255
    3356:	fe 01       	movw	r30, r28
    3358:	ec 59       	subi	r30, 0x9C	; 156
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	80 81       	ld	r24, Z
    335e:	8f 5f       	subi	r24, 0xFF	; 255
    3360:	8c 93       	st	X, r24
			if(count2>30)
    3362:	fe 01       	movw	r30, r28
    3364:	ec 59       	subi	r30, 0x9C	; 156
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	80 81       	ld	r24, Z
    336a:	8f 31       	cpi	r24, 0x1F	; 31
    336c:	24 f0       	brlt	.+8      	; 0x3376 <LCD_Mode+0xd64>
				count2=0;
    336e:	fe 01       	movw	r30, r28
    3370:	ec 59       	subi	r30, 0x9C	; 156
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	10 82       	st	Z, r1
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	aa e7       	ldi	r26, 0x7A	; 122
    337c:	b4 e4       	ldi	r27, 0x44	; 68
    337e:	8f a3       	std	Y+39, r24	; 0x27
    3380:	98 a7       	std	Y+40, r25	; 0x28
    3382:	a9 a7       	std	Y+41, r26	; 0x29
    3384:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3386:	6f a1       	ldd	r22, Y+39	; 0x27
    3388:	78 a5       	ldd	r23, Y+40	; 0x28
    338a:	89 a5       	ldd	r24, Y+41	; 0x29
    338c:	9a a5       	ldd	r25, Y+42	; 0x2a
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	4a e7       	ldi	r20, 0x7A	; 122
    3394:	53 e4       	ldi	r21, 0x43	; 67
    3396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	8b a3       	std	Y+35, r24	; 0x23
    33a0:	9c a3       	std	Y+36, r25	; 0x24
    33a2:	ad a3       	std	Y+37, r26	; 0x25
    33a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33a6:	6b a1       	ldd	r22, Y+35	; 0x23
    33a8:	7c a1       	ldd	r23, Y+36	; 0x24
    33aa:	8d a1       	ldd	r24, Y+37	; 0x25
    33ac:	9e a1       	ldd	r25, Y+38	; 0x26
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e8       	ldi	r20, 0x80	; 128
    33b4:	5f e3       	ldi	r21, 0x3F	; 63
    33b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ba:	88 23       	and	r24, r24
    33bc:	2c f4       	brge	.+10     	; 0x33c8 <LCD_Mode+0xdb6>
		__ticks = 1;
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	9a a3       	std	Y+34, r25	; 0x22
    33c4:	89 a3       	std	Y+33, r24	; 0x21
    33c6:	3f c0       	rjmp	.+126    	; 0x3446 <LCD_Mode+0xe34>
	else if (__tmp > 65535)
    33c8:	6b a1       	ldd	r22, Y+35	; 0x23
    33ca:	7c a1       	ldd	r23, Y+36	; 0x24
    33cc:	8d a1       	ldd	r24, Y+37	; 0x25
    33ce:	9e a1       	ldd	r25, Y+38	; 0x26
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	3f ef       	ldi	r19, 0xFF	; 255
    33d4:	4f e7       	ldi	r20, 0x7F	; 127
    33d6:	57 e4       	ldi	r21, 0x47	; 71
    33d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33dc:	18 16       	cp	r1, r24
    33de:	4c f5       	brge	.+82     	; 0x3432 <LCD_Mode+0xe20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e0:	6f a1       	ldd	r22, Y+39	; 0x27
    33e2:	78 a5       	ldd	r23, Y+40	; 0x28
    33e4:	89 a5       	ldd	r24, Y+41	; 0x29
    33e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e2       	ldi	r20, 0x20	; 32
    33ee:	51 e4       	ldi	r21, 0x41	; 65
    33f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	bc 01       	movw	r22, r24
    33fa:	cd 01       	movw	r24, r26
    33fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	9a a3       	std	Y+34, r25	; 0x22
    3406:	89 a3       	std	Y+33, r24	; 0x21
    3408:	0f c0       	rjmp	.+30     	; 0x3428 <LCD_Mode+0xe16>
    340a:	89 e1       	ldi	r24, 0x19	; 25
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	98 a3       	std	Y+32, r25	; 0x20
    3410:	8f 8f       	std	Y+31, r24	; 0x1f
    3412:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3414:	98 a1       	ldd	r25, Y+32	; 0x20
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	f1 f7       	brne	.-4      	; 0x3416 <LCD_Mode+0xe04>
    341a:	98 a3       	std	Y+32, r25	; 0x20
    341c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341e:	89 a1       	ldd	r24, Y+33	; 0x21
    3420:	9a a1       	ldd	r25, Y+34	; 0x22
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	9a a3       	std	Y+34, r25	; 0x22
    3426:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3428:	89 a1       	ldd	r24, Y+33	; 0x21
    342a:	9a a1       	ldd	r25, Y+34	; 0x22
    342c:	00 97       	sbiw	r24, 0x00	; 0
    342e:	69 f7       	brne	.-38     	; 0x340a <LCD_Mode+0xdf8>
    3430:	14 c0       	rjmp	.+40     	; 0x345a <LCD_Mode+0xe48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3432:	6b a1       	ldd	r22, Y+35	; 0x23
    3434:	7c a1       	ldd	r23, Y+36	; 0x24
    3436:	8d a1       	ldd	r24, Y+37	; 0x25
    3438:	9e a1       	ldd	r25, Y+38	; 0x26
    343a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	9a a3       	std	Y+34, r25	; 0x22
    3444:	89 a3       	std	Y+33, r24	; 0x21
    3446:	89 a1       	ldd	r24, Y+33	; 0x21
    3448:	9a a1       	ldd	r25, Y+34	; 0x22
    344a:	9e 8f       	std	Y+30, r25	; 0x1e
    344c:	8d 8f       	std	Y+29, r24	; 0x1d
    344e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3450:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3452:	01 97       	sbiw	r24, 0x01	; 1
    3454:	f1 f7       	brne	.-4      	; 0x3452 <LCD_Mode+0xe40>
    3456:	9e 8f       	std	Y+30, r25	; 0x1e
    3458:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			LCD_CLear();
    345a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_CLear>
    345e:	12 ce       	rjmp	.-988    	; 0x3084 <LCD_Mode+0xa72>
/*******************************************************************************************/
	/*LCD Mod5*/
	case 5:
		while(1)
		{
			if(count2<16)
    3460:	fe 01       	movw	r30, r28
    3462:	ec 59       	subi	r30, 0x9C	; 156
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	80 81       	ld	r24, Z
    3468:	80 31       	cpi	r24, 0x10	; 16
    346a:	0c f0       	brlt	.+2      	; 0x346e <LCD_Mode+0xe5c>
    346c:	7a c0       	rjmp	.+244    	; 0x3562 <LCD_Mode+0xf50>
			{
				for(count=0;count<count2;count++)
    346e:	fe 01       	movw	r30, r28
    3470:	eb 59       	subi	r30, 0x9B	; 155
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	10 82       	st	Z, r1
    3476:	0c c0       	rjmp	.+24     	; 0x3490 <LCD_Mode+0xe7e>
					LCD_WriteData(' ');
    3478:	80 e2       	ldi	r24, 0x20	; 32
    347a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	case 5:
		while(1)
		{
			if(count2<16)
			{
				for(count=0;count<count2;count++)
    347e:	de 01       	movw	r26, r28
    3480:	ab 59       	subi	r26, 0x9B	; 155
    3482:	bf 4f       	sbci	r27, 0xFF	; 255
    3484:	fe 01       	movw	r30, r28
    3486:	eb 59       	subi	r30, 0x9B	; 155
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	80 81       	ld	r24, Z
    348c:	8f 5f       	subi	r24, 0xFF	; 255
    348e:	8c 93       	st	X, r24
    3490:	fe 01       	movw	r30, r28
    3492:	eb 59       	subi	r30, 0x9B	; 155
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	de 01       	movw	r26, r28
    3498:	ac 59       	subi	r26, 0x9C	; 156
    349a:	bf 4f       	sbci	r27, 0xFF	; 255
    349c:	90 81       	ld	r25, Z
    349e:	8c 91       	ld	r24, X
    34a0:	98 17       	cp	r25, r24
    34a2:	54 f3       	brlt	.-44     	; 0x3478 <LCD_Mode+0xe66>
					LCD_WriteData(' ');


				for(count=0;count<10;count++)
    34a4:	fe 01       	movw	r30, r28
    34a6:	eb 59       	subi	r30, 0x9B	; 155
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	10 82       	st	Z, r1
    34ac:	1c c0       	rjmp	.+56     	; 0x34e6 <LCD_Mode+0xed4>
					LCD_WriteData(*(data+count));
    34ae:	fe 01       	movw	r30, r28
    34b0:	eb 59       	subi	r30, 0x9B	; 155
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	80 81       	ld	r24, Z
    34b6:	28 2f       	mov	r18, r24
    34b8:	33 27       	eor	r19, r19
    34ba:	27 fd       	sbrc	r18, 7
    34bc:	30 95       	com	r19
    34be:	fe 01       	movw	r30, r28
    34c0:	e6 59       	subi	r30, 0x96	; 150
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	80 81       	ld	r24, Z
    34c6:	91 81       	ldd	r25, Z+1	; 0x01
    34c8:	fc 01       	movw	r30, r24
    34ca:	e2 0f       	add	r30, r18
    34cc:	f3 1f       	adc	r31, r19
    34ce:	80 81       	ld	r24, Z
    34d0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
			{
				for(count=0;count<count2;count++)
					LCD_WriteData(' ');


				for(count=0;count<10;count++)
    34d4:	de 01       	movw	r26, r28
    34d6:	ab 59       	subi	r26, 0x9B	; 155
    34d8:	bf 4f       	sbci	r27, 0xFF	; 255
    34da:	fe 01       	movw	r30, r28
    34dc:	eb 59       	subi	r30, 0x9B	; 155
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	80 81       	ld	r24, Z
    34e2:	8f 5f       	subi	r24, 0xFF	; 255
    34e4:	8c 93       	st	X, r24
    34e6:	fe 01       	movw	r30, r28
    34e8:	eb 59       	subi	r30, 0x9B	; 155
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	80 81       	ld	r24, Z
    34ee:	8a 30       	cpi	r24, 0x0A	; 10
    34f0:	f4 f2       	brlt	.-68     	; 0x34ae <LCD_Mode+0xe9c>
					LCD_WriteData(*(data+count));

				if (count2>6)
    34f2:	fe 01       	movw	r30, r28
    34f4:	ec 59       	subi	r30, 0x9C	; 156
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	80 81       	ld	r24, Z
    34fa:	87 30       	cpi	r24, 0x07	; 7
    34fc:	0c f4       	brge	.+2      	; 0x3500 <LCD_Mode+0xeee>
    34fe:	02 c1       	rjmp	.+516    	; 0x3704 <LCD_Mode+0x10f2>
				{
					LCD_WriteCommand(0xc0);
    3500:	80 ec       	ldi	r24, 0xC0	; 192
    3502:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
					for(count=16-count2;count<10;count++)
    3506:	fe 01       	movw	r30, r28
    3508:	ec 59       	subi	r30, 0x9C	; 156
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	90 81       	ld	r25, Z
    350e:	80 e1       	ldi	r24, 0x10	; 16
    3510:	89 1b       	sub	r24, r25
    3512:	fe 01       	movw	r30, r28
    3514:	eb 59       	subi	r30, 0x9B	; 155
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	80 83       	st	Z, r24
    351a:	1c c0       	rjmp	.+56     	; 0x3554 <LCD_Mode+0xf42>
						LCD_WriteData(*(data+count));
    351c:	fe 01       	movw	r30, r28
    351e:	eb 59       	subi	r30, 0x9B	; 155
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	80 81       	ld	r24, Z
    3524:	28 2f       	mov	r18, r24
    3526:	33 27       	eor	r19, r19
    3528:	27 fd       	sbrc	r18, 7
    352a:	30 95       	com	r19
    352c:	fe 01       	movw	r30, r28
    352e:	e6 59       	subi	r30, 0x96	; 150
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	80 81       	ld	r24, Z
    3534:	91 81       	ldd	r25, Z+1	; 0x01
    3536:	fc 01       	movw	r30, r24
    3538:	e2 0f       	add	r30, r18
    353a:	f3 1f       	adc	r31, r19
    353c:	80 81       	ld	r24, Z
    353e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
					LCD_WriteData(*(data+count));

				if (count2>6)
				{
					LCD_WriteCommand(0xc0);
					for(count=16-count2;count<10;count++)
    3542:	de 01       	movw	r26, r28
    3544:	ab 59       	subi	r26, 0x9B	; 155
    3546:	bf 4f       	sbci	r27, 0xFF	; 255
    3548:	fe 01       	movw	r30, r28
    354a:	eb 59       	subi	r30, 0x9B	; 155
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	80 81       	ld	r24, Z
    3550:	8f 5f       	subi	r24, 0xFF	; 255
    3552:	8c 93       	st	X, r24
    3554:	fe 01       	movw	r30, r28
    3556:	eb 59       	subi	r30, 0x9B	; 155
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	80 81       	ld	r24, Z
    355c:	8a 30       	cpi	r24, 0x0A	; 10
    355e:	f4 f2       	brlt	.-68     	; 0x351c <LCD_Mode+0xf0a>
    3560:	d1 c0       	rjmp	.+418    	; 0x3704 <LCD_Mode+0x10f2>
						LCD_WriteData(*(data+count));
				}
			}

			else if(count2<22)
    3562:	fe 01       	movw	r30, r28
    3564:	ec 59       	subi	r30, 0x9C	; 156
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	80 81       	ld	r24, Z
    356a:	86 31       	cpi	r24, 0x16	; 22
    356c:	0c f0       	brlt	.+2      	; 0x3570 <LCD_Mode+0xf5e>
    356e:	4f c0       	rjmp	.+158    	; 0x360e <LCD_Mode+0xffc>
			{
				LCD_WriteCommand(0xc0);
    3570:	80 ec       	ldi	r24, 0xC0	; 192
    3572:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
				for(count=0;count<count2-16;count++)
    3576:	fe 01       	movw	r30, r28
    3578:	eb 59       	subi	r30, 0x9B	; 155
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	10 82       	st	Z, r1
    357e:	0c c0       	rjmp	.+24     	; 0x3598 <LCD_Mode+0xf86>
					LCD_WriteData(' ');
    3580:	80 e2       	ldi	r24, 0x20	; 32
    3582:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
			}

			else if(count2<22)
			{
				LCD_WriteCommand(0xc0);
				for(count=0;count<count2-16;count++)
    3586:	de 01       	movw	r26, r28
    3588:	ab 59       	subi	r26, 0x9B	; 155
    358a:	bf 4f       	sbci	r27, 0xFF	; 255
    358c:	fe 01       	movw	r30, r28
    358e:	eb 59       	subi	r30, 0x9B	; 155
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	80 81       	ld	r24, Z
    3594:	8f 5f       	subi	r24, 0xFF	; 255
    3596:	8c 93       	st	X, r24
    3598:	fe 01       	movw	r30, r28
    359a:	eb 59       	subi	r30, 0x9B	; 155
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	80 81       	ld	r24, Z
    35a0:	28 2f       	mov	r18, r24
    35a2:	33 27       	eor	r19, r19
    35a4:	27 fd       	sbrc	r18, 7
    35a6:	30 95       	com	r19
    35a8:	fe 01       	movw	r30, r28
    35aa:	ec 59       	subi	r30, 0x9C	; 156
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	80 81       	ld	r24, Z
    35b0:	99 27       	eor	r25, r25
    35b2:	87 fd       	sbrc	r24, 7
    35b4:	90 95       	com	r25
    35b6:	40 97       	sbiw	r24, 0x10	; 16
    35b8:	28 17       	cp	r18, r24
    35ba:	39 07       	cpc	r19, r25
    35bc:	0c f3       	brlt	.-62     	; 0x3580 <LCD_Mode+0xf6e>
					LCD_WriteData(' ');

				for(count=0;count<10;count++)
    35be:	fe 01       	movw	r30, r28
    35c0:	eb 59       	subi	r30, 0x9B	; 155
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	10 82       	st	Z, r1
    35c6:	1c c0       	rjmp	.+56     	; 0x3600 <LCD_Mode+0xfee>
					LCD_WriteData(*(data+count));
    35c8:	fe 01       	movw	r30, r28
    35ca:	eb 59       	subi	r30, 0x9B	; 155
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 81       	ld	r24, Z
    35d0:	28 2f       	mov	r18, r24
    35d2:	33 27       	eor	r19, r19
    35d4:	27 fd       	sbrc	r18, 7
    35d6:	30 95       	com	r19
    35d8:	fe 01       	movw	r30, r28
    35da:	e6 59       	subi	r30, 0x96	; 150
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	80 81       	ld	r24, Z
    35e0:	91 81       	ldd	r25, Z+1	; 0x01
    35e2:	fc 01       	movw	r30, r24
    35e4:	e2 0f       	add	r30, r18
    35e6:	f3 1f       	adc	r31, r19
    35e8:	80 81       	ld	r24, Z
    35ea:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
			{
				LCD_WriteCommand(0xc0);
				for(count=0;count<count2-16;count++)
					LCD_WriteData(' ');

				for(count=0;count<10;count++)
    35ee:	de 01       	movw	r26, r28
    35f0:	ab 59       	subi	r26, 0x9B	; 155
    35f2:	bf 4f       	sbci	r27, 0xFF	; 255
    35f4:	fe 01       	movw	r30, r28
    35f6:	eb 59       	subi	r30, 0x9B	; 155
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	80 81       	ld	r24, Z
    35fc:	8f 5f       	subi	r24, 0xFF	; 255
    35fe:	8c 93       	st	X, r24
    3600:	fe 01       	movw	r30, r28
    3602:	eb 59       	subi	r30, 0x9B	; 155
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	80 81       	ld	r24, Z
    3608:	8a 30       	cpi	r24, 0x0A	; 10
    360a:	f4 f2       	brlt	.-68     	; 0x35c8 <LCD_Mode+0xfb6>
    360c:	7b c0       	rjmp	.+246    	; 0x3704 <LCD_Mode+0x10f2>
					LCD_WriteData(*(data+count));
			}
			else
			{
				for(count=31-count2;count<10;count++)
    360e:	fe 01       	movw	r30, r28
    3610:	ec 59       	subi	r30, 0x9C	; 156
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	90 81       	ld	r25, Z
    3616:	8f e1       	ldi	r24, 0x1F	; 31
    3618:	89 1b       	sub	r24, r25
    361a:	fe 01       	movw	r30, r28
    361c:	eb 59       	subi	r30, 0x9B	; 155
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	80 83       	st	Z, r24
    3622:	1c c0       	rjmp	.+56     	; 0x365c <LCD_Mode+0x104a>
					LCD_WriteData(*(data+count));
    3624:	fe 01       	movw	r30, r28
    3626:	eb 59       	subi	r30, 0x9B	; 155
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	80 81       	ld	r24, Z
    362c:	28 2f       	mov	r18, r24
    362e:	33 27       	eor	r19, r19
    3630:	27 fd       	sbrc	r18, 7
    3632:	30 95       	com	r19
    3634:	fe 01       	movw	r30, r28
    3636:	e6 59       	subi	r30, 0x96	; 150
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	80 81       	ld	r24, Z
    363c:	91 81       	ldd	r25, Z+1	; 0x01
    363e:	fc 01       	movw	r30, r24
    3640:	e2 0f       	add	r30, r18
    3642:	f3 1f       	adc	r31, r19
    3644:	80 81       	ld	r24, Z
    3646:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
				for(count=0;count<10;count++)
					LCD_WriteData(*(data+count));
			}
			else
			{
				for(count=31-count2;count<10;count++)
    364a:	de 01       	movw	r26, r28
    364c:	ab 59       	subi	r26, 0x9B	; 155
    364e:	bf 4f       	sbci	r27, 0xFF	; 255
    3650:	fe 01       	movw	r30, r28
    3652:	eb 59       	subi	r30, 0x9B	; 155
    3654:	ff 4f       	sbci	r31, 0xFF	; 255
    3656:	80 81       	ld	r24, Z
    3658:	8f 5f       	subi	r24, 0xFF	; 255
    365a:	8c 93       	st	X, r24
    365c:	fe 01       	movw	r30, r28
    365e:	eb 59       	subi	r30, 0x9B	; 155
    3660:	ff 4f       	sbci	r31, 0xFF	; 255
    3662:	80 81       	ld	r24, Z
    3664:	8a 30       	cpi	r24, 0x0A	; 10
    3666:	f4 f2       	brlt	.-68     	; 0x3624 <LCD_Mode+0x1012>
					LCD_WriteData(*(data+count));

				LCD_WriteCommand(0xc0);
    3668:	80 ec       	ldi	r24, 0xC0	; 192
    366a:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_WriteCommand>
				for(count=0;count<count2-16;count++)
    366e:	fe 01       	movw	r30, r28
    3670:	eb 59       	subi	r30, 0x9B	; 155
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	10 82       	st	Z, r1
    3676:	0c c0       	rjmp	.+24     	; 0x3690 <LCD_Mode+0x107e>
					LCD_WriteData(' ');
    3678:	80 e2       	ldi	r24, 0x20	; 32
    367a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
			{
				for(count=31-count2;count<10;count++)
					LCD_WriteData(*(data+count));

				LCD_WriteCommand(0xc0);
				for(count=0;count<count2-16;count++)
    367e:	de 01       	movw	r26, r28
    3680:	ab 59       	subi	r26, 0x9B	; 155
    3682:	bf 4f       	sbci	r27, 0xFF	; 255
    3684:	fe 01       	movw	r30, r28
    3686:	eb 59       	subi	r30, 0x9B	; 155
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	80 81       	ld	r24, Z
    368c:	8f 5f       	subi	r24, 0xFF	; 255
    368e:	8c 93       	st	X, r24
    3690:	fe 01       	movw	r30, r28
    3692:	eb 59       	subi	r30, 0x9B	; 155
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	80 81       	ld	r24, Z
    3698:	28 2f       	mov	r18, r24
    369a:	33 27       	eor	r19, r19
    369c:	27 fd       	sbrc	r18, 7
    369e:	30 95       	com	r19
    36a0:	fe 01       	movw	r30, r28
    36a2:	ec 59       	subi	r30, 0x9C	; 156
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	80 81       	ld	r24, Z
    36a8:	99 27       	eor	r25, r25
    36aa:	87 fd       	sbrc	r24, 7
    36ac:	90 95       	com	r25
    36ae:	40 97       	sbiw	r24, 0x10	; 16
    36b0:	28 17       	cp	r18, r24
    36b2:	39 07       	cpc	r19, r25
    36b4:	0c f3       	brlt	.-62     	; 0x3678 <LCD_Mode+0x1066>
					LCD_WriteData(' ');

				for(count=0;count<10;count++)
    36b6:	fe 01       	movw	r30, r28
    36b8:	eb 59       	subi	r30, 0x9B	; 155
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	10 82       	st	Z, r1
    36be:	1c c0       	rjmp	.+56     	; 0x36f8 <LCD_Mode+0x10e6>
					LCD_WriteData(*(data+count));
    36c0:	fe 01       	movw	r30, r28
    36c2:	eb 59       	subi	r30, 0x9B	; 155
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 81       	ld	r24, Z
    36c8:	28 2f       	mov	r18, r24
    36ca:	33 27       	eor	r19, r19
    36cc:	27 fd       	sbrc	r18, 7
    36ce:	30 95       	com	r19
    36d0:	fe 01       	movw	r30, r28
    36d2:	e6 59       	subi	r30, 0x96	; 150
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	80 81       	ld	r24, Z
    36d8:	91 81       	ldd	r25, Z+1	; 0x01
    36da:	fc 01       	movw	r30, r24
    36dc:	e2 0f       	add	r30, r18
    36de:	f3 1f       	adc	r31, r19
    36e0:	80 81       	ld	r24, Z
    36e2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>

				LCD_WriteCommand(0xc0);
				for(count=0;count<count2-16;count++)
					LCD_WriteData(' ');

				for(count=0;count<10;count++)
    36e6:	de 01       	movw	r26, r28
    36e8:	ab 59       	subi	r26, 0x9B	; 155
    36ea:	bf 4f       	sbci	r27, 0xFF	; 255
    36ec:	fe 01       	movw	r30, r28
    36ee:	eb 59       	subi	r30, 0x9B	; 155
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	80 81       	ld	r24, Z
    36f4:	8f 5f       	subi	r24, 0xFF	; 255
    36f6:	8c 93       	st	X, r24
    36f8:	fe 01       	movw	r30, r28
    36fa:	eb 59       	subi	r30, 0x9B	; 155
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	80 81       	ld	r24, Z
    3700:	8a 30       	cpi	r24, 0x0A	; 10
    3702:	f4 f2       	brlt	.-68     	; 0x36c0 <LCD_Mode+0x10ae>
					LCD_WriteData(*(data+count));
			}
			count2++;
    3704:	de 01       	movw	r26, r28
    3706:	ac 59       	subi	r26, 0x9C	; 156
    3708:	bf 4f       	sbci	r27, 0xFF	; 255
    370a:	fe 01       	movw	r30, r28
    370c:	ec 59       	subi	r30, 0x9C	; 156
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	80 81       	ld	r24, Z
    3712:	8f 5f       	subi	r24, 0xFF	; 255
    3714:	8c 93       	st	X, r24
			if(count2>30)
    3716:	fe 01       	movw	r30, r28
    3718:	ec 59       	subi	r30, 0x9C	; 156
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	80 81       	ld	r24, Z
    371e:	8f 31       	cpi	r24, 0x1F	; 31
    3720:	24 f0       	brlt	.+8      	; 0x372a <LCD_Mode+0x1118>
				count2=0;
    3722:	fe 01       	movw	r30, r28
    3724:	ec 59       	subi	r30, 0x9C	; 156
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	10 82       	st	Z, r1
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	aa e7       	ldi	r26, 0x7A	; 122
    3730:	b4 e4       	ldi	r27, 0x44	; 68
    3732:	89 8f       	std	Y+25, r24	; 0x19
    3734:	9a 8f       	std	Y+26, r25	; 0x1a
    3736:	ab 8f       	std	Y+27, r26	; 0x1b
    3738:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373a:	69 8d       	ldd	r22, Y+25	; 0x19
    373c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    373e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3740:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	4a e7       	ldi	r20, 0x7A	; 122
    3748:	53 e4       	ldi	r21, 0x43	; 67
    374a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	8d 8b       	std	Y+21, r24	; 0x15
    3754:	9e 8b       	std	Y+22, r25	; 0x16
    3756:	af 8b       	std	Y+23, r26	; 0x17
    3758:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    375a:	6d 89       	ldd	r22, Y+21	; 0x15
    375c:	7e 89       	ldd	r23, Y+22	; 0x16
    375e:	8f 89       	ldd	r24, Y+23	; 0x17
    3760:	98 8d       	ldd	r25, Y+24	; 0x18
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e8       	ldi	r20, 0x80	; 128
    3768:	5f e3       	ldi	r21, 0x3F	; 63
    376a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    376e:	88 23       	and	r24, r24
    3770:	2c f4       	brge	.+10     	; 0x377c <LCD_Mode+0x116a>
		__ticks = 1;
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	9c 8b       	std	Y+20, r25	; 0x14
    3778:	8b 8b       	std	Y+19, r24	; 0x13
    377a:	3f c0       	rjmp	.+126    	; 0x37fa <LCD_Mode+0x11e8>
	else if (__tmp > 65535)
    377c:	6d 89       	ldd	r22, Y+21	; 0x15
    377e:	7e 89       	ldd	r23, Y+22	; 0x16
    3780:	8f 89       	ldd	r24, Y+23	; 0x17
    3782:	98 8d       	ldd	r25, Y+24	; 0x18
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	3f ef       	ldi	r19, 0xFF	; 255
    3788:	4f e7       	ldi	r20, 0x7F	; 127
    378a:	57 e4       	ldi	r21, 0x47	; 71
    378c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3790:	18 16       	cp	r1, r24
    3792:	4c f5       	brge	.+82     	; 0x37e6 <LCD_Mode+0x11d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3794:	69 8d       	ldd	r22, Y+25	; 0x19
    3796:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3798:	8b 8d       	ldd	r24, Y+27	; 0x1b
    379a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	40 e2       	ldi	r20, 0x20	; 32
    37a2:	51 e4       	ldi	r21, 0x41	; 65
    37a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	bc 01       	movw	r22, r24
    37ae:	cd 01       	movw	r24, r26
    37b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	9c 8b       	std	Y+20, r25	; 0x14
    37ba:	8b 8b       	std	Y+19, r24	; 0x13
    37bc:	0f c0       	rjmp	.+30     	; 0x37dc <LCD_Mode+0x11ca>
    37be:	89 e1       	ldi	r24, 0x19	; 25
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	9a 8b       	std	Y+18, r25	; 0x12
    37c4:	89 8b       	std	Y+17, r24	; 0x11
    37c6:	89 89       	ldd	r24, Y+17	; 0x11
    37c8:	9a 89       	ldd	r25, Y+18	; 0x12
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	f1 f7       	brne	.-4      	; 0x37ca <LCD_Mode+0x11b8>
    37ce:	9a 8b       	std	Y+18, r25	; 0x12
    37d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d2:	8b 89       	ldd	r24, Y+19	; 0x13
    37d4:	9c 89       	ldd	r25, Y+20	; 0x14
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	9c 8b       	std	Y+20, r25	; 0x14
    37da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37dc:	8b 89       	ldd	r24, Y+19	; 0x13
    37de:	9c 89       	ldd	r25, Y+20	; 0x14
    37e0:	00 97       	sbiw	r24, 0x00	; 0
    37e2:	69 f7       	brne	.-38     	; 0x37be <LCD_Mode+0x11ac>
    37e4:	14 c0       	rjmp	.+40     	; 0x380e <LCD_Mode+0x11fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e6:	6d 89       	ldd	r22, Y+21	; 0x15
    37e8:	7e 89       	ldd	r23, Y+22	; 0x16
    37ea:	8f 89       	ldd	r24, Y+23	; 0x17
    37ec:	98 8d       	ldd	r25, Y+24	; 0x18
    37ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	9c 8b       	std	Y+20, r25	; 0x14
    37f8:	8b 8b       	std	Y+19, r24	; 0x13
    37fa:	8b 89       	ldd	r24, Y+19	; 0x13
    37fc:	9c 89       	ldd	r25, Y+20	; 0x14
    37fe:	98 8b       	std	Y+16, r25	; 0x10
    3800:	8f 87       	std	Y+15, r24	; 0x0f
    3802:	8f 85       	ldd	r24, Y+15	; 0x0f
    3804:	98 89       	ldd	r25, Y+16	; 0x10
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	f1 f7       	brne	.-4      	; 0x3806 <LCD_Mode+0x11f4>
    380a:	98 8b       	std	Y+16, r25	; 0x10
    380c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			LCD_CLear();
    380e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_CLear>
    3812:	26 ce       	rjmp	.-948    	; 0x3460 <LCD_Mode+0xe4e>
		break;
/*******************************************************************************************/
	case 4:
		while(1)
		{
			if(count2<16)
    3814:	fe 01       	movw	r30, r28
    3816:	ec 59       	subi	r30, 0x9C	; 156
    3818:	ff 4f       	sbci	r31, 0xFF	; 255
    381a:	80 81       	ld	r24, Z
    381c:	80 31       	cpi	r24, 0x10	; 16
    381e:	0c f0       	brlt	.+2      	; 0x3822 <LCD_Mode+0x1210>
    3820:	42 c0       	rjmp	.+132    	; 0x38a6 <LCD_Mode+0x1294>
			{
				for(count=0;count<count2;count++)
    3822:	fe 01       	movw	r30, r28
    3824:	eb 59       	subi	r30, 0x9B	; 155
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	10 82       	st	Z, r1
    382a:	0c c0       	rjmp	.+24     	; 0x3844 <LCD_Mode+0x1232>
					LCD_WriteData(' ');
    382c:	80 e2       	ldi	r24, 0x20	; 32
    382e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
	case 4:
		while(1)
		{
			if(count2<16)
			{
				for(count=0;count<count2;count++)
    3832:	de 01       	movw	r26, r28
    3834:	ab 59       	subi	r26, 0x9B	; 155
    3836:	bf 4f       	sbci	r27, 0xFF	; 255
    3838:	fe 01       	movw	r30, r28
    383a:	eb 59       	subi	r30, 0x9B	; 155
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	80 81       	ld	r24, Z
    3840:	8f 5f       	subi	r24, 0xFF	; 255
    3842:	8c 93       	st	X, r24
    3844:	fe 01       	movw	r30, r28
    3846:	eb 59       	subi	r30, 0x9B	; 155
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	de 01       	movw	r26, r28
    384c:	ac 59       	subi	r26, 0x9C	; 156
    384e:	bf 4f       	sbci	r27, 0xFF	; 255
    3850:	90 81       	ld	r25, Z
    3852:	8c 91       	ld	r24, X
    3854:	98 17       	cp	r25, r24
    3856:	54 f3       	brlt	.-44     	; 0x382c <LCD_Mode+0x121a>
					LCD_WriteData(' ');

				for(count=0;count<10;count++)
    3858:	fe 01       	movw	r30, r28
    385a:	eb 59       	subi	r30, 0x9B	; 155
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	10 82       	st	Z, r1
    3860:	1c c0       	rjmp	.+56     	; 0x389a <LCD_Mode+0x1288>
					LCD_WriteData(*(data+count));
    3862:	fe 01       	movw	r30, r28
    3864:	eb 59       	subi	r30, 0x9B	; 155
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	80 81       	ld	r24, Z
    386a:	28 2f       	mov	r18, r24
    386c:	33 27       	eor	r19, r19
    386e:	27 fd       	sbrc	r18, 7
    3870:	30 95       	com	r19
    3872:	fe 01       	movw	r30, r28
    3874:	e6 59       	subi	r30, 0x96	; 150
    3876:	ff 4f       	sbci	r31, 0xFF	; 255
    3878:	80 81       	ld	r24, Z
    387a:	91 81       	ldd	r25, Z+1	; 0x01
    387c:	fc 01       	movw	r30, r24
    387e:	e2 0f       	add	r30, r18
    3880:	f3 1f       	adc	r31, r19
    3882:	80 81       	ld	r24, Z
    3884:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_WriteData>
			if(count2<16)
			{
				for(count=0;count<count2;count++)
					LCD_WriteData(' ');

				for(count=0;count<10;count++)
    3888:	de 01       	movw	r26, r28
    388a:	ab 59       	subi	r26, 0x9B	; 155
    388c:	bf 4f       	sbci	r27, 0xFF	; 255
    388e:	fe 01       	movw	r30, r28
    3890:	eb 59       	subi	r30, 0x9B	; 155
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	80 81       	ld	r24, Z
    3896:	8f 5f       	subi	r24, 0xFF	; 255
    3898:	8c 93       	st	X, r24
    389a:	fe 01       	movw	r30, r28
    389c:	eb 59       	subi	r30, 0x9B	; 155
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	80 81       	ld	r24, Z
    38a2:	8a 30       	cpi	r24, 0x0A	; 10
    38a4:	f4 f2       	brlt	.-68     	; 0x3862 <LCD_Mode+0x1250>
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	aa e7       	ldi	r26, 0x7A	; 122
    38ac:	b4 e4       	ldi	r27, 0x44	; 68
    38ae:	8b 87       	std	Y+11, r24	; 0x0b
    38b0:	9c 87       	std	Y+12, r25	; 0x0c
    38b2:	ad 87       	std	Y+13, r26	; 0x0d
    38b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    38bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	4a e7       	ldi	r20, 0x7A	; 122
    38c4:	53 e4       	ldi	r21, 0x43	; 67
    38c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ca:	dc 01       	movw	r26, r24
    38cc:	cb 01       	movw	r24, r22
    38ce:	8f 83       	std	Y+7, r24	; 0x07
    38d0:	98 87       	std	Y+8, r25	; 0x08
    38d2:	a9 87       	std	Y+9, r26	; 0x09
    38d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38d6:	6f 81       	ldd	r22, Y+7	; 0x07
    38d8:	78 85       	ldd	r23, Y+8	; 0x08
    38da:	89 85       	ldd	r24, Y+9	; 0x09
    38dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	40 e8       	ldi	r20, 0x80	; 128
    38e4:	5f e3       	ldi	r21, 0x3F	; 63
    38e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ea:	88 23       	and	r24, r24
    38ec:	2c f4       	brge	.+10     	; 0x38f8 <LCD_Mode+0x12e6>
		__ticks = 1;
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	9e 83       	std	Y+6, r25	; 0x06
    38f4:	8d 83       	std	Y+5, r24	; 0x05
    38f6:	3f c0       	rjmp	.+126    	; 0x3976 <LCD_Mode+0x1364>
	else if (__tmp > 65535)
    38f8:	6f 81       	ldd	r22, Y+7	; 0x07
    38fa:	78 85       	ldd	r23, Y+8	; 0x08
    38fc:	89 85       	ldd	r24, Y+9	; 0x09
    38fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3900:	20 e0       	ldi	r18, 0x00	; 0
    3902:	3f ef       	ldi	r19, 0xFF	; 255
    3904:	4f e7       	ldi	r20, 0x7F	; 127
    3906:	57 e4       	ldi	r21, 0x47	; 71
    3908:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    390c:	18 16       	cp	r1, r24
    390e:	4c f5       	brge	.+82     	; 0x3962 <LCD_Mode+0x1350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3910:	6b 85       	ldd	r22, Y+11	; 0x0b
    3912:	7c 85       	ldd	r23, Y+12	; 0x0c
    3914:	8d 85       	ldd	r24, Y+13	; 0x0d
    3916:	9e 85       	ldd	r25, Y+14	; 0x0e
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	40 e2       	ldi	r20, 0x20	; 32
    391e:	51 e4       	ldi	r21, 0x41	; 65
    3920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	bc 01       	movw	r22, r24
    392a:	cd 01       	movw	r24, r26
    392c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3930:	dc 01       	movw	r26, r24
    3932:	cb 01       	movw	r24, r22
    3934:	9e 83       	std	Y+6, r25	; 0x06
    3936:	8d 83       	std	Y+5, r24	; 0x05
    3938:	0f c0       	rjmp	.+30     	; 0x3958 <LCD_Mode+0x1346>
    393a:	89 e1       	ldi	r24, 0x19	; 25
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	9c 83       	std	Y+4, r25	; 0x04
    3940:	8b 83       	std	Y+3, r24	; 0x03
    3942:	8b 81       	ldd	r24, Y+3	; 0x03
    3944:	9c 81       	ldd	r25, Y+4	; 0x04
    3946:	01 97       	sbiw	r24, 0x01	; 1
    3948:	f1 f7       	brne	.-4      	; 0x3946 <LCD_Mode+0x1334>
    394a:	9c 83       	std	Y+4, r25	; 0x04
    394c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394e:	8d 81       	ldd	r24, Y+5	; 0x05
    3950:	9e 81       	ldd	r25, Y+6	; 0x06
    3952:	01 97       	sbiw	r24, 0x01	; 1
    3954:	9e 83       	std	Y+6, r25	; 0x06
    3956:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3958:	8d 81       	ldd	r24, Y+5	; 0x05
    395a:	9e 81       	ldd	r25, Y+6	; 0x06
    395c:	00 97       	sbiw	r24, 0x00	; 0
    395e:	69 f7       	brne	.-38     	; 0x393a <LCD_Mode+0x1328>
    3960:	14 c0       	rjmp	.+40     	; 0x398a <LCD_Mode+0x1378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3962:	6f 81       	ldd	r22, Y+7	; 0x07
    3964:	78 85       	ldd	r23, Y+8	; 0x08
    3966:	89 85       	ldd	r24, Y+9	; 0x09
    3968:	9a 85       	ldd	r25, Y+10	; 0x0a
    396a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	9e 83       	std	Y+6, r25	; 0x06
    3974:	8d 83       	std	Y+5, r24	; 0x05
    3976:	8d 81       	ldd	r24, Y+5	; 0x05
    3978:	9e 81       	ldd	r25, Y+6	; 0x06
    397a:	9a 83       	std	Y+2, r25	; 0x02
    397c:	89 83       	std	Y+1, r24	; 0x01
    397e:	89 81       	ldd	r24, Y+1	; 0x01
    3980:	9a 81       	ldd	r25, Y+2	; 0x02
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	f1 f7       	brne	.-4      	; 0x3982 <LCD_Mode+0x1370>
    3986:	9a 83       	std	Y+2, r25	; 0x02
    3988:	89 83       	std	Y+1, r24	; 0x01
					LCD_WriteData(*(data+count));
			}
			_delay_ms(1000);
			LCD_CLear();
    398a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_CLear>
			count2++;
    398e:	de 01       	movw	r26, r28
    3990:	ac 59       	subi	r26, 0x9C	; 156
    3992:	bf 4f       	sbci	r27, 0xFF	; 255
    3994:	fe 01       	movw	r30, r28
    3996:	ec 59       	subi	r30, 0x9C	; 156
    3998:	ff 4f       	sbci	r31, 0xFF	; 255
    399a:	80 81       	ld	r24, Z
    399c:	8f 5f       	subi	r24, 0xFF	; 255
    399e:	8c 93       	st	X, r24
			if(count2>16)
    39a0:	fe 01       	movw	r30, r28
    39a2:	ec 59       	subi	r30, 0x9C	; 156
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	80 81       	ld	r24, Z
    39a8:	81 31       	cpi	r24, 0x11	; 17
    39aa:	0c f4       	brge	.+2      	; 0x39ae <LCD_Mode+0x139c>
    39ac:	33 cf       	rjmp	.-410    	; 0x3814 <LCD_Mode+0x1202>
				count2=0;
    39ae:	fe 01       	movw	r30, r28
    39b0:	ec 59       	subi	r30, 0x9C	; 156
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	10 82       	st	Z, r1
    39b6:	2e cf       	rjmp	.-420    	; 0x3814 <LCD_Mode+0x1202>
		}
/*******************************************************************************************/
	}
}
    39b8:	c5 58       	subi	r28, 0x85	; 133
    39ba:	df 4f       	sbci	r29, 0xFF	; 255
    39bc:	0f b6       	in	r0, 0x3f	; 63
    39be:	f8 94       	cli
    39c0:	de bf       	out	0x3e, r29	; 62
    39c2:	0f be       	out	0x3f, r0	; 63
    39c4:	cd bf       	out	0x3d, r28	; 61
    39c6:	cf 91       	pop	r28
    39c8:	df 91       	pop	r29
    39ca:	1f 91       	pop	r17
    39cc:	0f 91       	pop	r16
    39ce:	08 95       	ret

000039d0 <main>:
 */

#include "Lcd_Modes.h"

int main()
{
    39d0:	df 93       	push	r29
    39d2:	cf 93       	push	r28
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62
	LCD_Mode_Init();
    39d8:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_Mode_Init>
	LCD_Mode(9); /*There are 6 Modes form 4 to 10*/
    39dc:	89 e0       	ldi	r24, 0x09	; 9
    39de:	0e 94 09 13 	call	0x2612	; 0x2612 <LCD_Mode>
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	90 e0       	ldi	r25, 0x00	; 0

}
    39e6:	cf 91       	pop	r28
    39e8:	df 91       	pop	r29
    39ea:	08 95       	ret

000039ec <__prologue_saves__>:
    39ec:	2f 92       	push	r2
    39ee:	3f 92       	push	r3
    39f0:	4f 92       	push	r4
    39f2:	5f 92       	push	r5
    39f4:	6f 92       	push	r6
    39f6:	7f 92       	push	r7
    39f8:	8f 92       	push	r8
    39fa:	9f 92       	push	r9
    39fc:	af 92       	push	r10
    39fe:	bf 92       	push	r11
    3a00:	cf 92       	push	r12
    3a02:	df 92       	push	r13
    3a04:	ef 92       	push	r14
    3a06:	ff 92       	push	r15
    3a08:	0f 93       	push	r16
    3a0a:	1f 93       	push	r17
    3a0c:	cf 93       	push	r28
    3a0e:	df 93       	push	r29
    3a10:	cd b7       	in	r28, 0x3d	; 61
    3a12:	de b7       	in	r29, 0x3e	; 62
    3a14:	ca 1b       	sub	r28, r26
    3a16:	db 0b       	sbc	r29, r27
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
    3a22:	09 94       	ijmp

00003a24 <__epilogue_restores__>:
    3a24:	2a 88       	ldd	r2, Y+18	; 0x12
    3a26:	39 88       	ldd	r3, Y+17	; 0x11
    3a28:	48 88       	ldd	r4, Y+16	; 0x10
    3a2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a30:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a32:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a34:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a36:	b9 84       	ldd	r11, Y+9	; 0x09
    3a38:	c8 84       	ldd	r12, Y+8	; 0x08
    3a3a:	df 80       	ldd	r13, Y+7	; 0x07
    3a3c:	ee 80       	ldd	r14, Y+6	; 0x06
    3a3e:	fd 80       	ldd	r15, Y+5	; 0x05
    3a40:	0c 81       	ldd	r16, Y+4	; 0x04
    3a42:	1b 81       	ldd	r17, Y+3	; 0x03
    3a44:	aa 81       	ldd	r26, Y+2	; 0x02
    3a46:	b9 81       	ldd	r27, Y+1	; 0x01
    3a48:	ce 0f       	add	r28, r30
    3a4a:	d1 1d       	adc	r29, r1
    3a4c:	0f b6       	in	r0, 0x3f	; 63
    3a4e:	f8 94       	cli
    3a50:	de bf       	out	0x3e, r29	; 62
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	cd bf       	out	0x3d, r28	; 61
    3a56:	ed 01       	movw	r28, r26
    3a58:	08 95       	ret

00003a5a <_exit>:
    3a5a:	f8 94       	cli

00003a5c <__stop_program>:
    3a5c:	ff cf       	rjmp	.-2      	; 0x3a5c <__stop_program>
