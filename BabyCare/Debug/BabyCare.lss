
BabyCare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00003a64  00003af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800078  00800078  00003b10  2**0
                  ALLOC
  3 .stab         00003444  00000000  00000000  00003b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cca  00000000  00000000  00006f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aa02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b7b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c36b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 19 	call	0x3334	; 0x3334 <main>
      8a:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 25 1d 	jmp	0x3a4a	; 0x3a4a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:

#include "ADC.h"
#include "Utils.h"

void ADC_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	/*Clock Devision Factor*/
	Set_Bit(ADCSRA,Pin0);
     b4e:	a6 e2       	ldi	r26, 0x26	; 38
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e6 e2       	ldi	r30, 0x26	; 38
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,Pin1);
     b5c:	a6 e2       	ldi	r26, 0x26	; 38
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e6 e2       	ldi	r30, 0x26	; 38
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,Pin2);
     b6a:	a6 e2       	ldi	r26, 0x26	; 38
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e6 e2       	ldi	r30, 0x26	; 38
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	84 60       	ori	r24, 0x04	; 4
     b76:	8c 93       	st	X, r24

	/*Left Adjustment*/
	Set_Bit(ADMUX,Pin5);
     b78:	a7 e2       	ldi	r26, 0x27	; 39
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e7 e2       	ldi	r30, 0x27	; 39
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 62       	ori	r24, 0x20	; 32
     b84:	8c 93       	st	X, r24

	/*Ref. Voltage*/
	Set_Bit(ADMUX,Pin6);
     b86:	a7 e2       	ldi	r26, 0x27	; 39
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e7 e2       	ldi	r30, 0x27	; 39
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 64       	ori	r24, 0x40	; 64
     b92:	8c 93       	st	X, r24
	Clr_Bit(ADMUX,Pin7);
     b94:	a7 e2       	ldi	r26, 0x27	; 39
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e7 e2       	ldi	r30, 0x27	; 39
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 77       	andi	r24, 0x7F	; 127
     ba0:	8c 93       	st	X, r24

	/*Enable ADC*/
	Set_Bit(ADCSRA,Pin7);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u32GetVal>:

u16 ADC_u32GetVal(u8 u8Channel)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <ADC_u32GetVal+0x6>
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <ADC_u32GetVal+0x8>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <ADC_u32GetVal+0xa>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	8e 83       	std	Y+6, r24	; 0x06
	u16 u16ReturnReading,u16ReadingHigh;
	u8 u8ReadingLow;
	/*define channel*/
	Assign_Bit(ADMUX,Pin0,Get_Bit(u8Channel,Pin0));
     bc6:	8e 81       	ldd	r24, Y+6	; 0x06
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	81 70       	andi	r24, 0x01	; 1
     bce:	90 70       	andi	r25, 0x00	; 0
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	39 f4       	brne	.+14     	; 0xbe2 <ADC_u32GetVal+0x2c>
     bd4:	a7 e2       	ldi	r26, 0x27	; 39
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e7 e2       	ldi	r30, 0x27	; 39
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	8e 7f       	andi	r24, 0xFE	; 254
     be0:	8c 93       	st	X, r24
     be2:	8e 81       	ldd	r24, Y+6	; 0x06
     be4:	88 2f       	mov	r24, r24
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	81 70       	andi	r24, 0x01	; 1
     bea:	90 70       	andi	r25, 0x00	; 0
     bec:	88 23       	and	r24, r24
     bee:	39 f0       	breq	.+14     	; 0xbfe <ADC_u32GetVal+0x48>
     bf0:	a7 e2       	ldi	r26, 0x27	; 39
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e7 e2       	ldi	r30, 0x27	; 39
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	81 60       	ori	r24, 0x01	; 1
     bfc:	8c 93       	st	X, r24
	Assign_Bit(ADMUX,Pin1,Get_Bit(u8Channel,Pin1));
     bfe:	8e 81       	ldd	r24, Y+6	; 0x06
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	82 70       	andi	r24, 0x02	; 2
     c06:	90 70       	andi	r25, 0x00	; 0
     c08:	95 95       	asr	r25
     c0a:	87 95       	ror	r24
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	39 f4       	brne	.+14     	; 0xc1e <ADC_u32GetVal+0x68>
     c10:	a7 e2       	ldi	r26, 0x27	; 39
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e7 e2       	ldi	r30, 0x27	; 39
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	8d 7f       	andi	r24, 0xFD	; 253
     c1c:	8c 93       	st	X, r24
     c1e:	8e 81       	ldd	r24, Y+6	; 0x06
     c20:	88 2f       	mov	r24, r24
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	82 70       	andi	r24, 0x02	; 2
     c26:	90 70       	andi	r25, 0x00	; 0
     c28:	95 95       	asr	r25
     c2a:	87 95       	ror	r24
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	91 05       	cpc	r25, r1
     c30:	39 f4       	brne	.+14     	; 0xc40 <ADC_u32GetVal+0x8a>
     c32:	a7 e2       	ldi	r26, 0x27	; 39
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e7 e2       	ldi	r30, 0x27	; 39
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	82 60       	ori	r24, 0x02	; 2
     c3e:	8c 93       	st	X, r24
	Assign_Bit(ADMUX,Pin2,Get_Bit(u8Channel,Pin2));
     c40:	8e 81       	ldd	r24, Y+6	; 0x06
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	84 70       	andi	r24, 0x04	; 4
     c48:	90 70       	andi	r25, 0x00	; 0
     c4a:	95 95       	asr	r25
     c4c:	87 95       	ror	r24
     c4e:	95 95       	asr	r25
     c50:	87 95       	ror	r24
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	39 f4       	brne	.+14     	; 0xc64 <ADC_u32GetVal+0xae>
     c56:	a7 e2       	ldi	r26, 0x27	; 39
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e7 e2       	ldi	r30, 0x27	; 39
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	8b 7f       	andi	r24, 0xFB	; 251
     c62:	8c 93       	st	X, r24
     c64:	8e 81       	ldd	r24, Y+6	; 0x06
     c66:	88 2f       	mov	r24, r24
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	84 70       	andi	r24, 0x04	; 4
     c6c:	90 70       	andi	r25, 0x00	; 0
     c6e:	95 95       	asr	r25
     c70:	87 95       	ror	r24
     c72:	95 95       	asr	r25
     c74:	87 95       	ror	r24
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	91 05       	cpc	r25, r1
     c7a:	39 f4       	brne	.+14     	; 0xc8a <ADC_u32GetVal+0xd4>
     c7c:	a7 e2       	ldi	r26, 0x27	; 39
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e7 e2       	ldi	r30, 0x27	; 39
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	84 60       	ori	r24, 0x04	; 4
     c88:	8c 93       	st	X, r24
	Assign_Bit(ADMUX,Pin3,Get_Bit(u8Channel,Pin3));
     c8a:	8e 81       	ldd	r24, Y+6	; 0x06
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	88 70       	andi	r24, 0x08	; 8
     c92:	90 70       	andi	r25, 0x00	; 0
     c94:	95 95       	asr	r25
     c96:	87 95       	ror	r24
     c98:	95 95       	asr	r25
     c9a:	87 95       	ror	r24
     c9c:	95 95       	asr	r25
     c9e:	87 95       	ror	r24
     ca0:	00 97       	sbiw	r24, 0x00	; 0
     ca2:	39 f4       	brne	.+14     	; 0xcb2 <ADC_u32GetVal+0xfc>
     ca4:	a7 e2       	ldi	r26, 0x27	; 39
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e7 e2       	ldi	r30, 0x27	; 39
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	87 7f       	andi	r24, 0xF7	; 247
     cb0:	8c 93       	st	X, r24
     cb2:	8e 81       	ldd	r24, Y+6	; 0x06
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	88 70       	andi	r24, 0x08	; 8
     cba:	90 70       	andi	r25, 0x00	; 0
     cbc:	95 95       	asr	r25
     cbe:	87 95       	ror	r24
     cc0:	95 95       	asr	r25
     cc2:	87 95       	ror	r24
     cc4:	95 95       	asr	r25
     cc6:	87 95       	ror	r24
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	91 05       	cpc	r25, r1
     ccc:	39 f4       	brne	.+14     	; 0xcdc <ADC_u32GetVal+0x126>
     cce:	a7 e2       	ldi	r26, 0x27	; 39
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e2       	ldi	r30, 0x27	; 39
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	88 60       	ori	r24, 0x08	; 8
     cda:	8c 93       	st	X, r24
	Assign_Bit(ADMUX,Pin4,Get_Bit(u8Channel,Pin4));
     cdc:	8e 81       	ldd	r24, Y+6	; 0x06
     cde:	88 2f       	mov	r24, r24
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	80 71       	andi	r24, 0x10	; 16
     ce4:	90 70       	andi	r25, 0x00	; 0
     ce6:	95 95       	asr	r25
     ce8:	87 95       	ror	r24
     cea:	95 95       	asr	r25
     cec:	87 95       	ror	r24
     cee:	95 95       	asr	r25
     cf0:	87 95       	ror	r24
     cf2:	95 95       	asr	r25
     cf4:	87 95       	ror	r24
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	39 f4       	brne	.+14     	; 0xd08 <ADC_u32GetVal+0x152>
     cfa:	a7 e2       	ldi	r26, 0x27	; 39
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e2       	ldi	r30, 0x27	; 39
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 7e       	andi	r24, 0xEF	; 239
     d06:	8c 93       	st	X, r24
     d08:	8e 81       	ldd	r24, Y+6	; 0x06
     d0a:	88 2f       	mov	r24, r24
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	80 71       	andi	r24, 0x10	; 16
     d10:	90 70       	andi	r25, 0x00	; 0
     d12:	95 95       	asr	r25
     d14:	87 95       	ror	r24
     d16:	95 95       	asr	r25
     d18:	87 95       	ror	r24
     d1a:	95 95       	asr	r25
     d1c:	87 95       	ror	r24
     d1e:	95 95       	asr	r25
     d20:	87 95       	ror	r24
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	91 05       	cpc	r25, r1
     d26:	39 f4       	brne	.+14     	; 0xd36 <ADC_u32GetVal+0x180>
     d28:	a7 e2       	ldi	r26, 0x27	; 39
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e7 e2       	ldi	r30, 0x27	; 39
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 61       	ori	r24, 0x10	; 16
     d34:	8c 93       	st	X, r24

	/*Start Conversion*/
	Set_Bit(ADCSRA,Pin6);
     d36:	a6 e2       	ldi	r26, 0x26	; 38
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e6 e2       	ldi	r30, 0x26	; 38
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	80 64       	ori	r24, 0x40	; 64
     d42:	8c 93       	st	X, r24

	while(flag !=1 ){}
     d44:	e6 e2       	ldi	r30, 0x26	; 38
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	80 71       	andi	r24, 0x10	; 16
     d50:	90 70       	andi	r25, 0x00	; 0
     d52:	95 95       	asr	r25
     d54:	87 95       	ror	r24
     d56:	95 95       	asr	r25
     d58:	87 95       	ror	r24
     d5a:	95 95       	asr	r25
     d5c:	87 95       	ror	r24
     d5e:	95 95       	asr	r25
     d60:	87 95       	ror	r24
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	91 05       	cpc	r25, r1
     d66:	71 f7       	brne	.-36     	; 0xd44 <ADC_u32GetVal+0x18e>
	Set_Bit(ADCSRA,Pin4);
     d68:	a6 e2       	ldi	r26, 0x26	; 38
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e6 e2       	ldi	r30, 0x26	; 38
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 61       	ori	r24, 0x10	; 16
     d74:	8c 93       	st	X, r24

	u8ReadingLow = (Get_Bit(ADCL,Pin6)) + (2*Get_Bit(ADCL,Pin7));
     d76:	e4 e2       	ldi	r30, 0x24	; 36
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	80 74       	andi	r24, 0x40	; 64
     d82:	90 70       	andi	r25, 0x00	; 0
     d84:	08 2e       	mov	r0, r24
     d86:	89 2f       	mov	r24, r25
     d88:	00 0c       	add	r0, r0
     d8a:	88 1f       	adc	r24, r24
     d8c:	99 0b       	sbc	r25, r25
     d8e:	00 0c       	add	r0, r0
     d90:	88 1f       	adc	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	28 2f       	mov	r18, r24
     d96:	e4 e2       	ldi	r30, 0x24	; 36
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	80 78       	andi	r24, 0x80	; 128
     da2:	90 70       	andi	r25, 0x00	; 0
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	88 0f       	add	r24, r24
     daa:	89 2f       	mov	r24, r25
     dac:	88 1f       	adc	r24, r24
     dae:	99 0b       	sbc	r25, r25
     db0:	82 0f       	add	r24, r18
     db2:	89 83       	std	Y+1, r24	; 0x01
	u16ReadingHigh= ADCH;
     db4:	e5 e2       	ldi	r30, 0x25	; 37
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	9b 83       	std	Y+3, r25	; 0x03
     dc0:	8a 83       	std	Y+2, r24	; 0x02
	u16ReturnReading = u8ReadingLow + (u16ReadingHigh<<2);
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	82 0f       	add	r24, r18
     dd6:	93 1f       	adc	r25, r19
     dd8:	9d 83       	std	Y+5, r25	; 0x05
     dda:	8c 83       	std	Y+4, r24	; 0x04

	return u16ReturnReading;
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	9d 81       	ldd	r25, Y+5	; 0x05
}
     de0:	26 96       	adiw	r28, 0x06	; 6
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <Buzzer_Init>:
#include "Buzzer.h"
#include "DIO.h"
#include "avr/delay.h"

void Buzzer_Init()
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDir(PortD,Pin7,Output); /* Set pin 7D as an output pin (buzzer)*/
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	67 e0       	ldi	r22, 0x07	; 7
     dfe:	41 e0       	ldi	r20, 0x01	; 1
     e00:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
	DIO_voidWriteVal(PortD,Pin7,Zero_Volt); /* Set pin 7D to 0V */
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	67 e0       	ldi	r22, 0x07	; 7
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
}
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <Buzzer>:
void Buzzer(u8 u8State)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	0f 92       	push	r0
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidWriteVal(PortD,Pin7,u8State);
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	67 e0       	ldi	r22, 0x07	; 7
     e24:	49 81       	ldd	r20, Y+1	; 0x01
     e26:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
}
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <Buzzer_Mode>:

void Buzzer_Mode(u8 u8Freq1, u8 u8Freq2)
{
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	c8 55       	subi	r28, 0x58	; 88
     e40:	d0 40       	sbci	r29, 0x00	; 0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	fe 01       	movw	r30, r28
     e4e:	e9 5a       	subi	r30, 0xA9	; 169
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	80 83       	st	Z, r24
     e54:	fe 01       	movw	r30, r28
     e56:	e8 5a       	subi	r30, 0xA8	; 168
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	60 83       	st	Z, r22
		int count;
		for(count=0; count<u8Freq1; count++)
     e5c:	fe 01       	movw	r30, r28
     e5e:	eb 5a       	subi	r30, 0xAB	; 171
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	11 82       	std	Z+1, r1	; 0x01
     e64:	10 82       	st	Z, r1
     e66:	4a c1       	rjmp	.+660    	; 0x10fc <Buzzer_Mode+0x2ca>
		{
			Buzzer(ON);
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	0e 94 0a 07 	call	0xe14	; 0xe14 <Buzzer>
     e6e:	fe 01       	movw	r30, r28
     e70:	ef 5a       	subi	r30, 0xAF	; 175
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	a0 e8       	ldi	r26, 0x80	; 128
     e7a:	bf e3       	ldi	r27, 0x3F	; 63
     e7c:	80 83       	st	Z, r24
     e7e:	91 83       	std	Z+1, r25	; 0x01
     e80:	a2 83       	std	Z+2, r26	; 0x02
     e82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e84:	8e 01       	movw	r16, r28
     e86:	03 5b       	subi	r16, 0xB3	; 179
     e88:	1f 4f       	sbci	r17, 0xFF	; 255
     e8a:	fe 01       	movw	r30, r28
     e8c:	ef 5a       	subi	r30, 0xAF	; 175
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	60 81       	ld	r22, Z
     e92:	71 81       	ldd	r23, Z+1	; 0x01
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	4a e7       	ldi	r20, 0x7A	; 122
     e9e:	53 e4       	ldi	r21, 0x43	; 67
     ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	f8 01       	movw	r30, r16
     eaa:	80 83       	st	Z, r24
     eac:	91 83       	std	Z+1, r25	; 0x01
     eae:	a2 83       	std	Z+2, r26	; 0x02
     eb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eb2:	fe 01       	movw	r30, r28
     eb4:	e3 5b       	subi	r30, 0xB3	; 179
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	93 81       	ldd	r25, Z+3	; 0x03
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e8       	ldi	r20, 0x80	; 128
     ec6:	5f e3       	ldi	r21, 0x3F	; 63
     ec8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ecc:	88 23       	and	r24, r24
     ece:	44 f4       	brge	.+16     	; 0xee0 <Buzzer_Mode+0xae>
		__ticks = 1;
     ed0:	fe 01       	movw	r30, r28
     ed2:	e5 5b       	subi	r30, 0xB5	; 181
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	91 83       	std	Z+1, r25	; 0x01
     edc:	80 83       	st	Z, r24
     ede:	64 c0       	rjmp	.+200    	; 0xfa8 <Buzzer_Mode+0x176>
	else if (__tmp > 65535)
     ee0:	fe 01       	movw	r30, r28
     ee2:	e3 5b       	subi	r30, 0xB3	; 179
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	60 81       	ld	r22, Z
     ee8:	71 81       	ldd	r23, Z+1	; 0x01
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	3f ef       	ldi	r19, 0xFF	; 255
     ef2:	4f e7       	ldi	r20, 0x7F	; 127
     ef4:	57 e4       	ldi	r21, 0x47	; 71
     ef6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     efa:	18 16       	cp	r1, r24
     efc:	0c f0       	brlt	.+2      	; 0xf00 <Buzzer_Mode+0xce>
     efe:	43 c0       	rjmp	.+134    	; 0xf86 <Buzzer_Mode+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f00:	fe 01       	movw	r30, r28
     f02:	ef 5a       	subi	r30, 0xAF	; 175
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e2       	ldi	r20, 0x20	; 32
     f14:	51 e4       	ldi	r21, 0x41	; 65
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	8e 01       	movw	r16, r28
     f20:	05 5b       	subi	r16, 0xB5	; 181
     f22:	1f 4f       	sbci	r17, 0xFF	; 255
     f24:	bc 01       	movw	r22, r24
     f26:	cd 01       	movw	r24, r26
     f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	f8 01       	movw	r30, r16
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
     f36:	1f c0       	rjmp	.+62     	; 0xf76 <Buzzer_Mode+0x144>
     f38:	fe 01       	movw	r30, r28
     f3a:	e7 5b       	subi	r30, 0xB7	; 183
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	89 e1       	ldi	r24, 0x19	; 25
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f46:	fe 01       	movw	r30, r28
     f48:	e7 5b       	subi	r30, 0xB7	; 183
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	80 81       	ld	r24, Z
     f4e:	91 81       	ldd	r25, Z+1	; 0x01
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <Buzzer_Mode+0x11e>
     f54:	fe 01       	movw	r30, r28
     f56:	e7 5b       	subi	r30, 0xB7	; 183
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5e:	de 01       	movw	r26, r28
     f60:	a5 5b       	subi	r26, 0xB5	; 181
     f62:	bf 4f       	sbci	r27, 0xFF	; 255
     f64:	fe 01       	movw	r30, r28
     f66:	e5 5b       	subi	r30, 0xB5	; 181
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	80 81       	ld	r24, Z
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	11 96       	adiw	r26, 0x01	; 1
     f72:	9c 93       	st	X, r25
     f74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f76:	fe 01       	movw	r30, r28
     f78:	e5 5b       	subi	r30, 0xB5	; 181
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	d1 f6       	brne	.-76     	; 0xf38 <Buzzer_Mode+0x106>
     f84:	27 c0       	rjmp	.+78     	; 0xfd4 <Buzzer_Mode+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f86:	8e 01       	movw	r16, r28
     f88:	05 5b       	subi	r16, 0xB5	; 181
     f8a:	1f 4f       	sbci	r17, 0xFF	; 255
     f8c:	fe 01       	movw	r30, r28
     f8e:	e3 5b       	subi	r30, 0xB3	; 179
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	60 81       	ld	r22, Z
     f94:	71 81       	ldd	r23, Z+1	; 0x01
     f96:	82 81       	ldd	r24, Z+2	; 0x02
     f98:	93 81       	ldd	r25, Z+3	; 0x03
     f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	f8 01       	movw	r30, r16
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	80 83       	st	Z, r24
     fa8:	de 01       	movw	r26, r28
     faa:	a9 5b       	subi	r26, 0xB9	; 185
     fac:	bf 4f       	sbci	r27, 0xFF	; 255
     fae:	fe 01       	movw	r30, r28
     fb0:	e5 5b       	subi	r30, 0xB5	; 181
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	80 81       	ld	r24, Z
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	8d 93       	st	X+, r24
     fba:	9c 93       	st	X, r25
     fbc:	fe 01       	movw	r30, r28
     fbe:	e9 5b       	subi	r30, 0xB9	; 185
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	80 81       	ld	r24, Z
     fc4:	91 81       	ldd	r25, Z+1	; 0x01
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <Buzzer_Mode+0x194>
     fca:	fe 01       	movw	r30, r28
     fcc:	e9 5b       	subi	r30, 0xB9	; 185
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	80 83       	st	Z, r24
			_delay_ms(1);
			Buzzer(OFF);
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	0e 94 0a 07 	call	0xe14	; 0xe14 <Buzzer>
     fda:	fe 01       	movw	r30, r28
     fdc:	ed 5b       	subi	r30, 0xBD	; 189
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 e2       	ldi	r26, 0x20	; 32
     fe6:	b1 e4       	ldi	r27, 0x41	; 65
     fe8:	80 83       	st	Z, r24
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	a2 83       	std	Z+2, r26	; 0x02
     fee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff0:	8e 01       	movw	r16, r28
     ff2:	01 5c       	subi	r16, 0xC1	; 193
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	fe 01       	movw	r30, r28
     ff8:	ed 5b       	subi	r30, 0xBD	; 189
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	60 81       	ld	r22, Z
     ffe:	71 81       	ldd	r23, Z+1	; 0x01
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	4a e7       	ldi	r20, 0x7A	; 122
    100a:	53 e4       	ldi	r21, 0x43	; 67
    100c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	f8 01       	movw	r30, r16
    1016:	80 83       	st	Z, r24
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	a2 83       	std	Z+2, r26	; 0x02
    101c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    101e:	fe 01       	movw	r30, r28
    1020:	ff 96       	adiw	r30, 0x3f	; 63
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e8       	ldi	r20, 0x80	; 128
    1030:	5f e3       	ldi	r21, 0x3F	; 63
    1032:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1036:	88 23       	and	r24, r24
    1038:	2c f4       	brge	.+10     	; 0x1044 <Buzzer_Mode+0x212>
		__ticks = 1;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9e af       	std	Y+62, r25	; 0x3e
    1040:	8d af       	std	Y+61, r24	; 0x3d
    1042:	46 c0       	rjmp	.+140    	; 0x10d0 <Buzzer_Mode+0x29e>
	else if (__tmp > 65535)
    1044:	fe 01       	movw	r30, r28
    1046:	ff 96       	adiw	r30, 0x3f	; 63
    1048:	60 81       	ld	r22, Z
    104a:	71 81       	ldd	r23, Z+1	; 0x01
    104c:	82 81       	ldd	r24, Z+2	; 0x02
    104e:	93 81       	ldd	r25, Z+3	; 0x03
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	3f ef       	ldi	r19, 0xFF	; 255
    1054:	4f e7       	ldi	r20, 0x7F	; 127
    1056:	57 e4       	ldi	r21, 0x47	; 71
    1058:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    105c:	18 16       	cp	r1, r24
    105e:	64 f5       	brge	.+88     	; 0x10b8 <Buzzer_Mode+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1060:	fe 01       	movw	r30, r28
    1062:	ed 5b       	subi	r30, 0xBD	; 189
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	60 81       	ld	r22, Z
    1068:	71 81       	ldd	r23, Z+1	; 0x01
    106a:	82 81       	ldd	r24, Z+2	; 0x02
    106c:	93 81       	ldd	r25, Z+3	; 0x03
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e2       	ldi	r20, 0x20	; 32
    1074:	51 e4       	ldi	r21, 0x41	; 65
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	9e af       	std	Y+62, r25	; 0x3e
    108c:	8d af       	std	Y+61, r24	; 0x3d
    108e:	0f c0       	rjmp	.+30     	; 0x10ae <Buzzer_Mode+0x27c>
    1090:	89 e1       	ldi	r24, 0x19	; 25
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	9c af       	std	Y+60, r25	; 0x3c
    1096:	8b af       	std	Y+59, r24	; 0x3b
    1098:	8b ad       	ldd	r24, Y+59	; 0x3b
    109a:	9c ad       	ldd	r25, Y+60	; 0x3c
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <Buzzer_Mode+0x26a>
    10a0:	9c af       	std	Y+60, r25	; 0x3c
    10a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    10a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	9e af       	std	Y+62, r25	; 0x3e
    10ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    10b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	69 f7       	brne	.-38     	; 0x1090 <Buzzer_Mode+0x25e>
    10b6:	16 c0       	rjmp	.+44     	; 0x10e4 <Buzzer_Mode+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b8:	fe 01       	movw	r30, r28
    10ba:	ff 96       	adiw	r30, 0x3f	; 63
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	93 81       	ldd	r25, Z+3	; 0x03
    10c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	9e af       	std	Y+62, r25	; 0x3e
    10ce:	8d af       	std	Y+61, r24	; 0x3d
    10d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    10d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    10d4:	9a af       	std	Y+58, r25	; 0x3a
    10d6:	89 af       	std	Y+57, r24	; 0x39
    10d8:	89 ad       	ldd	r24, Y+57	; 0x39
    10da:	9a ad       	ldd	r25, Y+58	; 0x3a
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <Buzzer_Mode+0x2aa>
    10e0:	9a af       	std	Y+58, r25	; 0x3a
    10e2:	89 af       	std	Y+57, r24	; 0x39
}

void Buzzer_Mode(u8 u8Freq1, u8 u8Freq2)
{
		int count;
		for(count=0; count<u8Freq1; count++)
    10e4:	de 01       	movw	r26, r28
    10e6:	ab 5a       	subi	r26, 0xAB	; 171
    10e8:	bf 4f       	sbci	r27, 0xFF	; 255
    10ea:	fe 01       	movw	r30, r28
    10ec:	eb 5a       	subi	r30, 0xAB	; 171
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	11 96       	adiw	r26, 0x01	; 1
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	fe 01       	movw	r30, r28
    10fe:	e9 5a       	subi	r30, 0xA9	; 169
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	80 81       	ld	r24, Z
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	fe 01       	movw	r30, r28
    110a:	eb 5a       	subi	r30, 0xAB	; 171
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	82 17       	cp	r24, r18
    1114:	93 07       	cpc	r25, r19
    1116:	0c f4       	brge	.+2      	; 0x111a <Buzzer_Mode+0x2e8>
    1118:	a7 ce       	rjmp	.-690    	; 0xe68 <Buzzer_Mode+0x36>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	aa e7       	ldi	r26, 0x7A	; 122
    1120:	b4 e4       	ldi	r27, 0x44	; 68
    1122:	8d ab       	std	Y+53, r24	; 0x35
    1124:	9e ab       	std	Y+54, r25	; 0x36
    1126:	af ab       	std	Y+55, r26	; 0x37
    1128:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112a:	6d a9       	ldd	r22, Y+53	; 0x35
    112c:	7e a9       	ldd	r23, Y+54	; 0x36
    112e:	8f a9       	ldd	r24, Y+55	; 0x37
    1130:	98 ad       	ldd	r25, Y+56	; 0x38
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	4a e7       	ldi	r20, 0x7A	; 122
    1138:	53 e4       	ldi	r21, 0x43	; 67
    113a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	89 ab       	std	Y+49, r24	; 0x31
    1144:	9a ab       	std	Y+50, r25	; 0x32
    1146:	ab ab       	std	Y+51, r26	; 0x33
    1148:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    114a:	69 a9       	ldd	r22, Y+49	; 0x31
    114c:	7a a9       	ldd	r23, Y+50	; 0x32
    114e:	8b a9       	ldd	r24, Y+51	; 0x33
    1150:	9c a9       	ldd	r25, Y+52	; 0x34
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	5f e3       	ldi	r21, 0x3F	; 63
    115a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    115e:	88 23       	and	r24, r24
    1160:	2c f4       	brge	.+10     	; 0x116c <Buzzer_Mode+0x33a>
		__ticks = 1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	98 ab       	std	Y+48, r25	; 0x30
    1168:	8f a7       	std	Y+47, r24	; 0x2f
    116a:	3f c0       	rjmp	.+126    	; 0x11ea <Buzzer_Mode+0x3b8>
	else if (__tmp > 65535)
    116c:	69 a9       	ldd	r22, Y+49	; 0x31
    116e:	7a a9       	ldd	r23, Y+50	; 0x32
    1170:	8b a9       	ldd	r24, Y+51	; 0x33
    1172:	9c a9       	ldd	r25, Y+52	; 0x34
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	57 e4       	ldi	r21, 0x47	; 71
    117c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1180:	18 16       	cp	r1, r24
    1182:	4c f5       	brge	.+82     	; 0x11d6 <Buzzer_Mode+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1184:	6d a9       	ldd	r22, Y+53	; 0x35
    1186:	7e a9       	ldd	r23, Y+54	; 0x36
    1188:	8f a9       	ldd	r24, Y+55	; 0x37
    118a:	98 ad       	ldd	r25, Y+56	; 0x38
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e2       	ldi	r20, 0x20	; 32
    1192:	51 e4       	ldi	r21, 0x41	; 65
    1194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	bc 01       	movw	r22, r24
    119e:	cd 01       	movw	r24, r26
    11a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	98 ab       	std	Y+48, r25	; 0x30
    11aa:	8f a7       	std	Y+47, r24	; 0x2f
    11ac:	0f c0       	rjmp	.+30     	; 0x11cc <Buzzer_Mode+0x39a>
    11ae:	89 e1       	ldi	r24, 0x19	; 25
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	9e a7       	std	Y+46, r25	; 0x2e
    11b4:	8d a7       	std	Y+45, r24	; 0x2d
    11b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    11b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <Buzzer_Mode+0x388>
    11be:	9e a7       	std	Y+46, r25	; 0x2e
    11c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c4:	98 a9       	ldd	r25, Y+48	; 0x30
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	98 ab       	std	Y+48, r25	; 0x30
    11ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ce:	98 a9       	ldd	r25, Y+48	; 0x30
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	69 f7       	brne	.-38     	; 0x11ae <Buzzer_Mode+0x37c>
    11d4:	14 c0       	rjmp	.+40     	; 0x11fe <Buzzer_Mode+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d6:	69 a9       	ldd	r22, Y+49	; 0x31
    11d8:	7a a9       	ldd	r23, Y+50	; 0x32
    11da:	8b a9       	ldd	r24, Y+51	; 0x33
    11dc:	9c a9       	ldd	r25, Y+52	; 0x34
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	98 ab       	std	Y+48, r25	; 0x30
    11e8:	8f a7       	std	Y+47, r24	; 0x2f
    11ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ec:	98 a9       	ldd	r25, Y+48	; 0x30
    11ee:	9c a7       	std	Y+44, r25	; 0x2c
    11f0:	8b a7       	std	Y+43, r24	; 0x2b
    11f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <Buzzer_Mode+0x3c4>
    11fa:	9c a7       	std	Y+44, r25	; 0x2c
    11fc:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			Buzzer(OFF);
			_delay_ms(10);
		}
		_delay_ms(1000);
		for(count=0; count<u8Freq2; count++)
    11fe:	fe 01       	movw	r30, r28
    1200:	eb 5a       	subi	r30, 0xAB	; 171
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	11 82       	std	Z+1, r1	; 0x01
    1206:	10 82       	st	Z, r1
    1208:	f6 c0       	rjmp	.+492    	; 0x13f6 <Buzzer_Mode+0x5c4>
		{
			Buzzer(ON);
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	0e 94 0a 07 	call	0xe14	; 0xe14 <Buzzer>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a0 e2       	ldi	r26, 0x20	; 32
    1216:	b1 e4       	ldi	r27, 0x41	; 65
    1218:	8f a3       	std	Y+39, r24	; 0x27
    121a:	98 a7       	std	Y+40, r25	; 0x28
    121c:	a9 a7       	std	Y+41, r26	; 0x29
    121e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1220:	6f a1       	ldd	r22, Y+39	; 0x27
    1222:	78 a5       	ldd	r23, Y+40	; 0x28
    1224:	89 a5       	ldd	r24, Y+41	; 0x29
    1226:	9a a5       	ldd	r25, Y+42	; 0x2a
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	4a e7       	ldi	r20, 0x7A	; 122
    122e:	53 e4       	ldi	r21, 0x43	; 67
    1230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	8b a3       	std	Y+35, r24	; 0x23
    123a:	9c a3       	std	Y+36, r25	; 0x24
    123c:	ad a3       	std	Y+37, r26	; 0x25
    123e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1240:	6b a1       	ldd	r22, Y+35	; 0x23
    1242:	7c a1       	ldd	r23, Y+36	; 0x24
    1244:	8d a1       	ldd	r24, Y+37	; 0x25
    1246:	9e a1       	ldd	r25, Y+38	; 0x26
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e8       	ldi	r20, 0x80	; 128
    124e:	5f e3       	ldi	r21, 0x3F	; 63
    1250:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1254:	88 23       	and	r24, r24
    1256:	2c f4       	brge	.+10     	; 0x1262 <Buzzer_Mode+0x430>
		__ticks = 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9a a3       	std	Y+34, r25	; 0x22
    125e:	89 a3       	std	Y+33, r24	; 0x21
    1260:	3f c0       	rjmp	.+126    	; 0x12e0 <Buzzer_Mode+0x4ae>
	else if (__tmp > 65535)
    1262:	6b a1       	ldd	r22, Y+35	; 0x23
    1264:	7c a1       	ldd	r23, Y+36	; 0x24
    1266:	8d a1       	ldd	r24, Y+37	; 0x25
    1268:	9e a1       	ldd	r25, Y+38	; 0x26
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	3f ef       	ldi	r19, 0xFF	; 255
    126e:	4f e7       	ldi	r20, 0x7F	; 127
    1270:	57 e4       	ldi	r21, 0x47	; 71
    1272:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1276:	18 16       	cp	r1, r24
    1278:	4c f5       	brge	.+82     	; 0x12cc <Buzzer_Mode+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127a:	6f a1       	ldd	r22, Y+39	; 0x27
    127c:	78 a5       	ldd	r23, Y+40	; 0x28
    127e:	89 a5       	ldd	r24, Y+41	; 0x29
    1280:	9a a5       	ldd	r25, Y+42	; 0x2a
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e2       	ldi	r20, 0x20	; 32
    1288:	51 e4       	ldi	r21, 0x41	; 65
    128a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	9a a3       	std	Y+34, r25	; 0x22
    12a0:	89 a3       	std	Y+33, r24	; 0x21
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <Buzzer_Mode+0x490>
    12a4:	89 e1       	ldi	r24, 0x19	; 25
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	98 a3       	std	Y+32, r25	; 0x20
    12aa:	8f 8f       	std	Y+31, r24	; 0x1f
    12ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ae:	98 a1       	ldd	r25, Y+32	; 0x20
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <Buzzer_Mode+0x47e>
    12b4:	98 a3       	std	Y+32, r25	; 0x20
    12b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b8:	89 a1       	ldd	r24, Y+33	; 0x21
    12ba:	9a a1       	ldd	r25, Y+34	; 0x22
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	9a a3       	std	Y+34, r25	; 0x22
    12c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c2:	89 a1       	ldd	r24, Y+33	; 0x21
    12c4:	9a a1       	ldd	r25, Y+34	; 0x22
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	69 f7       	brne	.-38     	; 0x12a4 <Buzzer_Mode+0x472>
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <Buzzer_Mode+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12cc:	6b a1       	ldd	r22, Y+35	; 0x23
    12ce:	7c a1       	ldd	r23, Y+36	; 0x24
    12d0:	8d a1       	ldd	r24, Y+37	; 0x25
    12d2:	9e a1       	ldd	r25, Y+38	; 0x26
    12d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9a a3       	std	Y+34, r25	; 0x22
    12de:	89 a3       	std	Y+33, r24	; 0x21
    12e0:	89 a1       	ldd	r24, Y+33	; 0x21
    12e2:	9a a1       	ldd	r25, Y+34	; 0x22
    12e4:	9e 8f       	std	Y+30, r25	; 0x1e
    12e6:	8d 8f       	std	Y+29, r24	; 0x1d
    12e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <Buzzer_Mode+0x4ba>
    12f0:	9e 8f       	std	Y+30, r25	; 0x1e
    12f2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			Buzzer(OFF);
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	0e 94 0a 07 	call	0xe14	; 0xe14 <Buzzer>
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a0 e8       	ldi	r26, 0x80	; 128
    1300:	bf e3       	ldi	r27, 0x3F	; 63
    1302:	89 8f       	std	Y+25, r24	; 0x19
    1304:	9a 8f       	std	Y+26, r25	; 0x1a
    1306:	ab 8f       	std	Y+27, r26	; 0x1b
    1308:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130a:	69 8d       	ldd	r22, Y+25	; 0x19
    130c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    130e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1310:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	4a e7       	ldi	r20, 0x7A	; 122
    1318:	53 e4       	ldi	r21, 0x43	; 67
    131a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	8d 8b       	std	Y+21, r24	; 0x15
    1324:	9e 8b       	std	Y+22, r25	; 0x16
    1326:	af 8b       	std	Y+23, r26	; 0x17
    1328:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    132a:	6d 89       	ldd	r22, Y+21	; 0x15
    132c:	7e 89       	ldd	r23, Y+22	; 0x16
    132e:	8f 89       	ldd	r24, Y+23	; 0x17
    1330:	98 8d       	ldd	r25, Y+24	; 0x18
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e8       	ldi	r20, 0x80	; 128
    1338:	5f e3       	ldi	r21, 0x3F	; 63
    133a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    133e:	88 23       	and	r24, r24
    1340:	2c f4       	brge	.+10     	; 0x134c <Buzzer_Mode+0x51a>
		__ticks = 1;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	9c 8b       	std	Y+20, r25	; 0x14
    1348:	8b 8b       	std	Y+19, r24	; 0x13
    134a:	3f c0       	rjmp	.+126    	; 0x13ca <Buzzer_Mode+0x598>
	else if (__tmp > 65535)
    134c:	6d 89       	ldd	r22, Y+21	; 0x15
    134e:	7e 89       	ldd	r23, Y+22	; 0x16
    1350:	8f 89       	ldd	r24, Y+23	; 0x17
    1352:	98 8d       	ldd	r25, Y+24	; 0x18
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	3f ef       	ldi	r19, 0xFF	; 255
    1358:	4f e7       	ldi	r20, 0x7F	; 127
    135a:	57 e4       	ldi	r21, 0x47	; 71
    135c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1360:	18 16       	cp	r1, r24
    1362:	4c f5       	brge	.+82     	; 0x13b6 <Buzzer_Mode+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1364:	69 8d       	ldd	r22, Y+25	; 0x19
    1366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    136a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e2       	ldi	r20, 0x20	; 32
    1372:	51 e4       	ldi	r21, 0x41	; 65
    1374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	9c 8b       	std	Y+20, r25	; 0x14
    138a:	8b 8b       	std	Y+19, r24	; 0x13
    138c:	0f c0       	rjmp	.+30     	; 0x13ac <Buzzer_Mode+0x57a>
    138e:	89 e1       	ldi	r24, 0x19	; 25
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9a 8b       	std	Y+18, r25	; 0x12
    1394:	89 8b       	std	Y+17, r24	; 0x11
    1396:	89 89       	ldd	r24, Y+17	; 0x11
    1398:	9a 89       	ldd	r25, Y+18	; 0x12
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <Buzzer_Mode+0x568>
    139e:	9a 8b       	std	Y+18, r25	; 0x12
    13a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a2:	8b 89       	ldd	r24, Y+19	; 0x13
    13a4:	9c 89       	ldd	r25, Y+20	; 0x14
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	9c 8b       	std	Y+20, r25	; 0x14
    13aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ac:	8b 89       	ldd	r24, Y+19	; 0x13
    13ae:	9c 89       	ldd	r25, Y+20	; 0x14
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	69 f7       	brne	.-38     	; 0x138e <Buzzer_Mode+0x55c>
    13b4:	14 c0       	rjmp	.+40     	; 0x13de <Buzzer_Mode+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b6:	6d 89       	ldd	r22, Y+21	; 0x15
    13b8:	7e 89       	ldd	r23, Y+22	; 0x16
    13ba:	8f 89       	ldd	r24, Y+23	; 0x17
    13bc:	98 8d       	ldd	r25, Y+24	; 0x18
    13be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	9c 8b       	std	Y+20, r25	; 0x14
    13c8:	8b 8b       	std	Y+19, r24	; 0x13
    13ca:	8b 89       	ldd	r24, Y+19	; 0x13
    13cc:	9c 89       	ldd	r25, Y+20	; 0x14
    13ce:	98 8b       	std	Y+16, r25	; 0x10
    13d0:	8f 87       	std	Y+15, r24	; 0x0f
    13d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d4:	98 89       	ldd	r25, Y+16	; 0x10
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <Buzzer_Mode+0x5a4>
    13da:	98 8b       	std	Y+16, r25	; 0x10
    13dc:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			Buzzer(OFF);
			_delay_ms(10);
		}
		_delay_ms(1000);
		for(count=0; count<u8Freq2; count++)
    13de:	de 01       	movw	r26, r28
    13e0:	ab 5a       	subi	r26, 0xAB	; 171
    13e2:	bf 4f       	sbci	r27, 0xFF	; 255
    13e4:	fe 01       	movw	r30, r28
    13e6:	eb 5a       	subi	r30, 0xAB	; 171
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	80 81       	ld	r24, Z
    13ec:	91 81       	ldd	r25, Z+1	; 0x01
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	11 96       	adiw	r26, 0x01	; 1
    13f2:	9c 93       	st	X, r25
    13f4:	8e 93       	st	-X, r24
    13f6:	fe 01       	movw	r30, r28
    13f8:	e8 5a       	subi	r30, 0xA8	; 168
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	80 81       	ld	r24, Z
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	fe 01       	movw	r30, r28
    1404:	eb 5a       	subi	r30, 0xAB	; 171
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 81       	ld	r24, Z
    140a:	91 81       	ldd	r25, Z+1	; 0x01
    140c:	82 17       	cp	r24, r18
    140e:	93 07       	cpc	r25, r19
    1410:	0c f4       	brge	.+2      	; 0x1414 <Buzzer_Mode+0x5e2>
    1412:	fb ce       	rjmp	.-522    	; 0x120a <Buzzer_Mode+0x3d8>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a8 ec       	ldi	r26, 0xC8	; 200
    141a:	b2 e4       	ldi	r27, 0x42	; 66
    141c:	8b 87       	std	Y+11, r24	; 0x0b
    141e:	9c 87       	std	Y+12, r25	; 0x0c
    1420:	ad 87       	std	Y+13, r26	; 0x0d
    1422:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1424:	6b 85       	ldd	r22, Y+11	; 0x0b
    1426:	7c 85       	ldd	r23, Y+12	; 0x0c
    1428:	8d 85       	ldd	r24, Y+13	; 0x0d
    142a:	9e 85       	ldd	r25, Y+14	; 0x0e
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4a e7       	ldi	r20, 0x7A	; 122
    1432:	53 e4       	ldi	r21, 0x43	; 67
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	8f 83       	std	Y+7, r24	; 0x07
    143e:	98 87       	std	Y+8, r25	; 0x08
    1440:	a9 87       	std	Y+9, r26	; 0x09
    1442:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1444:	6f 81       	ldd	r22, Y+7	; 0x07
    1446:	78 85       	ldd	r23, Y+8	; 0x08
    1448:	89 85       	ldd	r24, Y+9	; 0x09
    144a:	9a 85       	ldd	r25, Y+10	; 0x0a
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	2c f4       	brge	.+10     	; 0x1466 <Buzzer_Mode+0x634>
		__ticks = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9e 83       	std	Y+6, r25	; 0x06
    1462:	8d 83       	std	Y+5, r24	; 0x05
    1464:	3f c0       	rjmp	.+126    	; 0x14e4 <Buzzer_Mode+0x6b2>
	else if (__tmp > 65535)
    1466:	6f 81       	ldd	r22, Y+7	; 0x07
    1468:	78 85       	ldd	r23, Y+8	; 0x08
    146a:	89 85       	ldd	r24, Y+9	; 0x09
    146c:	9a 85       	ldd	r25, Y+10	; 0x0a
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	3f ef       	ldi	r19, 0xFF	; 255
    1472:	4f e7       	ldi	r20, 0x7F	; 127
    1474:	57 e4       	ldi	r21, 0x47	; 71
    1476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    147a:	18 16       	cp	r1, r24
    147c:	4c f5       	brge	.+82     	; 0x14d0 <Buzzer_Mode+0x69e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1480:	7c 85       	ldd	r23, Y+12	; 0x0c
    1482:	8d 85       	ldd	r24, Y+13	; 0x0d
    1484:	9e 85       	ldd	r25, Y+14	; 0x0e
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e2       	ldi	r20, 0x20	; 32
    148c:	51 e4       	ldi	r21, 0x41	; 65
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	9e 83       	std	Y+6, r25	; 0x06
    14a4:	8d 83       	std	Y+5, r24	; 0x05
    14a6:	0f c0       	rjmp	.+30     	; 0x14c6 <Buzzer_Mode+0x694>
    14a8:	89 e1       	ldi	r24, 0x19	; 25
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9c 83       	std	Y+4, r25	; 0x04
    14ae:	8b 83       	std	Y+3, r24	; 0x03
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <Buzzer_Mode+0x682>
    14b8:	9c 83       	std	Y+4, r25	; 0x04
    14ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	9e 83       	std	Y+6, r25	; 0x06
    14c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	69 f7       	brne	.-38     	; 0x14a8 <Buzzer_Mode+0x676>
    14ce:	14 c0       	rjmp	.+40     	; 0x14f8 <Buzzer_Mode+0x6c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d0:	6f 81       	ldd	r22, Y+7	; 0x07
    14d2:	78 85       	ldd	r23, Y+8	; 0x08
    14d4:	89 85       	ldd	r24, Y+9	; 0x09
    14d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	9a 81       	ldd	r25, Y+2	; 0x02
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <Buzzer_Mode+0x6be>
    14f4:	9a 83       	std	Y+2, r25	; 0x02
    14f6:	89 83       	std	Y+1, r24	; 0x01
			Buzzer(OFF);
			_delay_ms(1);
		}
		_delay_ms(100);

}
    14f8:	c8 5a       	subi	r28, 0xA8	; 168
    14fa:	df 4f       	sbci	r29, 0xFF	; 255
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	08 95       	ret

00001510 <DIO_voidInit>:

#include "DIO.h"
#include "Utils.h"

void DIO_voidInit()
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
	Clr_Nibble_High(DDRA);
    1518:	aa e3       	ldi	r26, 0x3A	; 58
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ea e3       	ldi	r30, 0x3A	; 58
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8f 70       	andi	r24, 0x0F	; 15
    1524:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRA);
    1526:	aa e3       	ldi	r26, 0x3A	; 58
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ea e3       	ldi	r30, 0x3A	; 58
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 7f       	andi	r24, 0xF0	; 240
    1532:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRB);
    1534:	a7 e3       	ldi	r26, 0x37	; 55
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e7 e3       	ldi	r30, 0x37	; 55
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	8f 70       	andi	r24, 0x0F	; 15
    1540:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRB);
    1542:	a7 e3       	ldi	r26, 0x37	; 55
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 e3       	ldi	r30, 0x37	; 55
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	80 7f       	andi	r24, 0xF0	; 240
    154e:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRC);
    1550:	a4 e3       	ldi	r26, 0x34	; 52
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e4 e3       	ldi	r30, 0x34	; 52
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	8f 70       	andi	r24, 0x0F	; 15
    155c:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRC);
    155e:	a4 e3       	ldi	r26, 0x34	; 52
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e4 e3       	ldi	r30, 0x34	; 52
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	80 7f       	andi	r24, 0xF0	; 240
    156a:	8c 93       	st	X, r24
	Clr_Nibble_High(DDRD);
    156c:	a1 e3       	ldi	r26, 0x31	; 49
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e1 e3       	ldi	r30, 0x31	; 49
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	8f 70       	andi	r24, 0x0F	; 15
    1578:	8c 93       	st	X, r24
	Clr_Nibble_Low(DDRD);
    157a:	a1 e3       	ldi	r26, 0x31	; 49
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e1 e3       	ldi	r30, 0x31	; 49
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	80 7f       	andi	r24, 0xF0	; 240
    1586:	8c 93       	st	X, r24
}
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <DIO_u8GetVal>:

u8 DIO_u8GetVal(u8 u8Port, u8 u8Pin)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <DIO_u8GetVal+0x6>
    1594:	00 d0       	rcall	.+0      	; 0x1596 <DIO_u8GetVal+0x8>
    1596:	0f 92       	push	r0
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	8a 83       	std	Y+2, r24	; 0x02
    159e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Return;
	switch (u8Port)
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	3d 83       	std	Y+5, r19	; 0x05
    15a8:	2c 83       	std	Y+4, r18	; 0x04
    15aa:	4c 81       	ldd	r20, Y+4	; 0x04
    15ac:	5d 81       	ldd	r21, Y+5	; 0x05
    15ae:	41 30       	cpi	r20, 0x01	; 1
    15b0:	51 05       	cpc	r21, r1
    15b2:	b1 f1       	breq	.+108    	; 0x1620 <DIO_u8GetVal+0x92>
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	82 30       	cpi	r24, 0x02	; 2
    15ba:	91 05       	cpc	r25, r1
    15bc:	34 f4       	brge	.+12     	; 0x15ca <DIO_u8GetVal+0x3c>
    15be:	2c 81       	ldd	r18, Y+4	; 0x04
    15c0:	3d 81       	ldd	r19, Y+5	; 0x05
    15c2:	21 15       	cp	r18, r1
    15c4:	31 05       	cpc	r19, r1
    15c6:	71 f0       	breq	.+28     	; 0x15e4 <DIO_u8GetVal+0x56>
    15c8:	84 c0       	rjmp	.+264    	; 0x16d2 <DIO_u8GetVal+0x144>
    15ca:	4c 81       	ldd	r20, Y+4	; 0x04
    15cc:	5d 81       	ldd	r21, Y+5	; 0x05
    15ce:	42 30       	cpi	r20, 0x02	; 2
    15d0:	51 05       	cpc	r21, r1
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <DIO_u8GetVal+0x48>
    15d4:	43 c0       	rjmp	.+134    	; 0x165c <DIO_u8GetVal+0xce>
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	91 05       	cpc	r25, r1
    15de:	09 f4       	brne	.+2      	; 0x15e2 <DIO_u8GetVal+0x54>
    15e0:	5b c0       	rjmp	.+182    	; 0x1698 <DIO_u8GetVal+0x10a>
    15e2:	77 c0       	rjmp	.+238    	; 0x16d2 <DIO_u8GetVal+0x144>
	{
	case 0:
		Local_u8Return=Get_Bit(PINA,u8Pin);
    15e4:	e9 e3       	ldi	r30, 0x39	; 57
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_u8GetVal+0x70>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	2a 95       	dec	r18
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_u8GetVal+0x6c>
    1602:	9a 01       	movw	r18, r20
    1604:	28 23       	and	r18, r24
    1606:	39 23       	and	r19, r25
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a9 01       	movw	r20, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_u8GetVal+0x88>
    1612:	55 95       	asr	r21
    1614:	47 95       	ror	r20
    1616:	8a 95       	dec	r24
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_u8GetVal+0x84>
    161a:	ca 01       	movw	r24, r20
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	59 c0       	rjmp	.+178    	; 0x16d2 <DIO_u8GetVal+0x144>
		break;
	case 1:
		Local_u8Return=Get_Bit(PINB,u8Pin);
    1620:	e6 e3       	ldi	r30, 0x36	; 54
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 c0       	rjmp	.+4      	; 0x163a <DIO_u8GetVal+0xac>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	2a 95       	dec	r18
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <DIO_u8GetVal+0xa8>
    163e:	9a 01       	movw	r18, r20
    1640:	28 23       	and	r18, r24
    1642:	39 23       	and	r19, r25
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a9 01       	movw	r20, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_u8GetVal+0xc4>
    164e:	55 95       	asr	r21
    1650:	47 95       	ror	r20
    1652:	8a 95       	dec	r24
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_u8GetVal+0xc0>
    1656:	ca 01       	movw	r24, r20
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	3b c0       	rjmp	.+118    	; 0x16d2 <DIO_u8GetVal+0x144>
		break;
	case 2:
		Local_u8Return=Get_Bit(PINC,u8Pin);
    165c:	e3 e3       	ldi	r30, 0x33	; 51
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <DIO_u8GetVal+0xe8>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	2a 95       	dec	r18
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <DIO_u8GetVal+0xe4>
    167a:	9a 01       	movw	r18, r20
    167c:	28 23       	and	r18, r24
    167e:	39 23       	and	r19, r25
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	88 2f       	mov	r24, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a9 01       	movw	r20, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <DIO_u8GetVal+0x100>
    168a:	55 95       	asr	r21
    168c:	47 95       	ror	r20
    168e:	8a 95       	dec	r24
    1690:	e2 f7       	brpl	.-8      	; 0x168a <DIO_u8GetVal+0xfc>
    1692:	ca 01       	movw	r24, r20
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	1d c0       	rjmp	.+58     	; 0x16d2 <DIO_u8GetVal+0x144>
		break;
	case 3:
		Local_u8Return=Get_Bit(PIND,u8Pin);
    1698:	e0 e3       	ldi	r30, 0x30	; 48
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_u8GetVal+0x124>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	2a 95       	dec	r18
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_u8GetVal+0x120>
    16b6:	9a 01       	movw	r18, r20
    16b8:	28 23       	and	r18, r24
    16ba:	39 23       	and	r19, r25
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	a9 01       	movw	r20, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <DIO_u8GetVal+0x13c>
    16c6:	55 95       	asr	r21
    16c8:	47 95       	ror	r20
    16ca:	8a 95       	dec	r24
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <DIO_u8GetVal+0x138>
    16ce:	ca 01       	movw	r24, r20
    16d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Return;
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <DIO_voidWriteVal>:

void DIO_voidWriteVal(u8 u8Port, u8 u8Pin, u8 u8Val)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <DIO_voidWriteVal+0x6>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <DIO_voidWriteVal+0x8>
    16ec:	0f 92       	push	r0
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	6a 83       	std	Y+2, r22	; 0x02
    16f6:	4b 83       	std	Y+3, r20	; 0x03
	switch (u8Port)
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	3d 83       	std	Y+5, r19	; 0x05
    1700:	2c 83       	std	Y+4, r18	; 0x04
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	9d 81       	ldd	r25, Y+5	; 0x05
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	91 05       	cpc	r25, r1
    170a:	09 f4       	brne	.+2      	; 0x170e <DIO_voidWriteVal+0x2a>
    170c:	46 c0       	rjmp	.+140    	; 0x179a <DIO_voidWriteVal+0xb6>
    170e:	2c 81       	ldd	r18, Y+4	; 0x04
    1710:	3d 81       	ldd	r19, Y+5	; 0x05
    1712:	22 30       	cpi	r18, 0x02	; 2
    1714:	31 05       	cpc	r19, r1
    1716:	2c f4       	brge	.+10     	; 0x1722 <DIO_voidWriteVal+0x3e>
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
    171a:	9d 81       	ldd	r25, Y+5	; 0x05
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	71 f0       	breq	.+28     	; 0x173c <DIO_voidWriteVal+0x58>
    1720:	c7 c0       	rjmp	.+398    	; 0x18b0 <DIO_voidWriteVal+0x1cc>
    1722:	2c 81       	ldd	r18, Y+4	; 0x04
    1724:	3d 81       	ldd	r19, Y+5	; 0x05
    1726:	22 30       	cpi	r18, 0x02	; 2
    1728:	31 05       	cpc	r19, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <DIO_voidWriteVal+0x4a>
    172c:	65 c0       	rjmp	.+202    	; 0x17f8 <DIO_voidWriteVal+0x114>
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
    1730:	9d 81       	ldd	r25, Y+5	; 0x05
    1732:	83 30       	cpi	r24, 0x03	; 3
    1734:	91 05       	cpc	r25, r1
    1736:	09 f4       	brne	.+2      	; 0x173a <DIO_voidWriteVal+0x56>
    1738:	8e c0       	rjmp	.+284    	; 0x1856 <DIO_voidWriteVal+0x172>
    173a:	ba c0       	rjmp	.+372    	; 0x18b0 <DIO_voidWriteVal+0x1cc>
		{
		case 0:
			Assign_Bit(PORTA,u8Pin,u8Val);
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	88 23       	and	r24, r24
    1740:	a1 f4       	brne	.+40     	; 0x176a <DIO_voidWriteVal+0x86>
    1742:	ab e3       	ldi	r26, 0x3B	; 59
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	eb e3       	ldi	r30, 0x3B	; 59
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_voidWriteVal+0x7c>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <DIO_voidWriteVal+0x78>
    1764:	80 95       	com	r24
    1766:	84 23       	and	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	09 f0       	breq	.+2      	; 0x1772 <DIO_voidWriteVal+0x8e>
    1770:	9f c0       	rjmp	.+318    	; 0x18b0 <DIO_voidWriteVal+0x1cc>
    1772:	ab e3       	ldi	r26, 0x3B	; 59
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	eb e3       	ldi	r30, 0x3B	; 59
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_voidWriteVal+0xac>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_voidWriteVal+0xa8>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	8b c0       	rjmp	.+278    	; 0x18b0 <DIO_voidWriteVal+0x1cc>
			break;
		case 1:
			Assign_Bit(PORTB,u8Pin,u8Val);
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	88 23       	and	r24, r24
    179e:	a1 f4       	brne	.+40     	; 0x17c8 <DIO_voidWriteVal+0xe4>
    17a0:	a8 e3       	ldi	r26, 0x38	; 56
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e8 e3       	ldi	r30, 0x38	; 56
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 2e       	mov	r0, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_voidWriteVal+0xda>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	0a 94       	dec	r0
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_voidWriteVal+0xd6>
    17c2:	80 95       	com	r24
    17c4:	84 23       	and	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <DIO_voidWriteVal+0xec>
    17ce:	70 c0       	rjmp	.+224    	; 0x18b0 <DIO_voidWriteVal+0x1cc>
    17d0:	a8 e3       	ldi	r26, 0x38	; 56
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e8 e3       	ldi	r30, 0x38	; 56
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_voidWriteVal+0x10a>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_voidWriteVal+0x106>
    17f2:	84 2b       	or	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	5c c0       	rjmp	.+184    	; 0x18b0 <DIO_voidWriteVal+0x1cc>
			break;
		case 2:
			Assign_Bit(PORTC,u8Pin,u8Val);
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	88 23       	and	r24, r24
    17fc:	a1 f4       	brne	.+40     	; 0x1826 <DIO_voidWriteVal+0x142>
    17fe:	a5 e3       	ldi	r26, 0x35	; 53
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e3       	ldi	r30, 0x35	; 53
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_voidWriteVal+0x138>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_voidWriteVal+0x134>
    1820:	80 95       	com	r24
    1822:	84 23       	and	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	09 f0       	breq	.+2      	; 0x182e <DIO_voidWriteVal+0x14a>
    182c:	41 c0       	rjmp	.+130    	; 0x18b0 <DIO_voidWriteVal+0x1cc>
    182e:	a5 e3       	ldi	r26, 0x35	; 53
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e5 e3       	ldi	r30, 0x35	; 53
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <DIO_voidWriteVal+0x168>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <DIO_voidWriteVal+0x164>
    1850:	84 2b       	or	r24, r20
    1852:	8c 93       	st	X, r24
    1854:	2d c0       	rjmp	.+90     	; 0x18b0 <DIO_voidWriteVal+0x1cc>
			break;
		case 3:
			Assign_Bit(PORTD,u8Pin,u8Val);
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	88 23       	and	r24, r24
    185a:	a1 f4       	brne	.+40     	; 0x1884 <DIO_voidWriteVal+0x1a0>
    185c:	a2 e3       	ldi	r26, 0x32	; 50
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e2 e3       	ldi	r30, 0x32	; 50
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	48 2f       	mov	r20, r24
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 2e       	mov	r0, r18
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_voidWriteVal+0x196>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	0a 94       	dec	r0
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <DIO_voidWriteVal+0x192>
    187e:	80 95       	com	r24
    1880:	84 23       	and	r24, r20
    1882:	8c 93       	st	X, r24
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	99 f4       	brne	.+38     	; 0x18b0 <DIO_voidWriteVal+0x1cc>
    188a:	a2 e3       	ldi	r26, 0x32	; 50
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e2 e3       	ldi	r30, 0x32	; 50
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_voidWriteVal+0x1c4>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_voidWriteVal+0x1c0>
    18ac:	84 2b       	or	r24, r20
    18ae:	8c 93       	st	X, r24
		}

}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <DIO_voidSetDir>:

void DIO_voidSetDir(u8 u8Port, u8 u8Pin, u8 u8Dir)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <DIO_voidSetDir+0x6>
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <DIO_voidSetDir+0x8>
    18c8:	0f 92       	push	r0
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	6a 83       	std	Y+2, r22	; 0x02
    18d2:	4b 83       	std	Y+3, r20	; 0x03
	switch (u8Port)
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	3d 83       	std	Y+5, r19	; 0x05
    18dc:	2c 83       	std	Y+4, r18	; 0x04
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	9d 81       	ldd	r25, Y+5	; 0x05
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	91 05       	cpc	r25, r1
    18e6:	09 f4       	brne	.+2      	; 0x18ea <DIO_voidSetDir+0x2a>
    18e8:	46 c0       	rjmp	.+140    	; 0x1976 <DIO_voidSetDir+0xb6>
    18ea:	2c 81       	ldd	r18, Y+4	; 0x04
    18ec:	3d 81       	ldd	r19, Y+5	; 0x05
    18ee:	22 30       	cpi	r18, 0x02	; 2
    18f0:	31 05       	cpc	r19, r1
    18f2:	2c f4       	brge	.+10     	; 0x18fe <DIO_voidSetDir+0x3e>
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
    18f6:	9d 81       	ldd	r25, Y+5	; 0x05
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	71 f0       	breq	.+28     	; 0x1918 <DIO_voidSetDir+0x58>
    18fc:	c7 c0       	rjmp	.+398    	; 0x1a8c <DIO_voidSetDir+0x1cc>
    18fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1900:	3d 81       	ldd	r19, Y+5	; 0x05
    1902:	22 30       	cpi	r18, 0x02	; 2
    1904:	31 05       	cpc	r19, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <DIO_voidSetDir+0x4a>
    1908:	65 c0       	rjmp	.+202    	; 0x19d4 <DIO_voidSetDir+0x114>
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	9d 81       	ldd	r25, Y+5	; 0x05
    190e:	83 30       	cpi	r24, 0x03	; 3
    1910:	91 05       	cpc	r25, r1
    1912:	09 f4       	brne	.+2      	; 0x1916 <DIO_voidSetDir+0x56>
    1914:	8e c0       	rjmp	.+284    	; 0x1a32 <DIO_voidSetDir+0x172>
    1916:	ba c0       	rjmp	.+372    	; 0x1a8c <DIO_voidSetDir+0x1cc>
		{
		case 0:
			Assign_Bit(DDRA,u8Pin,u8Dir);
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	88 23       	and	r24, r24
    191c:	a1 f4       	brne	.+40     	; 0x1946 <DIO_voidSetDir+0x86>
    191e:	aa e3       	ldi	r26, 0x3A	; 58
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ea e3       	ldi	r30, 0x3A	; 58
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_voidSetDir+0x7c>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <DIO_voidSetDir+0x78>
    1940:	80 95       	com	r24
    1942:	84 23       	and	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	09 f0       	breq	.+2      	; 0x194e <DIO_voidSetDir+0x8e>
    194c:	9f c0       	rjmp	.+318    	; 0x1a8c <DIO_voidSetDir+0x1cc>
    194e:	aa e3       	ldi	r26, 0x3A	; 58
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	ea e3       	ldi	r30, 0x3A	; 58
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 2e       	mov	r0, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <DIO_voidSetDir+0xac>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	0a 94       	dec	r0
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <DIO_voidSetDir+0xa8>
    1970:	84 2b       	or	r24, r20
    1972:	8c 93       	st	X, r24
    1974:	8b c0       	rjmp	.+278    	; 0x1a8c <DIO_voidSetDir+0x1cc>
			break;
		case 1:
			Assign_Bit(DDRB,u8Pin,u8Dir);
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	88 23       	and	r24, r24
    197a:	a1 f4       	brne	.+40     	; 0x19a4 <DIO_voidSetDir+0xe4>
    197c:	a7 e3       	ldi	r26, 0x37	; 55
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e7 e3       	ldi	r30, 0x37	; 55
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 2e       	mov	r0, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <DIO_voidSetDir+0xda>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <DIO_voidSetDir+0xd6>
    199e:	80 95       	com	r24
    19a0:	84 23       	and	r24, r20
    19a2:	8c 93       	st	X, r24
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	09 f0       	breq	.+2      	; 0x19ac <DIO_voidSetDir+0xec>
    19aa:	70 c0       	rjmp	.+224    	; 0x1a8c <DIO_voidSetDir+0x1cc>
    19ac:	a7 e3       	ldi	r26, 0x37	; 55
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e7 e3       	ldi	r30, 0x37	; 55
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	48 2f       	mov	r20, r24
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	02 2e       	mov	r0, r18
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <DIO_voidSetDir+0x10a>
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	0a 94       	dec	r0
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <DIO_voidSetDir+0x106>
    19ce:	84 2b       	or	r24, r20
    19d0:	8c 93       	st	X, r24
    19d2:	5c c0       	rjmp	.+184    	; 0x1a8c <DIO_voidSetDir+0x1cc>
			break;
		case 2:
			Assign_Bit(DDRC,u8Pin,u8Dir);
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	88 23       	and	r24, r24
    19d8:	a1 f4       	brne	.+40     	; 0x1a02 <DIO_voidSetDir+0x142>
    19da:	a4 e3       	ldi	r26, 0x34	; 52
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e4 e3       	ldi	r30, 0x34	; 52
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_voidSetDir+0x138>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_voidSetDir+0x134>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <DIO_voidSetDir+0x14a>
    1a08:	41 c0       	rjmp	.+130    	; 0x1a8c <DIO_voidSetDir+0x1cc>
    1a0a:	a4 e3       	ldi	r26, 0x34	; 52
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e4 e3       	ldi	r30, 0x34	; 52
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	48 2f       	mov	r20, r24
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 2e       	mov	r0, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <DIO_voidSetDir+0x168>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	0a 94       	dec	r0
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <DIO_voidSetDir+0x164>
    1a2c:	84 2b       	or	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	2d c0       	rjmp	.+90     	; 0x1a8c <DIO_voidSetDir+0x1cc>
			break;
		case 3:
			Assign_Bit(DDRD,u8Pin,u8Dir);
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	88 23       	and	r24, r24
    1a36:	a1 f4       	brne	.+40     	; 0x1a60 <DIO_voidSetDir+0x1a0>
    1a38:	a1 e3       	ldi	r26, 0x31	; 49
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e1 e3       	ldi	r30, 0x31	; 49
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	48 2f       	mov	r20, r24
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 2e       	mov	r0, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_voidSetDir+0x196>
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	0a 94       	dec	r0
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <DIO_voidSetDir+0x192>
    1a5a:	80 95       	com	r24
    1a5c:	84 23       	and	r24, r20
    1a5e:	8c 93       	st	X, r24
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	99 f4       	brne	.+38     	; 0x1a8c <DIO_voidSetDir+0x1cc>
    1a66:	a1 e3       	ldi	r26, 0x31	; 49
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e1 e3       	ldi	r30, 0x31	; 49
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <DIO_voidSetDir+0x1c4>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	0a 94       	dec	r0
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <DIO_voidSetDir+0x1c0>
    1a88:	84 2b       	or	r24, r20
    1a8a:	8c 93       	st	X, r24
		}

}
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <LCD_WriteCommand>:
static u8 charact_number=0;
static u8 current_charact=0;
static u8 English_Char=0;

void LCD_WriteCommand(u8 com)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	6d 97       	sbiw	r28, 0x1d	; 29
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_voidWriteVal(PortD,Pin0,Zero_Volt); /*RS=0*/
    1ab2:	83 e0       	ldi	r24, 0x03	; 3
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_High(com)));
    1abc:	a5 e3       	ldi	r26, 0x35	; 53
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e5 e3       	ldi	r30, 0x35	; 53
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	2f 70       	andi	r18, 0x0F	; 15
    1aca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1acc:	82 95       	swap	r24
    1ace:	8f 70       	andi	r24, 0x0F	; 15
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	90 70       	andi	r25, 0x00	; 0
    1ad6:	82 95       	swap	r24
    1ad8:	92 95       	swap	r25
    1ada:	90 7f       	andi	r25, 0xF0	; 240
    1adc:	98 27       	eor	r25, r24
    1ade:	80 7f       	andi	r24, 0xF0	; 240
    1ae0:	98 27       	eor	r25, r24
    1ae2:	82 2b       	or	r24, r18
    1ae4:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    1ae6:	83 e0       	ldi	r24, 0x03	; 3
    1ae8:	61 e0       	ldi	r22, 0x01	; 1
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a0 e0       	ldi	r26, 0x00	; 0
    1af6:	b0 e4       	ldi	r27, 0x40	; 64
    1af8:	89 8f       	std	Y+25, r24	; 0x19
    1afa:	9a 8f       	std	Y+26, r25	; 0x1a
    1afc:	ab 8f       	std	Y+27, r26	; 0x1b
    1afe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	69 8d       	ldd	r22, Y+25	; 0x19
    1b02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4a e7       	ldi	r20, 0x7A	; 122
    1b0e:	53 e4       	ldi	r21, 0x43	; 67
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	8d 8b       	std	Y+21, r24	; 0x15
    1b1a:	9e 8b       	std	Y+22, r25	; 0x16
    1b1c:	af 8b       	std	Y+23, r26	; 0x17
    1b1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b20:	6d 89       	ldd	r22, Y+21	; 0x15
    1b22:	7e 89       	ldd	r23, Y+22	; 0x16
    1b24:	8f 89       	ldd	r24, Y+23	; 0x17
    1b26:	98 8d       	ldd	r25, Y+24	; 0x18
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <LCD_WriteCommand+0xa6>
		__ticks = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9c 8b       	std	Y+20, r25	; 0x14
    1b3e:	8b 8b       	std	Y+19, r24	; 0x13
    1b40:	3f c0       	rjmp	.+126    	; 0x1bc0 <LCD_WriteCommand+0x124>
	else if (__tmp > 65535)
    1b42:	6d 89       	ldd	r22, Y+21	; 0x15
    1b44:	7e 89       	ldd	r23, Y+22	; 0x16
    1b46:	8f 89       	ldd	r24, Y+23	; 0x17
    1b48:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	57 e4       	ldi	r21, 0x47	; 71
    1b52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	4c f5       	brge	.+82     	; 0x1bac <LCD_WriteCommand+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9c 8b       	std	Y+20, r25	; 0x14
    1b80:	8b 8b       	std	Y+19, r24	; 0x13
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <LCD_WriteCommand+0x106>
    1b84:	89 e1       	ldi	r24, 0x19	; 25
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9a 8b       	std	Y+18, r25	; 0x12
    1b8a:	89 8b       	std	Y+17, r24	; 0x11
    1b8c:	89 89       	ldd	r24, Y+17	; 0x11
    1b8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <LCD_WriteCommand+0xf4>
    1b94:	9a 8b       	std	Y+18, r25	; 0x12
    1b96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ba0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	69 f7       	brne	.-38     	; 0x1b84 <LCD_WriteCommand+0xe8>
    1baa:	14 c0       	rjmp	.+40     	; 0x1bd4 <LCD_WriteCommand+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bac:	6d 89       	ldd	r22, Y+21	; 0x15
    1bae:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9c 8b       	std	Y+20, r25	; 0x14
    1bbe:	8b 8b       	std	Y+19, r24	; 0x13
    1bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc4:	98 8b       	std	Y+16, r25	; 0x10
    1bc6:	8f 87       	std	Y+15, r24	; 0x0f
    1bc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bca:	98 89       	ldd	r25, Y+16	; 0x10
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_WriteCommand+0x130>
    1bd0:	98 8b       	std	Y+16, r25	; 0x10
    1bd2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
    1bd6:	61 e0       	ldi	r22, 0x01	; 1
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_Low(com)));
    1bde:	a5 e3       	ldi	r26, 0x35	; 53
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e5 e3       	ldi	r30, 0x35	; 53
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	28 2f       	mov	r18, r24
    1bea:	2f 70       	andi	r18, 0x0F	; 15
    1bec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	8f 70       	andi	r24, 0x0F	; 15
    1bf4:	90 70       	andi	r25, 0x00	; 0
    1bf6:	82 95       	swap	r24
    1bf8:	92 95       	swap	r25
    1bfa:	90 7f       	andi	r25, 0xF0	; 240
    1bfc:	98 27       	eor	r25, r24
    1bfe:	80 7f       	andi	r24, 0xF0	; 240
    1c00:	98 27       	eor	r25, r24
    1c02:	82 2b       	or	r24, r18
    1c04:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    1c06:	83 e0       	ldi	r24, 0x03	; 3
    1c08:	61 e0       	ldi	r22, 0x01	; 1
    1c0a:	41 e0       	ldi	r20, 0x01	; 1
    1c0c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e0       	ldi	r26, 0x00	; 0
    1c16:	b0 e4       	ldi	r27, 0x40	; 64
    1c18:	8b 87       	std	Y+11, r24	; 0x0b
    1c1a:	9c 87       	std	Y+12, r25	; 0x0c
    1c1c:	ad 87       	std	Y+13, r26	; 0x0d
    1c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a e7       	ldi	r20, 0x7A	; 122
    1c2e:	53 e4       	ldi	r21, 0x43	; 67
    1c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8f 83       	std	Y+7, r24	; 0x07
    1c3a:	98 87       	std	Y+8, r25	; 0x08
    1c3c:	a9 87       	std	Y+9, r26	; 0x09
    1c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <LCD_WriteCommand+0x1c6>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <LCD_WriteCommand+0x244>
	else if (__tmp > 65535)
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <LCD_WriteCommand+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <LCD_WriteCommand+0x226>
    1ca4:	89 e1       	ldi	r24, 0x19	; 25
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9c 83       	std	Y+4, r25	; 0x04
    1caa:	8b 83       	std	Y+3, r24	; 0x03
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_WriteCommand+0x214>
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <LCD_WriteCommand+0x208>
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <LCD_WriteCommand+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9e 83       	std	Y+6, r25	; 0x06
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <LCD_WriteCommand+0x250>
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    1cf4:	83 e0       	ldi	r24, 0x03	; 3
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>

}
    1cfe:	6d 96       	adiw	r28, 0x1d	; 29
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <LCD_Init>:

void LCD_Init(void)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	aa 97       	sbiw	r28, 0x2a	; 42
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetDir(PortD,Pin0,Output); /*RS(DDRD,0) output*/
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	60 e0       	ldi	r22, 0x00	; 0
    1d28:	41 e0       	ldi	r20, 0x01	; 1
    1d2a:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
	DIO_voidSetDir(PortD,Pin1,Output); /*E(DDRD,1) output*/
    1d2e:	83 e0       	ldi	r24, 0x03	; 3
    1d30:	61 e0       	ldi	r22, 0x01	; 1
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
	/*LCD Data Bus as output */
	DIO_voidSetDir(PortC,Pin4,Output);
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	64 e0       	ldi	r22, 0x04	; 4
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin5,Output);
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	65 e0       	ldi	r22, 0x05	; 5
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin6,Output);
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	66 e0       	ldi	r22, 0x06	; 6
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
	DIO_voidSetDir(PortC,Pin7,Output);
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	67 e0       	ldi	r22, 0x07	; 7
    1d5a:	41 e0       	ldi	r20, 0x01	; 1
    1d5c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a8 e4       	ldi	r26, 0x48	; 72
    1d66:	b2 e4       	ldi	r27, 0x42	; 66
    1d68:	8f a3       	std	Y+39, r24	; 0x27
    1d6a:	98 a7       	std	Y+40, r25	; 0x28
    1d6c:	a9 a7       	std	Y+41, r26	; 0x29
    1d6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d70:	6f a1       	ldd	r22, Y+39	; 0x27
    1d72:	78 a5       	ldd	r23, Y+40	; 0x28
    1d74:	89 a5       	ldd	r24, Y+41	; 0x29
    1d76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	4a e7       	ldi	r20, 0x7A	; 122
    1d7e:	53 e4       	ldi	r21, 0x43	; 67
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	8b a3       	std	Y+35, r24	; 0x23
    1d8a:	9c a3       	std	Y+36, r25	; 0x24
    1d8c:	ad a3       	std	Y+37, r26	; 0x25
    1d8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d90:	6b a1       	ldd	r22, Y+35	; 0x23
    1d92:	7c a1       	ldd	r23, Y+36	; 0x24
    1d94:	8d a1       	ldd	r24, Y+37	; 0x25
    1d96:	9e a1       	ldd	r25, Y+38	; 0x26
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e8       	ldi	r20, 0x80	; 128
    1d9e:	5f e3       	ldi	r21, 0x3F	; 63
    1da0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da4:	88 23       	and	r24, r24
    1da6:	2c f4       	brge	.+10     	; 0x1db2 <LCD_Init+0xa2>
		__ticks = 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	9a a3       	std	Y+34, r25	; 0x22
    1dae:	89 a3       	std	Y+33, r24	; 0x21
    1db0:	3f c0       	rjmp	.+126    	; 0x1e30 <LCD_Init+0x120>
	else if (__tmp > 65535)
    1db2:	6b a1       	ldd	r22, Y+35	; 0x23
    1db4:	7c a1       	ldd	r23, Y+36	; 0x24
    1db6:	8d a1       	ldd	r24, Y+37	; 0x25
    1db8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	3f ef       	ldi	r19, 0xFF	; 255
    1dbe:	4f e7       	ldi	r20, 0x7F	; 127
    1dc0:	57 e4       	ldi	r21, 0x47	; 71
    1dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc6:	18 16       	cp	r1, r24
    1dc8:	4c f5       	brge	.+82     	; 0x1e1c <LCD_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dca:	6f a1       	ldd	r22, Y+39	; 0x27
    1dcc:	78 a5       	ldd	r23, Y+40	; 0x28
    1dce:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e2       	ldi	r20, 0x20	; 32
    1dd8:	51 e4       	ldi	r21, 0x41	; 65
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9a a3       	std	Y+34, r25	; 0x22
    1df0:	89 a3       	std	Y+33, r24	; 0x21
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <LCD_Init+0x102>
    1df4:	89 e1       	ldi	r24, 0x19	; 25
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	98 a3       	std	Y+32, r25	; 0x20
    1dfa:	8f 8f       	std	Y+31, r24	; 0x1f
    1dfc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dfe:	98 a1       	ldd	r25, Y+32	; 0x20
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <LCD_Init+0xf0>
    1e04:	98 a3       	std	Y+32, r25	; 0x20
    1e06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e08:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	9a a3       	std	Y+34, r25	; 0x22
    1e10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e12:	89 a1       	ldd	r24, Y+33	; 0x21
    1e14:	9a a1       	ldd	r25, Y+34	; 0x22
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	69 f7       	brne	.-38     	; 0x1df4 <LCD_Init+0xe4>
    1e1a:	14 c0       	rjmp	.+40     	; 0x1e44 <LCD_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e20:	8d a1       	ldd	r24, Y+37	; 0x25
    1e22:	9e a1       	ldd	r25, Y+38	; 0x26
    1e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	9a a3       	std	Y+34, r25	; 0x22
    1e2e:	89 a3       	std	Y+33, r24	; 0x21
    1e30:	89 a1       	ldd	r24, Y+33	; 0x21
    1e32:	9a a1       	ldd	r25, Y+34	; 0x22
    1e34:	9e 8f       	std	Y+30, r25	; 0x1e
    1e36:	8d 8f       	std	Y+29, r24	; 0x1d
    1e38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <LCD_Init+0x12c>
    1e40:	9e 8f       	std	Y+30, r25	; 0x1e
    1e42:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(50);
	LCD_WriteCommand(0x02);
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <LCD_WriteCommand>

	/*LCD_WriteCommand(0x20); for 1 line*/
	LCD_WriteCommand(0x28); /*for 2 lines*/
    1e4a:	88 e2       	ldi	r24, 0x28	; 40
    1e4c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <LCD_WriteCommand>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e2       	ldi	r26, 0x20	; 32
    1e56:	b1 e4       	ldi	r27, 0x41	; 65
    1e58:	89 8f       	std	Y+25, r24	; 0x19
    1e5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	69 8d       	ldd	r22, Y+25	; 0x19
    1e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a e7       	ldi	r20, 0x7A	; 122
    1e6e:	53 e4       	ldi	r21, 0x43	; 67
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	8d 8b       	std	Y+21, r24	; 0x15
    1e7a:	9e 8b       	std	Y+22, r25	; 0x16
    1e7c:	af 8b       	std	Y+23, r26	; 0x17
    1e7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e80:	6d 89       	ldd	r22, Y+21	; 0x15
    1e82:	7e 89       	ldd	r23, Y+22	; 0x16
    1e84:	8f 89       	ldd	r24, Y+23	; 0x17
    1e86:	98 8d       	ldd	r25, Y+24	; 0x18
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <LCD_Init+0x192>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9c 8b       	std	Y+20, r25	; 0x14
    1e9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ea0:	3f c0       	rjmp	.+126    	; 0x1f20 <LCD_Init+0x210>
	else if (__tmp > 65535)
    1ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	4c f5       	brge	.+82     	; 0x1f0c <LCD_Init+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eba:	69 8d       	ldd	r22, Y+25	; 0x19
    1ebc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ebe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9c 8b       	std	Y+20, r25	; 0x14
    1ee0:	8b 8b       	std	Y+19, r24	; 0x13
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <LCD_Init+0x1f2>
    1ee4:	89 e1       	ldi	r24, 0x19	; 25
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9a 8b       	std	Y+18, r25	; 0x12
    1eea:	89 8b       	std	Y+17, r24	; 0x11
    1eec:	89 89       	ldd	r24, Y+17	; 0x11
    1eee:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_Init+0x1e0>
    1ef4:	9a 8b       	std	Y+18, r25	; 0x12
    1ef6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    1efa:	9c 89       	ldd	r25, Y+20	; 0x14
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	9c 8b       	std	Y+20, r25	; 0x14
    1f00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f02:	8b 89       	ldd	r24, Y+19	; 0x13
    1f04:	9c 89       	ldd	r25, Y+20	; 0x14
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <LCD_Init+0x1d4>
    1f0a:	14 c0       	rjmp	.+40     	; 0x1f34 <LCD_Init+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f10:	8f 89       	ldd	r24, Y+23	; 0x17
    1f12:	98 8d       	ldd	r25, Y+24	; 0x18
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9c 8b       	std	Y+20, r25	; 0x14
    1f1e:	8b 8b       	std	Y+19, r24	; 0x13
    1f20:	8b 89       	ldd	r24, Y+19	; 0x13
    1f22:	9c 89       	ldd	r25, Y+20	; 0x14
    1f24:	98 8b       	std	Y+16, r25	; 0x10
    1f26:	8f 87       	std	Y+15, r24	; 0x0f
    1f28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f2a:	98 89       	ldd	r25, Y+16	; 0x10
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_Init+0x21c>
    1f30:	98 8b       	std	Y+16, r25	; 0x10
    1f32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_WriteCommand(0x0c);
    1f34:	8c e0       	ldi	r24, 0x0C	; 12
    1f36:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <LCD_WriteCommand>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a0 e2       	ldi	r26, 0x20	; 32
    1f40:	b1 e4       	ldi	r27, 0x41	; 65
    1f42:	8b 87       	std	Y+11, r24	; 0x0b
    1f44:	9c 87       	std	Y+12, r25	; 0x0c
    1f46:	ad 87       	std	Y+13, r26	; 0x0d
    1f48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a e7       	ldi	r20, 0x7A	; 122
    1f58:	53 e4       	ldi	r21, 0x43	; 67
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	8f 83       	std	Y+7, r24	; 0x07
    1f64:	98 87       	std	Y+8, r25	; 0x08
    1f66:	a9 87       	std	Y+9, r26	; 0x09
    1f68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <LCD_Init+0x27c>
		__ticks = 1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <LCD_Init+0x2fa>
	else if (__tmp > 65535)
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	78 85       	ldd	r23, Y+8	; 0x08
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f e7       	ldi	r20, 0x7F	; 127
    1f9a:	57 e4       	ldi	r21, 0x47	; 71
    1f9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	4c f5       	brge	.+82     	; 0x1ff6 <LCD_Init+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <LCD_Init+0x2dc>
    1fce:	89 e1       	ldi	r24, 0x19	; 25
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_Init+0x2ca>
    1fde:	9c 83       	std	Y+4, r25	; 0x04
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <LCD_Init+0x2be>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <LCD_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	9a 83       	std	Y+2, r25	; 0x02
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <LCD_Init+0x306>
    201a:	9a 83       	std	Y+2, r25	; 0x02
    201c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	LCD_CLear();
    201e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LCD_CLear>
	LCD_Set_Entry_Mode(1);
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	0e 94 58 13 	call	0x26b0	; 0x26b0 <LCD_Set_Entry_Mode>

}
    2028:	aa 96       	adiw	r28, 0x2a	; 42
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <LCD_WriteData>:

void LCD_WriteData(u8 com)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	6d 97       	sbiw	r28, 0x1d	; 29
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	8d 8f       	std	Y+29, r24	; 0x1d

	Set_Bit(PORTD,0); /*RS*/
    2050:	a2 e3       	ldi	r26, 0x32	; 50
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e2 e3       	ldi	r30, 0x32	; 50
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	81 60       	ori	r24, 0x01	; 1
    205c:	8c 93       	st	X, r24

	Assign_Nibble_High(PORTC,(Get_Nibble_High(com)));
    205e:	a5 e3       	ldi	r26, 0x35	; 53
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e5 e3       	ldi	r30, 0x35	; 53
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	28 2f       	mov	r18, r24
    206a:	2f 70       	andi	r18, 0x0F	; 15
    206c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    206e:	82 95       	swap	r24
    2070:	8f 70       	andi	r24, 0x0F	; 15
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	90 70       	andi	r25, 0x00	; 0
    2078:	82 95       	swap	r24
    207a:	92 95       	swap	r25
    207c:	90 7f       	andi	r25, 0xF0	; 240
    207e:	98 27       	eor	r25, r24
    2080:	80 7f       	andi	r24, 0xF0	; 240
    2082:	98 27       	eor	r25, r24
    2084:	82 2b       	or	r24, r18
    2086:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    2088:	83 e0       	ldi	r24, 0x03	; 3
    208a:	61 e0       	ldi	r22, 0x01	; 1
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a0 ea       	ldi	r26, 0xA0	; 160
    2098:	b1 e4       	ldi	r27, 0x41	; 65
    209a:	89 8f       	std	Y+25, r24	; 0x19
    209c:	9a 8f       	std	Y+26, r25	; 0x1a
    209e:	ab 8f       	std	Y+27, r26	; 0x1b
    20a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a2:	69 8d       	ldd	r22, Y+25	; 0x19
    20a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	4a e7       	ldi	r20, 0x7A	; 122
    20b0:	53 e4       	ldi	r21, 0x43	; 67
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8d 8b       	std	Y+21, r24	; 0x15
    20bc:	9e 8b       	std	Y+22, r25	; 0x16
    20be:	af 8b       	std	Y+23, r26	; 0x17
    20c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c2:	6d 89       	ldd	r22, Y+21	; 0x15
    20c4:	7e 89       	ldd	r23, Y+22	; 0x16
    20c6:	8f 89       	ldd	r24, Y+23	; 0x17
    20c8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <LCD_WriteData+0xaa>
		__ticks = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
    20e2:	3f c0       	rjmp	.+126    	; 0x2162 <LCD_WriteData+0x128>
	else if (__tmp > 65535)
    20e4:	6d 89       	ldd	r22, Y+21	; 0x15
    20e6:	7e 89       	ldd	r23, Y+22	; 0x16
    20e8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ea:	98 8d       	ldd	r25, Y+24	; 0x18
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	3f ef       	ldi	r19, 0xFF	; 255
    20f0:	4f e7       	ldi	r20, 0x7F	; 127
    20f2:	57 e4       	ldi	r21, 0x47	; 71
    20f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f8:	18 16       	cp	r1, r24
    20fa:	4c f5       	brge	.+82     	; 0x214e <LCD_WriteData+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fc:	69 8d       	ldd	r22, Y+25	; 0x19
    20fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2100:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2102:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	51 e4       	ldi	r21, 0x41	; 65
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9c 8b       	std	Y+20, r25	; 0x14
    2122:	8b 8b       	std	Y+19, r24	; 0x13
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <LCD_WriteData+0x10a>
    2126:	89 e1       	ldi	r24, 0x19	; 25
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9a 8b       	std	Y+18, r25	; 0x12
    212c:	89 8b       	std	Y+17, r24	; 0x11
    212e:	89 89       	ldd	r24, Y+17	; 0x11
    2130:	9a 89       	ldd	r25, Y+18	; 0x12
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <LCD_WriteData+0xf8>
    2136:	9a 8b       	std	Y+18, r25	; 0x12
    2138:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213a:	8b 89       	ldd	r24, Y+19	; 0x13
    213c:	9c 89       	ldd	r25, Y+20	; 0x14
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	9c 8b       	std	Y+20, r25	; 0x14
    2142:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2144:	8b 89       	ldd	r24, Y+19	; 0x13
    2146:	9c 89       	ldd	r25, Y+20	; 0x14
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	69 f7       	brne	.-38     	; 0x2126 <LCD_WriteData+0xec>
    214c:	14 c0       	rjmp	.+40     	; 0x2176 <LCD_WriteData+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	6d 89       	ldd	r22, Y+21	; 0x15
    2150:	7e 89       	ldd	r23, Y+22	; 0x16
    2152:	8f 89       	ldd	r24, Y+23	; 0x17
    2154:	98 8d       	ldd	r25, Y+24	; 0x18
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9c 8b       	std	Y+20, r25	; 0x14
    2160:	8b 8b       	std	Y+19, r24	; 0x13
    2162:	8b 89       	ldd	r24, Y+19	; 0x13
    2164:	9c 89       	ldd	r25, Y+20	; 0x14
    2166:	98 8b       	std	Y+16, r25	; 0x10
    2168:	8f 87       	std	Y+15, r24	; 0x0f
    216a:	8f 85       	ldd	r24, Y+15	; 0x0f
    216c:	98 89       	ldd	r25, Y+16	; 0x10
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <LCD_WriteData+0x134>
    2172:	98 8b       	std	Y+16, r25	; 0x10
    2174:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    2176:	83 e0       	ldi	r24, 0x03	; 3
    2178:	61 e0       	ldi	r22, 0x01	; 1
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>

	Assign_Nibble_High(PORTC,(Get_Nibble_Low(com)));
    2180:	a5 e3       	ldi	r26, 0x35	; 53
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e5 e3       	ldi	r30, 0x35	; 53
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	28 2f       	mov	r18, r24
    218c:	2f 70       	andi	r18, 0x0F	; 15
    218e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	8f 70       	andi	r24, 0x0F	; 15
    2196:	90 70       	andi	r25, 0x00	; 0
    2198:	82 95       	swap	r24
    219a:	92 95       	swap	r25
    219c:	90 7f       	andi	r25, 0xF0	; 240
    219e:	98 27       	eor	r25, r24
    21a0:	80 7f       	andi	r24, 0xF0	; 240
    21a2:	98 27       	eor	r25, r24
    21a4:	82 2b       	or	r24, r18
    21a6:	8c 93       	st	X, r24
	DIO_voidWriteVal(PortD,Pin1,Five_Volt); /*E=1*/
    21a8:	83 e0       	ldi	r24, 0x03	; 3
    21aa:	61 e0       	ldi	r22, 0x01	; 1
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 ea       	ldi	r26, 0xA0	; 160
    21b8:	b1 e4       	ldi	r27, 0x41	; 65
    21ba:	8b 87       	std	Y+11, r24	; 0x0b
    21bc:	9c 87       	std	Y+12, r25	; 0x0c
    21be:	ad 87       	std	Y+13, r26	; 0x0d
    21c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4a e7       	ldi	r20, 0x7A	; 122
    21d0:	53 e4       	ldi	r21, 0x43	; 67
    21d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	8f 83       	std	Y+7, r24	; 0x07
    21dc:	98 87       	std	Y+8, r25	; 0x08
    21de:	a9 87       	std	Y+9, r26	; 0x09
    21e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e2:	6f 81       	ldd	r22, Y+7	; 0x07
    21e4:	78 85       	ldd	r23, Y+8	; 0x08
    21e6:	89 85       	ldd	r24, Y+9	; 0x09
    21e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e8       	ldi	r20, 0x80	; 128
    21f0:	5f e3       	ldi	r21, 0x3F	; 63
    21f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f6:	88 23       	and	r24, r24
    21f8:	2c f4       	brge	.+10     	; 0x2204 <LCD_WriteData+0x1ca>
		__ticks = 1;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
    2202:	3f c0       	rjmp	.+126    	; 0x2282 <LCD_WriteData+0x248>
	else if (__tmp > 65535)
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	3f ef       	ldi	r19, 0xFF	; 255
    2210:	4f e7       	ldi	r20, 0x7F	; 127
    2212:	57 e4       	ldi	r21, 0x47	; 71
    2214:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2218:	18 16       	cp	r1, r24
    221a:	4c f5       	brge	.+82     	; 0x226e <LCD_WriteData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221c:	6b 85       	ldd	r22, Y+11	; 0x0b
    221e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2220:	8d 85       	ldd	r24, Y+13	; 0x0d
    2222:	9e 85       	ldd	r25, Y+14	; 0x0e
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e2       	ldi	r20, 0x20	; 32
    222a:	51 e4       	ldi	r21, 0x41	; 65
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	0f c0       	rjmp	.+30     	; 0x2264 <LCD_WriteData+0x22a>
    2246:	89 e1       	ldi	r24, 0x19	; 25
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9c 83       	std	Y+4, r25	; 0x04
    224c:	8b 83       	std	Y+3, r24	; 0x03
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <LCD_WriteData+0x218>
    2256:	9c 83       	std	Y+4, r25	; 0x04
    2258:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225a:	8d 81       	ldd	r24, Y+5	; 0x05
    225c:	9e 81       	ldd	r25, Y+6	; 0x06
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2264:	8d 81       	ldd	r24, Y+5	; 0x05
    2266:	9e 81       	ldd	r25, Y+6	; 0x06
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	69 f7       	brne	.-38     	; 0x2246 <LCD_WriteData+0x20c>
    226c:	14 c0       	rjmp	.+40     	; 0x2296 <LCD_WriteData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9e 83       	std	Y+6, r25	; 0x06
    2280:	8d 83       	std	Y+5, r24	; 0x05
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	9a 81       	ldd	r25, Y+2	; 0x02
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_WriteData+0x254>
    2292:	9a 83       	std	Y+2, r25	; 0x02
    2294:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_voidWriteVal(PortD,Pin1,Zero_Volt); /*E=0*/
    2296:	83 e0       	ldi	r24, 0x03	; 3
    2298:	61 e0       	ldi	r22, 0x01	; 1
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
	English_Char++;
    22a0:	80 91 7a 00 	lds	r24, 0x007A
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	80 93 7a 00 	sts	0x007A, r24

}
    22aa:	6d 96       	adiw	r28, 0x1d	; 29
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <LCD_CLear>:

void LCD_CLear()
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	2e 97       	sbiw	r28, 0x0e	; 14
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x01);
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <LCD_WriteCommand>
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a0 ea       	ldi	r26, 0xA0	; 160
    22dc:	b1 e4       	ldi	r27, 0x41	; 65
    22de:	8b 87       	std	Y+11, r24	; 0x0b
    22e0:	9c 87       	std	Y+12, r25	; 0x0c
    22e2:	ad 87       	std	Y+13, r26	; 0x0d
    22e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	4a e7       	ldi	r20, 0x7A	; 122
    22f4:	53 e4       	ldi	r21, 0x43	; 67
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8f 83       	std	Y+7, r24	; 0x07
    2300:	98 87       	std	Y+8, r25	; 0x08
    2302:	a9 87       	std	Y+9, r26	; 0x09
    2304:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e8       	ldi	r20, 0x80	; 128
    2314:	5f e3       	ldi	r21, 0x3F	; 63
    2316:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    231a:	88 23       	and	r24, r24
    231c:	2c f4       	brge	.+10     	; 0x2328 <LCD_CLear+0x6c>
		__ticks = 1;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	3f c0       	rjmp	.+126    	; 0x23a6 <LCD_CLear+0xea>
	else if (__tmp > 65535)
    2328:	6f 81       	ldd	r22, Y+7	; 0x07
    232a:	78 85       	ldd	r23, Y+8	; 0x08
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	3f ef       	ldi	r19, 0xFF	; 255
    2334:	4f e7       	ldi	r20, 0x7F	; 127
    2336:	57 e4       	ldi	r21, 0x47	; 71
    2338:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233c:	18 16       	cp	r1, r24
    233e:	4c f5       	brge	.+82     	; 0x2392 <LCD_CLear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2340:	6b 85       	ldd	r22, Y+11	; 0x0b
    2342:	7c 85       	ldd	r23, Y+12	; 0x0c
    2344:	8d 85       	ldd	r24, Y+13	; 0x0d
    2346:	9e 85       	ldd	r25, Y+14	; 0x0e
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e2       	ldi	r20, 0x20	; 32
    234e:	51 e4       	ldi	r21, 0x41	; 65
    2350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	8d 83       	std	Y+5, r24	; 0x05
    2368:	0f c0       	rjmp	.+30     	; 0x2388 <LCD_CLear+0xcc>
    236a:	89 e1       	ldi	r24, 0x19	; 25
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	9c 83       	std	Y+4, r25	; 0x04
    2370:	8b 83       	std	Y+3, r24	; 0x03
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_CLear+0xba>
    237a:	9c 83       	std	Y+4, r25	; 0x04
    237c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2388:	8d 81       	ldd	r24, Y+5	; 0x05
    238a:	9e 81       	ldd	r25, Y+6	; 0x06
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	69 f7       	brne	.-38     	; 0x236a <LCD_CLear+0xae>
    2390:	14 c0       	rjmp	.+40     	; 0x23ba <LCD_CLear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	9e 83       	std	Y+6, r25	; 0x06
    23a4:	8d 83       	std	Y+5, r24	; 0x05
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	9e 81       	ldd	r25, Y+6	; 0x06
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_CLear+0xf6>
    23b6:	9a 83       	std	Y+2, r25	; 0x02
    23b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	charact_number=0;
    23ba:	10 92 78 00 	sts	0x0078, r1
}
    23be:	2e 96       	adiw	r28, 0x0e	; 14
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <LCD_GoTo>:

void LCD_GoTo(u8 x, u8 y)
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <LCD_GoTo+0x6>
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	6a 83       	std	Y+2, r22	; 0x02
	if(y)
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	88 23       	and	r24, r24
    23e2:	29 f0       	breq	.+10     	; 0x23ee <LCD_GoTo+0x1e>
		English_Char=4*16+x;
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	80 5c       	subi	r24, 0xC0	; 192
    23e8:	80 93 7a 00 	sts	0x007A, r24
    23ec:	03 c0       	rjmp	.+6      	; 0x23f4 <LCD_GoTo+0x24>
	else
		English_Char=x;
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	80 93 7a 00 	sts	0x007A, r24

	LCD_Set_DD_Add(English_Char);
    23f4:	80 91 7a 00 	lds	r24, 0x007A
    23f8:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <LCD_Set_DD_Add>

}
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <LCD_WrtireString>:


u8 LCD_WrtireString(u8* str)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	00 d0       	rcall	.+0      	; 0x240c <LCD_WrtireString+0x6>
    240c:	00 d0       	rcall	.+0      	; 0x240e <LCD_WrtireString+0x8>
    240e:	0f 92       	push	r0
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	9c 83       	std	Y+4, r25	; 0x04
    2416:	8b 83       	std	Y+3, r24	; 0x03
	u8 count=0;
    2418:	1a 82       	std	Y+2, r1	; 0x02
	u8 size=0;
    241a:	19 82       	std	Y+1, r1	; 0x01
    241c:	06 c0       	rjmp	.+12     	; 0x242a <LCD_WrtireString+0x24>

	while( (!((*(str+count))=='\0')) && size<=16)
	{
		count++;
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	8f 5f       	subi	r24, 0xFF	; 255
    2422:	8a 83       	std	Y+2, r24	; 0x02
		size++;
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	8f 5f       	subi	r24, 0xFF	; 255
    2428:	89 83       	std	Y+1, r24	; 0x01
u8 LCD_WrtireString(u8* str)
{
	u8 count=0;
	u8 size=0;

	while( (!((*(str+count))=='\0')) && size<=16)
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	28 2f       	mov	r18, r24
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	fc 01       	movw	r30, r24
    2436:	e2 0f       	add	r30, r18
    2438:	f3 1f       	adc	r31, r19
    243a:	80 81       	ld	r24, Z
    243c:	88 23       	and	r24, r24
    243e:	19 f0       	breq	.+6      	; 0x2446 <LCD_WrtireString+0x40>
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	81 31       	cpi	r24, 0x11	; 17
    2444:	60 f3       	brcs	.-40     	; 0x241e <LCD_WrtireString+0x18>
	{
		count++;
		size++;
	}

	if(size<=16)
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	81 31       	cpi	r24, 0x11	; 17
    244a:	b8 f4       	brcc	.+46     	; 0x247a <LCD_WrtireString+0x74>
	{
		for(count=0;count<size;count++)
    244c:	1a 82       	std	Y+2, r1	; 0x02
    244e:	0e c0       	rjmp	.+28     	; 0x246c <LCD_WrtireString+0x66>
			LCD_WriteData(*(str+count));
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	fc 01       	movw	r30, r24
    245c:	e2 0f       	add	r30, r18
    245e:	f3 1f       	adc	r31, r19
    2460:	80 81       	ld	r24, Z
    2462:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
		size++;
	}

	if(size<=16)
	{
		for(count=0;count<size;count++)
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	8f 5f       	subi	r24, 0xFF	; 255
    246a:	8a 83       	std	Y+2, r24	; 0x02
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	98 17       	cp	r25, r24
    2472:	70 f3       	brcs	.-36     	; 0x2450 <LCD_WrtireString+0x4a>
			LCD_WriteData(*(str+count));
		return 1;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	8d 83       	std	Y+5, r24	; 0x05
    2478:	01 c0       	rjmp	.+2      	; 0x247c <LCD_WrtireString+0x76>
	}
	else
		return 0;
    247a:	1d 82       	std	Y+5, r1	; 0x05
    247c:	8d 81       	ldd	r24, Y+5	; 0x05

}
    247e:	0f 90       	pop	r0
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <LCD_Set_CG_Add>:


void LCD_Set_CG_Add(u8 add)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	2f 97       	sbiw	r28, 0x0f	; 15
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_WriteCommand(add);
    24a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a6:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <LCD_WriteCommand>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a0 e2       	ldi	r26, 0x20	; 32
    24b0:	b1 e4       	ldi	r27, 0x41	; 65
    24b2:	8b 87       	std	Y+11, r24	; 0x0b
    24b4:	9c 87       	std	Y+12, r25	; 0x0c
    24b6:	ad 87       	std	Y+13, r26	; 0x0d
    24b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    24bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24be:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a e7       	ldi	r20, 0x7A	; 122
    24c8:	53 e4       	ldi	r21, 0x43	; 67
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	8f 83       	std	Y+7, r24	; 0x07
    24d4:	98 87       	std	Y+8, r25	; 0x08
    24d6:	a9 87       	std	Y+9, r26	; 0x09
    24d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24da:	6f 81       	ldd	r22, Y+7	; 0x07
    24dc:	78 85       	ldd	r23, Y+8	; 0x08
    24de:	89 85       	ldd	r24, Y+9	; 0x09
    24e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	2c f4       	brge	.+10     	; 0x24fc <LCD_Set_CG_Add+0x6e>
		__ticks = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
    24fa:	3f c0       	rjmp	.+126    	; 0x257a <LCD_Set_CG_Add+0xec>
	else if (__tmp > 65535)
    24fc:	6f 81       	ldd	r22, Y+7	; 0x07
    24fe:	78 85       	ldd	r23, Y+8	; 0x08
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	3f ef       	ldi	r19, 0xFF	; 255
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	57 e4       	ldi	r21, 0x47	; 71
    250c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2510:	18 16       	cp	r1, r24
    2512:	4c f5       	brge	.+82     	; 0x2566 <LCD_Set_CG_Add+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2514:	6b 85       	ldd	r22, Y+11	; 0x0b
    2516:	7c 85       	ldd	r23, Y+12	; 0x0c
    2518:	8d 85       	ldd	r24, Y+13	; 0x0d
    251a:	9e 85       	ldd	r25, Y+14	; 0x0e
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e2       	ldi	r20, 0x20	; 32
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9e 83       	std	Y+6, r25	; 0x06
    253a:	8d 83       	std	Y+5, r24	; 0x05
    253c:	0f c0       	rjmp	.+30     	; 0x255c <LCD_Set_CG_Add+0xce>
    253e:	89 e1       	ldi	r24, 0x19	; 25
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9c 83       	std	Y+4, r25	; 0x04
    2544:	8b 83       	std	Y+3, r24	; 0x03
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <LCD_Set_CG_Add+0xbc>
    254e:	9c 83       	std	Y+4, r25	; 0x04
    2550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	9e 81       	ldd	r25, Y+6	; 0x06
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	8d 81       	ldd	r24, Y+5	; 0x05
    255e:	9e 81       	ldd	r25, Y+6	; 0x06
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	69 f7       	brne	.-38     	; 0x253e <LCD_Set_CG_Add+0xb0>
    2564:	14 c0       	rjmp	.+40     	; 0x258e <LCD_Set_CG_Add+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	6f 81       	ldd	r22, Y+7	; 0x07
    2568:	78 85       	ldd	r23, Y+8	; 0x08
    256a:	89 85       	ldd	r24, Y+9	; 0x09
    256c:	9a 85       	ldd	r25, Y+10	; 0x0a
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	9a 81       	ldd	r25, Y+2	; 0x02
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <LCD_Set_CG_Add+0xf8>
    258a:	9a 83       	std	Y+2, r25	; 0x02
    258c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    258e:	2f 96       	adiw	r28, 0x0f	; 15
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <LCD_Shift>:

void LCD_Shift()
{
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	2e 97       	sbiw	r28, 0x0e	; 14
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x1c);
    25b4:	8c e1       	ldi	r24, 0x1C	; 28
    25b6:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <LCD_WriteCommand>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	a0 e2       	ldi	r26, 0x20	; 32
    25c0:	b1 e4       	ldi	r27, 0x41	; 65
    25c2:	8b 87       	std	Y+11, r24	; 0x0b
    25c4:	9c 87       	std	Y+12, r25	; 0x0c
    25c6:	ad 87       	std	Y+13, r26	; 0x0d
    25c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    25cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	4a e7       	ldi	r20, 0x7A	; 122
    25d8:	53 e4       	ldi	r21, 0x43	; 67
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	8f 83       	std	Y+7, r24	; 0x07
    25e4:	98 87       	std	Y+8, r25	; 0x08
    25e6:	a9 87       	std	Y+9, r26	; 0x09
    25e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e8       	ldi	r20, 0x80	; 128
    25f8:	5f e3       	ldi	r21, 0x3F	; 63
    25fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25fe:	88 23       	and	r24, r24
    2600:	2c f4       	brge	.+10     	; 0x260c <LCD_Shift+0x6c>
		__ticks = 1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	3f c0       	rjmp	.+126    	; 0x268a <LCD_Shift+0xea>
	else if (__tmp > 65535)
    260c:	6f 81       	ldd	r22, Y+7	; 0x07
    260e:	78 85       	ldd	r23, Y+8	; 0x08
    2610:	89 85       	ldd	r24, Y+9	; 0x09
    2612:	9a 85       	ldd	r25, Y+10	; 0x0a
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	3f ef       	ldi	r19, 0xFF	; 255
    2618:	4f e7       	ldi	r20, 0x7F	; 127
    261a:	57 e4       	ldi	r21, 0x47	; 71
    261c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2620:	18 16       	cp	r1, r24
    2622:	4c f5       	brge	.+82     	; 0x2676 <LCD_Shift+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2624:	6b 85       	ldd	r22, Y+11	; 0x0b
    2626:	7c 85       	ldd	r23, Y+12	; 0x0c
    2628:	8d 85       	ldd	r24, Y+13	; 0x0d
    262a:	9e 85       	ldd	r25, Y+14	; 0x0e
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e2       	ldi	r20, 0x20	; 32
    2632:	51 e4       	ldi	r21, 0x41	; 65
    2634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	9e 83       	std	Y+6, r25	; 0x06
    264a:	8d 83       	std	Y+5, r24	; 0x05
    264c:	0f c0       	rjmp	.+30     	; 0x266c <LCD_Shift+0xcc>
    264e:	89 e1       	ldi	r24, 0x19	; 25
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	9c 83       	std	Y+4, r25	; 0x04
    2654:	8b 83       	std	Y+3, r24	; 0x03
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	9c 81       	ldd	r25, Y+4	; 0x04
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <LCD_Shift+0xba>
    265e:	9c 83       	std	Y+4, r25	; 0x04
    2660:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	9e 83       	std	Y+6, r25	; 0x06
    266a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	69 f7       	brne	.-38     	; 0x264e <LCD_Shift+0xae>
    2674:	14 c0       	rjmp	.+40     	; 0x269e <LCD_Shift+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	9e 81       	ldd	r25, Y+6	; 0x06
    268e:	9a 83       	std	Y+2, r25	; 0x02
    2690:	89 83       	std	Y+1, r24	; 0x01
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	9a 81       	ldd	r25, Y+2	; 0x02
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <LCD_Shift+0xf6>
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    269e:	2e 96       	adiw	r28, 0x0e	; 14
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <LCD_Set_Entry_Mode>:
void LCD_Set_Entry_Mode(u8 I_D)
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	2f 97       	sbiw	r28, 0x0f	; 15
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	8f 87       	std	Y+15, r24	; 0x0f
	if(I_D)
    26c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c8:	88 23       	and	r24, r24
    26ca:	21 f0       	breq	.+8      	; 0x26d4 <LCD_Set_Entry_Mode+0x24>
		LCD_WriteCommand(0x06);
    26cc:	86 e0       	ldi	r24, 0x06	; 6
    26ce:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <LCD_WriteCommand>
    26d2:	03 c0       	rjmp	.+6      	; 0x26da <LCD_Set_Entry_Mode+0x2a>
	else
		LCD_WriteCommand(0x07);
    26d4:	87 e0       	ldi	r24, 0x07	; 7
    26d6:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <LCD_WriteCommand>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	a0 e2       	ldi	r26, 0x20	; 32
    26e0:	b1 e4       	ldi	r27, 0x41	; 65
    26e2:	8b 87       	std	Y+11, r24	; 0x0b
    26e4:	9c 87       	std	Y+12, r25	; 0x0c
    26e6:	ad 87       	std	Y+13, r26	; 0x0d
    26e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	4a e7       	ldi	r20, 0x7A	; 122
    26f8:	53 e4       	ldi	r21, 0x43	; 67
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	8f 83       	std	Y+7, r24	; 0x07
    2704:	98 87       	std	Y+8, r25	; 0x08
    2706:	a9 87       	std	Y+9, r26	; 0x09
    2708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e8       	ldi	r20, 0x80	; 128
    2718:	5f e3       	ldi	r21, 0x3F	; 63
    271a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    271e:	88 23       	and	r24, r24
    2720:	2c f4       	brge	.+10     	; 0x272c <LCD_Set_Entry_Mode+0x7c>
		__ticks = 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9e 83       	std	Y+6, r25	; 0x06
    2728:	8d 83       	std	Y+5, r24	; 0x05
    272a:	3f c0       	rjmp	.+126    	; 0x27aa <LCD_Set_Entry_Mode+0xfa>
	else if (__tmp > 65535)
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	3f ef       	ldi	r19, 0xFF	; 255
    2738:	4f e7       	ldi	r20, 0x7F	; 127
    273a:	57 e4       	ldi	r21, 0x47	; 71
    273c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2740:	18 16       	cp	r1, r24
    2742:	4c f5       	brge	.+82     	; 0x2796 <LCD_Set_Entry_Mode+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2744:	6b 85       	ldd	r22, Y+11	; 0x0b
    2746:	7c 85       	ldd	r23, Y+12	; 0x0c
    2748:	8d 85       	ldd	r24, Y+13	; 0x0d
    274a:	9e 85       	ldd	r25, Y+14	; 0x0e
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e2       	ldi	r20, 0x20	; 32
    2752:	51 e4       	ldi	r21, 0x41	; 65
    2754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	9e 83       	std	Y+6, r25	; 0x06
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	0f c0       	rjmp	.+30     	; 0x278c <LCD_Set_Entry_Mode+0xdc>
    276e:	89 e1       	ldi	r24, 0x19	; 25
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8b 83       	std	Y+3, r24	; 0x03
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <LCD_Set_Entry_Mode+0xca>
    277e:	9c 83       	std	Y+4, r25	; 0x04
    2780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	9e 83       	std	Y+6, r25	; 0x06
    278a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	69 f7       	brne	.-38     	; 0x276e <LCD_Set_Entry_Mode+0xbe>
    2794:	14 c0       	rjmp	.+40     	; 0x27be <LCD_Set_Entry_Mode+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2796:	6f 81       	ldd	r22, Y+7	; 0x07
    2798:	78 85       	ldd	r23, Y+8	; 0x08
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	9a 85       	ldd	r25, Y+10	; 0x0a
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <LCD_Set_Entry_Mode+0x106>
    27ba:	9a 83       	std	Y+2, r25	; 0x02
    27bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    27be:	2f 96       	adiw	r28, 0x0f	; 15
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	cd bf       	out	0x3d, r28	; 61
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <LCD_Set_DD_Add>:

void LCD_Set_DD_Add(u8 add)
{
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	2f 97       	sbiw	r28, 0x0f	; 15
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_WriteCommand(add);
    27e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e8:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <LCD_WriteCommand>
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	a0 e2       	ldi	r26, 0x20	; 32
    27f2:	b1 e4       	ldi	r27, 0x41	; 65
    27f4:	8b 87       	std	Y+11, r24	; 0x0b
    27f6:	9c 87       	std	Y+12, r25	; 0x0c
    27f8:	ad 87       	std	Y+13, r26	; 0x0d
    27fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2800:	8d 85       	ldd	r24, Y+13	; 0x0d
    2802:	9e 85       	ldd	r25, Y+14	; 0x0e
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4a e7       	ldi	r20, 0x7A	; 122
    280a:	53 e4       	ldi	r21, 0x43	; 67
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	8f 83       	std	Y+7, r24	; 0x07
    2816:	98 87       	std	Y+8, r25	; 0x08
    2818:	a9 87       	std	Y+9, r26	; 0x09
    281a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    281c:	6f 81       	ldd	r22, Y+7	; 0x07
    281e:	78 85       	ldd	r23, Y+8	; 0x08
    2820:	89 85       	ldd	r24, Y+9	; 0x09
    2822:	9a 85       	ldd	r25, Y+10	; 0x0a
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e8       	ldi	r20, 0x80	; 128
    282a:	5f e3       	ldi	r21, 0x3F	; 63
    282c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2830:	88 23       	and	r24, r24
    2832:	2c f4       	brge	.+10     	; 0x283e <LCD_Set_DD_Add+0x6e>
		__ticks = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
    283c:	3f c0       	rjmp	.+126    	; 0x28bc <LCD_Set_DD_Add+0xec>
	else if (__tmp > 65535)
    283e:	6f 81       	ldd	r22, Y+7	; 0x07
    2840:	78 85       	ldd	r23, Y+8	; 0x08
    2842:	89 85       	ldd	r24, Y+9	; 0x09
    2844:	9a 85       	ldd	r25, Y+10	; 0x0a
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	3f ef       	ldi	r19, 0xFF	; 255
    284a:	4f e7       	ldi	r20, 0x7F	; 127
    284c:	57 e4       	ldi	r21, 0x47	; 71
    284e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2852:	18 16       	cp	r1, r24
    2854:	4c f5       	brge	.+82     	; 0x28a8 <LCD_Set_DD_Add+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2856:	6b 85       	ldd	r22, Y+11	; 0x0b
    2858:	7c 85       	ldd	r23, Y+12	; 0x0c
    285a:	8d 85       	ldd	r24, Y+13	; 0x0d
    285c:	9e 85       	ldd	r25, Y+14	; 0x0e
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e2       	ldi	r20, 0x20	; 32
    2864:	51 e4       	ldi	r21, 0x41	; 65
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	9e 83       	std	Y+6, r25	; 0x06
    287c:	8d 83       	std	Y+5, r24	; 0x05
    287e:	0f c0       	rjmp	.+30     	; 0x289e <LCD_Set_DD_Add+0xce>
    2880:	89 e1       	ldi	r24, 0x19	; 25
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9c 83       	std	Y+4, r25	; 0x04
    2886:	8b 83       	std	Y+3, r24	; 0x03
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	9c 81       	ldd	r25, Y+4	; 0x04
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <LCD_Set_DD_Add+0xbc>
    2890:	9c 83       	std	Y+4, r25	; 0x04
    2892:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	9e 81       	ldd	r25, Y+6	; 0x06
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	9e 83       	std	Y+6, r25	; 0x06
    289c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289e:	8d 81       	ldd	r24, Y+5	; 0x05
    28a0:	9e 81       	ldd	r25, Y+6	; 0x06
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	69 f7       	brne	.-38     	; 0x2880 <LCD_Set_DD_Add+0xb0>
    28a6:	14 c0       	rjmp	.+40     	; 0x28d0 <LCD_Set_DD_Add+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a8:	6f 81       	ldd	r22, Y+7	; 0x07
    28aa:	78 85       	ldd	r23, Y+8	; 0x08
    28ac:	89 85       	ldd	r24, Y+9	; 0x09
    28ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9e 83       	std	Y+6, r25	; 0x06
    28ba:	8d 83       	std	Y+5, r24	; 0x05
    28bc:	8d 81       	ldd	r24, Y+5	; 0x05
    28be:	9e 81       	ldd	r25, Y+6	; 0x06
    28c0:	9a 83       	std	Y+2, r25	; 0x02
    28c2:	89 83       	std	Y+1, r24	; 0x01
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	9a 81       	ldd	r25, Y+2	; 0x02
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_Set_DD_Add+0xf8>
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    28d0:	2f 96       	adiw	r28, 0x0f	; 15
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <LCD_Arabic_Dict>:


void LCD_Arabic_Dict(u8 charact)
{
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <LCD_Arabic_Dict+0x6>
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <LCD_Arabic_Dict+0x8>
    28ea:	0f 92       	push	r0
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	8b 83       	std	Y+3, r24	; 0x03
	LCD_Set_CG_Add(0x40+8*charact_number);
    28f2:	80 91 78 00 	lds	r24, 0x0078
    28f6:	88 2f       	mov	r24, r24
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	08 96       	adiw	r24, 0x08	; 8
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	0e 94 47 12 	call	0x248e	; 0x248e <LCD_Set_CG_Add>
	switch (charact)
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	28 2f       	mov	r18, r24
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	3d 83       	std	Y+5, r19	; 0x05
    2914:	2c 83       	std	Y+4, r18	; 0x04
    2916:	8c 81       	ldd	r24, Y+4	; 0x04
    2918:	9d 81       	ldd	r25, Y+5	; 0x05
    291a:	8e 30       	cpi	r24, 0x0E	; 14
    291c:	91 05       	cpc	r25, r1
    291e:	09 f4       	brne	.+2      	; 0x2922 <LCD_Arabic_Dict+0x40>
    2920:	fc c1       	rjmp	.+1016   	; 0x2d1a <LCD_Arabic_Dict+0x438>
    2922:	2c 81       	ldd	r18, Y+4	; 0x04
    2924:	3d 81       	ldd	r19, Y+5	; 0x05
    2926:	2f 30       	cpi	r18, 0x0F	; 15
    2928:	31 05       	cpc	r19, r1
    292a:	0c f0       	brlt	.+2      	; 0x292e <LCD_Arabic_Dict+0x4c>
    292c:	55 c0       	rjmp	.+170    	; 0x29d8 <LCD_Arabic_Dict+0xf6>
    292e:	8c 81       	ldd	r24, Y+4	; 0x04
    2930:	9d 81       	ldd	r25, Y+5	; 0x05
    2932:	87 30       	cpi	r24, 0x07	; 7
    2934:	91 05       	cpc	r25, r1
    2936:	09 f4       	brne	.+2      	; 0x293a <LCD_Arabic_Dict+0x58>
    2938:	41 c1       	rjmp	.+642    	; 0x2bbc <LCD_Arabic_Dict+0x2da>
    293a:	2c 81       	ldd	r18, Y+4	; 0x04
    293c:	3d 81       	ldd	r19, Y+5	; 0x05
    293e:	28 30       	cpi	r18, 0x08	; 8
    2940:	31 05       	cpc	r19, r1
    2942:	2c f5       	brge	.+74     	; 0x298e <LCD_Arabic_Dict+0xac>
    2944:	8c 81       	ldd	r24, Y+4	; 0x04
    2946:	9d 81       	ldd	r25, Y+5	; 0x05
    2948:	83 30       	cpi	r24, 0x03	; 3
    294a:	91 05       	cpc	r25, r1
    294c:	09 f4       	brne	.+2      	; 0x2950 <LCD_Arabic_Dict+0x6e>
    294e:	d2 c0       	rjmp	.+420    	; 0x2af4 <LCD_Arabic_Dict+0x212>
    2950:	2c 81       	ldd	r18, Y+4	; 0x04
    2952:	3d 81       	ldd	r19, Y+5	; 0x05
    2954:	24 30       	cpi	r18, 0x04	; 4
    2956:	31 05       	cpc	r19, r1
    2958:	6c f4       	brge	.+26     	; 0x2974 <LCD_Arabic_Dict+0x92>
    295a:	8c 81       	ldd	r24, Y+4	; 0x04
    295c:	9d 81       	ldd	r25, Y+5	; 0x05
    295e:	81 30       	cpi	r24, 0x01	; 1
    2960:	91 05       	cpc	r25, r1
    2962:	09 f4       	brne	.+2      	; 0x2966 <LCD_Arabic_Dict+0x84>
    2964:	94 c0       	rjmp	.+296    	; 0x2a8e <LCD_Arabic_Dict+0x1ac>
    2966:	2c 81       	ldd	r18, Y+4	; 0x04
    2968:	3d 81       	ldd	r19, Y+5	; 0x05
    296a:	22 30       	cpi	r18, 0x02	; 2
    296c:	31 05       	cpc	r19, r1
    296e:	09 f4       	brne	.+2      	; 0x2972 <LCD_Arabic_Dict+0x90>
    2970:	a8 c0       	rjmp	.+336    	; 0x2ac2 <LCD_Arabic_Dict+0x1e0>
    2972:	49 c3       	rjmp	.+1682   	; 0x3006 <LCD_Arabic_Dict+0x724>
    2974:	8c 81       	ldd	r24, Y+4	; 0x04
    2976:	9d 81       	ldd	r25, Y+5	; 0x05
    2978:	85 30       	cpi	r24, 0x05	; 5
    297a:	91 05       	cpc	r25, r1
    297c:	09 f4       	brne	.+2      	; 0x2980 <LCD_Arabic_Dict+0x9e>
    297e:	ec c0       	rjmp	.+472    	; 0x2b58 <LCD_Arabic_Dict+0x276>
    2980:	2c 81       	ldd	r18, Y+4	; 0x04
    2982:	3d 81       	ldd	r19, Y+5	; 0x05
    2984:	26 30       	cpi	r18, 0x06	; 6
    2986:	31 05       	cpc	r19, r1
    2988:	0c f0       	brlt	.+2      	; 0x298c <LCD_Arabic_Dict+0xaa>
    298a:	ff c0       	rjmp	.+510    	; 0x2b8a <LCD_Arabic_Dict+0x2a8>
    298c:	cc c0       	rjmp	.+408    	; 0x2b26 <LCD_Arabic_Dict+0x244>
    298e:	8c 81       	ldd	r24, Y+4	; 0x04
    2990:	9d 81       	ldd	r25, Y+5	; 0x05
    2992:	8a 30       	cpi	r24, 0x0A	; 10
    2994:	91 05       	cpc	r25, r1
    2996:	09 f4       	brne	.+2      	; 0x299a <LCD_Arabic_Dict+0xb8>
    2998:	5c c1       	rjmp	.+696    	; 0x2c52 <LCD_Arabic_Dict+0x370>
    299a:	2c 81       	ldd	r18, Y+4	; 0x04
    299c:	3d 81       	ldd	r19, Y+5	; 0x05
    299e:	2b 30       	cpi	r18, 0x0B	; 11
    29a0:	31 05       	cpc	r19, r1
    29a2:	6c f4       	brge	.+26     	; 0x29be <LCD_Arabic_Dict+0xdc>
    29a4:	8c 81       	ldd	r24, Y+4	; 0x04
    29a6:	9d 81       	ldd	r25, Y+5	; 0x05
    29a8:	88 30       	cpi	r24, 0x08	; 8
    29aa:	91 05       	cpc	r25, r1
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <LCD_Arabic_Dict+0xce>
    29ae:	1f c1       	rjmp	.+574    	; 0x2bee <LCD_Arabic_Dict+0x30c>
    29b0:	2c 81       	ldd	r18, Y+4	; 0x04
    29b2:	3d 81       	ldd	r19, Y+5	; 0x05
    29b4:	29 30       	cpi	r18, 0x09	; 9
    29b6:	31 05       	cpc	r19, r1
    29b8:	09 f4       	brne	.+2      	; 0x29bc <LCD_Arabic_Dict+0xda>
    29ba:	32 c1       	rjmp	.+612    	; 0x2c20 <LCD_Arabic_Dict+0x33e>
    29bc:	24 c3       	rjmp	.+1608   	; 0x3006 <LCD_Arabic_Dict+0x724>
    29be:	8c 81       	ldd	r24, Y+4	; 0x04
    29c0:	9d 81       	ldd	r25, Y+5	; 0x05
    29c2:	8c 30       	cpi	r24, 0x0C	; 12
    29c4:	91 05       	cpc	r25, r1
    29c6:	09 f4       	brne	.+2      	; 0x29ca <LCD_Arabic_Dict+0xe8>
    29c8:	76 c1       	rjmp	.+748    	; 0x2cb6 <LCD_Arabic_Dict+0x3d4>
    29ca:	2c 81       	ldd	r18, Y+4	; 0x04
    29cc:	3d 81       	ldd	r19, Y+5	; 0x05
    29ce:	2d 30       	cpi	r18, 0x0D	; 13
    29d0:	31 05       	cpc	r19, r1
    29d2:	0c f0       	brlt	.+2      	; 0x29d6 <LCD_Arabic_Dict+0xf4>
    29d4:	89 c1       	rjmp	.+786    	; 0x2ce8 <LCD_Arabic_Dict+0x406>
    29d6:	56 c1       	rjmp	.+684    	; 0x2c84 <LCD_Arabic_Dict+0x3a2>
    29d8:	8c 81       	ldd	r24, Y+4	; 0x04
    29da:	9d 81       	ldd	r25, Y+5	; 0x05
    29dc:	85 31       	cpi	r24, 0x15	; 21
    29de:	91 05       	cpc	r25, r1
    29e0:	09 f4       	brne	.+2      	; 0x29e4 <LCD_Arabic_Dict+0x102>
    29e2:	4a c2       	rjmp	.+1172   	; 0x2e78 <LCD_Arabic_Dict+0x596>
    29e4:	2c 81       	ldd	r18, Y+4	; 0x04
    29e6:	3d 81       	ldd	r19, Y+5	; 0x05
    29e8:	26 31       	cpi	r18, 0x16	; 22
    29ea:	31 05       	cpc	r19, r1
    29ec:	2c f5       	brge	.+74     	; 0x2a38 <LCD_Arabic_Dict+0x156>
    29ee:	8c 81       	ldd	r24, Y+4	; 0x04
    29f0:	9d 81       	ldd	r25, Y+5	; 0x05
    29f2:	81 31       	cpi	r24, 0x11	; 17
    29f4:	91 05       	cpc	r25, r1
    29f6:	09 f4       	brne	.+2      	; 0x29fa <LCD_Arabic_Dict+0x118>
    29f8:	db c1       	rjmp	.+950    	; 0x2db0 <LCD_Arabic_Dict+0x4ce>
    29fa:	2c 81       	ldd	r18, Y+4	; 0x04
    29fc:	3d 81       	ldd	r19, Y+5	; 0x05
    29fe:	22 31       	cpi	r18, 0x12	; 18
    2a00:	31 05       	cpc	r19, r1
    2a02:	6c f4       	brge	.+26     	; 0x2a1e <LCD_Arabic_Dict+0x13c>
    2a04:	8c 81       	ldd	r24, Y+4	; 0x04
    2a06:	9d 81       	ldd	r25, Y+5	; 0x05
    2a08:	8f 30       	cpi	r24, 0x0F	; 15
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	09 f4       	brne	.+2      	; 0x2a10 <LCD_Arabic_Dict+0x12e>
    2a0e:	9e c1       	rjmp	.+828    	; 0x2d4c <LCD_Arabic_Dict+0x46a>
    2a10:	2c 81       	ldd	r18, Y+4	; 0x04
    2a12:	3d 81       	ldd	r19, Y+5	; 0x05
    2a14:	20 31       	cpi	r18, 0x10	; 16
    2a16:	31 05       	cpc	r19, r1
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <LCD_Arabic_Dict+0x13a>
    2a1a:	b1 c1       	rjmp	.+866    	; 0x2d7e <LCD_Arabic_Dict+0x49c>
    2a1c:	f4 c2       	rjmp	.+1512   	; 0x3006 <LCD_Arabic_Dict+0x724>
    2a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a20:	9d 81       	ldd	r25, Y+5	; 0x05
    2a22:	83 31       	cpi	r24, 0x13	; 19
    2a24:	91 05       	cpc	r25, r1
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <LCD_Arabic_Dict+0x148>
    2a28:	f5 c1       	rjmp	.+1002   	; 0x2e14 <LCD_Arabic_Dict+0x532>
    2a2a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a2c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a2e:	24 31       	cpi	r18, 0x14	; 20
    2a30:	31 05       	cpc	r19, r1
    2a32:	0c f0       	brlt	.+2      	; 0x2a36 <LCD_Arabic_Dict+0x154>
    2a34:	08 c2       	rjmp	.+1040   	; 0x2e46 <LCD_Arabic_Dict+0x564>
    2a36:	d5 c1       	rjmp	.+938    	; 0x2de2 <LCD_Arabic_Dict+0x500>
    2a38:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3c:	89 31       	cpi	r24, 0x19	; 25
    2a3e:	91 05       	cpc	r25, r1
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <LCD_Arabic_Dict+0x162>
    2a42:	7e c2       	rjmp	.+1276   	; 0x2f40 <LCD_Arabic_Dict+0x65e>
    2a44:	2c 81       	ldd	r18, Y+4	; 0x04
    2a46:	3d 81       	ldd	r19, Y+5	; 0x05
    2a48:	2a 31       	cpi	r18, 0x1A	; 26
    2a4a:	31 05       	cpc	r19, r1
    2a4c:	6c f4       	brge	.+26     	; 0x2a68 <LCD_Arabic_Dict+0x186>
    2a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a50:	9d 81       	ldd	r25, Y+5	; 0x05
    2a52:	87 31       	cpi	r24, 0x17	; 23
    2a54:	91 05       	cpc	r25, r1
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <LCD_Arabic_Dict+0x178>
    2a58:	41 c2       	rjmp	.+1154   	; 0x2edc <LCD_Arabic_Dict+0x5fa>
    2a5a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a5c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a5e:	28 31       	cpi	r18, 0x18	; 24
    2a60:	31 05       	cpc	r19, r1
    2a62:	0c f0       	brlt	.+2      	; 0x2a66 <LCD_Arabic_Dict+0x184>
    2a64:	54 c2       	rjmp	.+1192   	; 0x2f0e <LCD_Arabic_Dict+0x62c>
    2a66:	21 c2       	rjmp	.+1090   	; 0x2eaa <LCD_Arabic_Dict+0x5c8>
    2a68:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a6c:	8b 31       	cpi	r24, 0x1B	; 27
    2a6e:	91 05       	cpc	r25, r1
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <LCD_Arabic_Dict+0x192>
    2a72:	98 c2       	rjmp	.+1328   	; 0x2fa4 <LCD_Arabic_Dict+0x6c2>
    2a74:	2c 81       	ldd	r18, Y+4	; 0x04
    2a76:	3d 81       	ldd	r19, Y+5	; 0x05
    2a78:	2b 31       	cpi	r18, 0x1B	; 27
    2a7a:	31 05       	cpc	r19, r1
    2a7c:	0c f4       	brge	.+2      	; 0x2a80 <LCD_Arabic_Dict+0x19e>
    2a7e:	79 c2       	rjmp	.+1266   	; 0x2f72 <LCD_Arabic_Dict+0x690>
    2a80:	8c 81       	ldd	r24, Y+4	; 0x04
    2a82:	9d 81       	ldd	r25, Y+5	; 0x05
    2a84:	8c 31       	cpi	r24, 0x1C	; 28
    2a86:	91 05       	cpc	r25, r1
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <LCD_Arabic_Dict+0x1aa>
    2a8a:	a5 c2       	rjmp	.+1354   	; 0x2fd6 <LCD_Arabic_Dict+0x6f4>
    2a8c:	bc c2       	rjmp	.+1400   	; 0x3006 <LCD_Arabic_Dict+0x724>
	{
	int count;
	case 1:
		/* alf */
	    for(count=0;count<5;count++)
    2a8e:	1a 82       	std	Y+2, r1	; 0x02
    2a90:	19 82       	std	Y+1, r1	; 0x01
    2a92:	08 c0       	rjmp	.+16     	; 0x2aa4 <LCD_Arabic_Dict+0x1c2>
	    	LCD_WriteData(0x04);
    2a94:	84 e0       	ldi	r24, 0x04	; 4
    2a96:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	switch (charact)
	{
	int count;
	case 1:
		/* alf */
	    for(count=0;count<5;count++)
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	01 96       	adiw	r24, 0x01	; 1
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	85 30       	cpi	r24, 0x05	; 5
    2aaa:	91 05       	cpc	r25, r1
    2aac:	9c f3       	brlt	.-26     	; 0x2a94 <LCD_Arabic_Dict+0x1b2>
	    	LCD_WriteData(0x04);
	    LCD_WriteData(0x07);
    2aae:	87 e0       	ldi	r24, 0x07	; 7
    2ab0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2ac0:	a2 c2       	rjmp	.+1348   	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 2:
		/* ba2 */
	    LCD_WriteData(0x00);
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0xff);
    2ae0:	8f ef       	ldi	r24, 0xFF	; 255
    2ae2:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2af2:	89 c2       	rjmp	.+1298   	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 3:
		/* ta2 */
	    LCD_WriteData(0x00);
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0xf5);
    2b06:	85 ef       	ldi	r24, 0xF5	; 245
    2b08:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0xff);
    2b12:	8f ef       	ldi	r24, 0xFF	; 255
    2b14:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2b24:	70 c2       	rjmp	.+1248   	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 4:
		/* tha2 */
	    LCD_WriteData(0x00);
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x08);
    2b32:	88 e0       	ldi	r24, 0x08	; 8
    2b34:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0xf5);
    2b38:	85 ef       	ldi	r24, 0xF5	; 245
    2b3a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0xff);
    2b44:	8f ef       	ldi	r24, 0xFF	; 255
    2b46:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2b56:	57 c2       	rjmp	.+1198   	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 5:
		/* gem */
	    LCD_WriteData(0x00);
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x0c);
    2b64:	8c e0       	ldi	r24, 0x0C	; 12
    2b66:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0xf2);
    2b6a:	82 ef       	ldi	r24, 0xF2	; 242
    2b6c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0xff);
    2b76:	8f ef       	ldi	r24, 0xFF	; 255
    2b78:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2b88:	3e c2       	rjmp	.+1148   	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 6:
		/* 7a2 */
	    LCD_WriteData(0x00);
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x0c);
    2b96:	8c e0       	ldi	r24, 0x0C	; 12
    2b98:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0xf2);
    2b9c:	82 ef       	ldi	r24, 0xF2	; 242
    2b9e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0xff);
    2ba8:	8f ef       	ldi	r24, 0xFF	; 255
    2baa:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2bba:	25 c2       	rjmp	.+1098   	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 7:
		/* kha2 */
	    LCD_WriteData(0x04);
    2bbc:	84 e0       	ldi	r24, 0x04	; 4
    2bbe:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x0c);
    2bc8:	8c e0       	ldi	r24, 0x0C	; 12
    2bca:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0xf2);
    2bce:	82 ef       	ldi	r24, 0xF2	; 242
    2bd0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0xff);
    2bda:	8f ef       	ldi	r24, 0xFF	; 255
    2bdc:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2bec:	0c c2       	rjmp	.+1048   	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 8:
		/* dal */
	    LCD_WriteData(0x00);
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x0f);
    2c0c:	8f e0       	ldi	r24, 0x0F	; 15
    2c0e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2c1e:	f3 c1       	rjmp	.+998    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 9:
		/* zal */
	    LCD_WriteData(0x00);
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x0f);
    2c3e:	8f e0       	ldi	r24, 0x0F	; 15
    2c40:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2c50:	da c1       	rjmp	.+948    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 10:
		/* ra2 */
	    LCD_WriteData(0x00);
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x03);
    2c70:	83 e0       	ldi	r24, 0x03	; 3
    2c72:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x02);
    2c76:	82 e0       	ldi	r24, 0x02	; 2
    2c78:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x04);
    2c7c:	84 e0       	ldi	r24, 0x04	; 4
    2c7e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2c82:	c1 c1       	rjmp	.+898    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 11:
		/* zan */
	    LCD_WriteData(0x00);
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x02);
    2c96:	82 e0       	ldi	r24, 0x02	; 2
    2c98:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x03);
    2ca2:	83 e0       	ldi	r24, 0x03	; 3
    2ca4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x02);
    2ca8:	82 e0       	ldi	r24, 0x02	; 2
    2caa:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x04);
    2cae:	84 e0       	ldi	r24, 0x04	; 4
    2cb0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2cb4:	a8 c1       	rjmp	.+848    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 12:
		/* seen */
	    LCD_WriteData(0x00);
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x15);
    2cc8:	85 e1       	ldi	r24, 0x15	; 21
    2cca:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x15);
    2cce:	85 e1       	ldi	r24, 0x15	; 21
    2cd0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2cd4:	8f e1       	ldi	r24, 0x1F	; 31
    2cd6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2ce6:	8f c1       	rjmp	.+798    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 13:
		/* sheen */
	    LCD_WriteData(0x04);
    2ce8:	84 e0       	ldi	r24, 0x04	; 4
    2cea:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x0a);
    2cee:	8a e0       	ldi	r24, 0x0A	; 10
    2cf0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x15);
    2cfa:	85 e1       	ldi	r24, 0x15	; 21
    2cfc:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x15);
    2d00:	85 e1       	ldi	r24, 0x15	; 21
    2d02:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2d06:	8f e1       	ldi	r24, 0x1F	; 31
    2d08:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2d18:	76 c1       	rjmp	.+748    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 14:
		/* saad */
	    LCD_WriteData(0x00);
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x06);
    2d2c:	86 e0       	ldi	r24, 0x06	; 6
    2d2e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x09);
    2d32:	89 e0       	ldi	r24, 0x09	; 9
    2d34:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2d38:	8f e1       	ldi	r24, 0x1F	; 31
    2d3a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2d4a:	5d c1       	rjmp	.+698    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 15:
		/* daad */
	    LCD_WriteData(0x00);
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x04);
    2d52:	84 e0       	ldi	r24, 0x04	; 4
    2d54:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x06);
    2d5e:	86 e0       	ldi	r24, 0x06	; 6
    2d60:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x09);
    2d64:	89 e0       	ldi	r24, 0x09	; 9
    2d66:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2d6a:	8f e1       	ldi	r24, 0x1F	; 31
    2d6c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2d7c:	44 c1       	rjmp	.+648    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 16:
		/* taah */
	    LCD_WriteData(0x00);
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x08);
    2d84:	88 e0       	ldi	r24, 0x08	; 8
    2d86:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x08);
    2d8a:	88 e0       	ldi	r24, 0x08	; 8
    2d8c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x0e);
    2d90:	8e e0       	ldi	r24, 0x0E	; 14
    2d92:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x09);
    2d96:	89 e0       	ldi	r24, 0x09	; 9
    2d98:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2d9c:	8f e1       	ldi	r24, 0x1F	; 31
    2d9e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2dae:	2b c1       	rjmp	.+598    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 17:
	    /* zaah */
	    LCD_WriteData(0x00);
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x0a);
    2db6:	8a e0       	ldi	r24, 0x0A	; 10
    2db8:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x08);
    2dbc:	88 e0       	ldi	r24, 0x08	; 8
    2dbe:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x0e);
    2dc2:	8e e0       	ldi	r24, 0x0E	; 14
    2dc4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x09);
    2dc8:	89 e0       	ldi	r24, 0x09	; 9
    2dca:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2dce:	8f e1       	ldi	r24, 0x1F	; 31
    2dd0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2de0:	12 c1       	rjmp	.+548    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 18:
		/* 3een */
	    LCD_WriteData(0x00);
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x07);
    2dee:	87 e0       	ldi	r24, 0x07	; 7
    2df0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x08);
    2df4:	88 e0       	ldi	r24, 0x08	; 8
    2df6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x08);
    2dfa:	88 e0       	ldi	r24, 0x08	; 8
    2dfc:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2e00:	8f e1       	ldi	r24, 0x1F	; 31
    2e02:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2e12:	f9 c0       	rjmp	.+498    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 19:
		/* 3'een */
	    LCD_WriteData(0x04);
    2e14:	84 e0       	ldi	r24, 0x04	; 4
    2e16:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x07);
    2e20:	87 e0       	ldi	r24, 0x07	; 7
    2e22:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x08);
    2e26:	88 e0       	ldi	r24, 0x08	; 8
    2e28:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x08);
    2e2c:	88 e0       	ldi	r24, 0x08	; 8
    2e2e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2e32:	8f e1       	ldi	r24, 0x1F	; 31
    2e34:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2e44:	e0 c0       	rjmp	.+448    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 20:
		/* faa2 */
	    LCD_WriteData(0x02);
    2e46:	82 e0       	ldi	r24, 0x02	; 2
    2e48:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x03);
    2e52:	83 e0       	ldi	r24, 0x03	; 3
    2e54:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x03);
    2e58:	83 e0       	ldi	r24, 0x03	; 3
    2e5a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2e64:	8f e1       	ldi	r24, 0x1F	; 31
    2e66:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2e76:	c7 c0       	rjmp	.+398    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 21:
		/* k'aaf */
	    LCD_WriteData(0x03);
    2e78:	83 e0       	ldi	r24, 0x03	; 3
    2e7a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x03);
    2e84:	83 e0       	ldi	r24, 0x03	; 3
    2e86:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x03);
    2e8a:	83 e0       	ldi	r24, 0x03	; 3
    2e8c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2e96:	8f e1       	ldi	r24, 0x1F	; 31
    2e98:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2ea8:	ae c0       	rjmp	.+348    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 22:
		/* kaaf */
	    LCD_WriteData(0x00);
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x0f);
    2eb0:	8f e0       	ldi	r24, 0x0F	; 15
    2eb2:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x04);
    2eb6:	84 e0       	ldi	r24, 0x04	; 4
    2eb8:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x02);
    2ebc:	82 e0       	ldi	r24, 0x02	; 2
    2ebe:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2ec8:	8f e1       	ldi	r24, 0x1F	; 31
    2eca:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2eda:	95 c0       	rjmp	.+298    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 23:
		/* laam */
	    LCD_WriteData(0x00);
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2efa:	8f e1       	ldi	r24, 0x1F	; 31
    2efc:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2f0c:	7c c0       	rjmp	.+248    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 24:
		/* meem */
	    LCD_WriteData(0x00);
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x03);
    2f26:	83 e0       	ldi	r24, 0x03	; 3
    2f28:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2f2c:	8f e1       	ldi	r24, 0x1F	; 31
    2f2e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x03);
    2f32:	83 e0       	ldi	r24, 0x03	; 3
    2f34:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2f3e:	63 c0       	rjmp	.+198    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 25:
		/* noon */
	    LCD_WriteData(0x00);
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x05);
    2f52:	85 e0       	ldi	r24, 0x05	; 5
    2f54:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2f5e:	8f e1       	ldi	r24, 0x1F	; 31
    2f60:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2f70:	4a c0       	rjmp	.+148    	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 26:
		/* heeh */
	    LCD_WriteData(0x00);
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x06);
    2f8a:	86 e0       	ldi	r24, 0x06	; 6
    2f8c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2f90:	8f e1       	ldi	r24, 0x1F	; 31
    2f92:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x06);
    2f96:	86 e0       	ldi	r24, 0x06	; 6
    2f98:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2fa2:	31 c0       	rjmp	.+98     	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 27:
		/* waaw */
	    LCD_WriteData(0x00);
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x03);
    2fbc:	83 e0       	ldi	r24, 0x03	; 3
    2fbe:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x03);
    2fc2:	83 e0       	ldi	r24, 0x03	; 3
    2fc4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x02);
    2fce:	82 e0       	ldi	r24, 0x02	; 2
    2fd0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
    2fd4:	18 c0       	rjmp	.+48     	; 0x3006 <LCD_Arabic_Dict+0x724>
	    break;

	case 28:
		/* yaah */
	    LCD_WriteData(0x00);
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x01);
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x1f);
    2ff4:	8f e1       	ldi	r24, 0x1F	; 31
    2ff6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x00);
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    LCD_WriteData(0x0a);
    3000:	8a e0       	ldi	r24, 0x0A	; 10
    3002:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	}
	English_Char-=8;
    3006:	80 91 7a 00 	lds	r24, 0x007A
    300a:	88 50       	subi	r24, 0x08	; 8
    300c:	80 93 7a 00 	sts	0x007A, r24
	LCD_Set_DD_Add(0x80+charact_number+English_Char);
    3010:	90 91 78 00 	lds	r25, 0x0078
    3014:	80 91 7a 00 	lds	r24, 0x007A
    3018:	89 0f       	add	r24, r25
    301a:	80 58       	subi	r24, 0x80	; 128
    301c:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <LCD_Set_DD_Add>

}
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <LCD_WriteArabicData>:
void LCD_WriteArabicData(u8 data)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	0f 92       	push	r0
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	89 83       	std	Y+1, r24	; 0x01
	if(!(IS_WRITTEN(data)))
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	0e 94 43 18 	call	0x3086	; 0x3086 <IS_WRITTEN>
    3042:	88 23       	and	r24, r24
    3044:	99 f4       	brne	.+38     	; 0x306c <LCD_WriteArabicData+0x3c>
	{
		LCD_Arabic_Dict(data);
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_Arabic_Dict>
		LCD_WriteData(charact_number);
    304c:	80 91 78 00 	lds	r24, 0x0078
    3050:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	    charact_number++;
    3054:	80 91 78 00 	lds	r24, 0x0078
    3058:	8f 5f       	subi	r24, 0xFF	; 255
    305a:	80 93 78 00 	sts	0x0078, r24
	    if(charact_number>7)
    305e:	80 91 78 00 	lds	r24, 0x0078
    3062:	88 30       	cpi	r24, 0x08	; 8
    3064:	38 f0       	brcs	.+14     	; 0x3074 <LCD_WriteArabicData+0x44>
	    	charact_number=0;
    3066:	10 92 78 00 	sts	0x0078, r1
    306a:	04 c0       	rjmp	.+8      	; 0x3074 <LCD_WriteArabicData+0x44>
	}
	else
		LCD_WriteData(current_charact);
    306c:	80 91 79 00 	lds	r24, 0x0079
    3070:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
	English_Char--;
    3074:	80 91 7a 00 	lds	r24, 0x007A
    3078:	81 50       	subi	r24, 0x01	; 1
    307a:	80 93 7a 00 	sts	0x007A, r24

}
    307e:	0f 90       	pop	r0
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <IS_WRITTEN>:

u8 IS_WRITTEN(u8 data)
{
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	00 d0       	rcall	.+0      	; 0x308c <IS_WRITTEN+0x6>
    308c:	00 d0       	rcall	.+0      	; 0x308e <IS_WRITTEN+0x8>
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    3092:	8b 83       	std	Y+3, r24	; 0x03
	int count;
	for(count=0;count<8;count++)
    3094:	1a 82       	std	Y+2, r1	; 0x02
    3096:	19 82       	std	Y+1, r1	; 0x01
    3098:	14 c0       	rjmp	.+40     	; 0x30c2 <IS_WRITTEN+0x3c>
		if(charact_prev[count]==data)
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	9a 81       	ldd	r25, Y+2	; 0x02
    309e:	fc 01       	movw	r30, r24
    30a0:	e0 59       	subi	r30, 0x90	; 144
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	90 81       	ld	r25, Z
    30a6:	8b 81       	ldd	r24, Y+3	; 0x03
    30a8:	98 17       	cp	r25, r24
    30aa:	31 f4       	brne	.+12     	; 0x30b8 <IS_WRITTEN+0x32>
		{
			current_charact=count;
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	80 93 79 00 	sts	0x0079, r24
			return 1;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	8c 83       	std	Y+4, r24	; 0x04
    30b6:	14 c0       	rjmp	.+40     	; 0x30e0 <IS_WRITTEN+0x5a>
}

u8 IS_WRITTEN(u8 data)
{
	int count;
	for(count=0;count<8;count++)
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	9a 81       	ldd	r25, Y+2	; 0x02
    30bc:	01 96       	adiw	r24, 0x01	; 1
    30be:	9a 83       	std	Y+2, r25	; 0x02
    30c0:	89 83       	std	Y+1, r24	; 0x01
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	88 30       	cpi	r24, 0x08	; 8
    30c8:	91 05       	cpc	r25, r1
    30ca:	3c f3       	brlt	.-50     	; 0x309a <IS_WRITTEN+0x14>
		if(charact_prev[count]==data)
		{
			current_charact=count;
			return 1;
		}
	charact_prev[charact_number]=data;
    30cc:	80 91 78 00 	lds	r24, 0x0078
    30d0:	88 2f       	mov	r24, r24
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	fc 01       	movw	r30, r24
    30d6:	e0 59       	subi	r30, 0x90	; 144
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	8b 81       	ldd	r24, Y+3	; 0x03
    30dc:	80 83       	st	Z, r24

	return 0;
    30de:	1c 82       	std	Y+4, r1	; 0x04
    30e0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <LCD_WrtireString_Arabic>:

u8 LCD_WrtireString_Arabic(u8* str)
{
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	00 d0       	rcall	.+0      	; 0x30f6 <LCD_WrtireString_Arabic+0x6>
    30f6:	00 d0       	rcall	.+0      	; 0x30f8 <LCD_WrtireString_Arabic+0x8>
    30f8:	00 d0       	rcall	.+0      	; 0x30fa <LCD_WrtireString_Arabic+0xa>
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	9d 83       	std	Y+5, r25	; 0x05
    3100:	8c 83       	std	Y+4, r24	; 0x04
	if(English_Char>6*16+7)
    3102:	80 91 7a 00 	lds	r24, 0x007A
    3106:	88 36       	cpi	r24, 0x68	; 104
    3108:	10 f0       	brcs	.+4      	; 0x310e <LCD_WrtireString_Arabic+0x1e>
		English_Char=0;
    310a:	10 92 7a 00 	sts	0x007A, r1

	int count=0;
    310e:	1b 82       	std	Y+3, r1	; 0x03
    3110:	1a 82       	std	Y+2, r1	; 0x02
	u8 size=0;
    3112:	19 82       	std	Y+1, r1	; 0x01
    3114:	08 c0       	rjmp	.+16     	; 0x3126 <LCD_WrtireString_Arabic+0x36>

	while( (!((*(str+count))=='\0')) && size<=16)
	{
		count++;
    3116:	8a 81       	ldd	r24, Y+2	; 0x02
    3118:	9b 81       	ldd	r25, Y+3	; 0x03
    311a:	01 96       	adiw	r24, 0x01	; 1
    311c:	9b 83       	std	Y+3, r25	; 0x03
    311e:	8a 83       	std	Y+2, r24	; 0x02
		size++;
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	8f 5f       	subi	r24, 0xFF	; 255
    3124:	89 83       	std	Y+1, r24	; 0x01
		English_Char=0;

	int count=0;
	u8 size=0;

	while( (!((*(str+count))=='\0')) && size<=16)
    3126:	2a 81       	ldd	r18, Y+2	; 0x02
    3128:	3b 81       	ldd	r19, Y+3	; 0x03
    312a:	8c 81       	ldd	r24, Y+4	; 0x04
    312c:	9d 81       	ldd	r25, Y+5	; 0x05
    312e:	fc 01       	movw	r30, r24
    3130:	e2 0f       	add	r30, r18
    3132:	f3 1f       	adc	r31, r19
    3134:	80 81       	ld	r24, Z
    3136:	88 23       	and	r24, r24
    3138:	19 f0       	breq	.+6      	; 0x3140 <LCD_WrtireString_Arabic+0x50>
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	81 31       	cpi	r24, 0x11	; 17
    313e:	58 f3       	brcs	.-42     	; 0x3116 <LCD_WrtireString_Arabic+0x26>
	{
		count++;
		size++;
	}

		if(size<=16)
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	81 31       	cpi	r24, 0x11	; 17
    3144:	90 f5       	brcc	.+100    	; 0x31aa <LCD_WrtireString_Arabic+0xba>
		{
			for(count=size-1;count>=0;count--)
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	88 2f       	mov	r24, r24
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	9b 83       	std	Y+3, r25	; 0x03
    3150:	8a 83       	std	Y+2, r24	; 0x02
    3152:	24 c0       	rjmp	.+72     	; 0x319c <LCD_WrtireString_Arabic+0xac>
			{
				if((*(str+count))<=28)
    3154:	2a 81       	ldd	r18, Y+2	; 0x02
    3156:	3b 81       	ldd	r19, Y+3	; 0x03
    3158:	8c 81       	ldd	r24, Y+4	; 0x04
    315a:	9d 81       	ldd	r25, Y+5	; 0x05
    315c:	fc 01       	movw	r30, r24
    315e:	e2 0f       	add	r30, r18
    3160:	f3 1f       	adc	r31, r19
    3162:	80 81       	ld	r24, Z
    3164:	8d 31       	cpi	r24, 0x1D	; 29
    3166:	58 f4       	brcc	.+22     	; 0x317e <LCD_WrtireString_Arabic+0x8e>
					LCD_WriteArabicData(*(str+count));
    3168:	2a 81       	ldd	r18, Y+2	; 0x02
    316a:	3b 81       	ldd	r19, Y+3	; 0x03
    316c:	8c 81       	ldd	r24, Y+4	; 0x04
    316e:	9d 81       	ldd	r25, Y+5	; 0x05
    3170:	fc 01       	movw	r30, r24
    3172:	e2 0f       	add	r30, r18
    3174:	f3 1f       	adc	r31, r19
    3176:	80 81       	ld	r24, Z
    3178:	0e 94 18 18 	call	0x3030	; 0x3030 <LCD_WriteArabicData>
    317c:	0a c0       	rjmp	.+20     	; 0x3192 <LCD_WrtireString_Arabic+0xa2>
				else
					LCD_WriteData(*(str+count));
    317e:	2a 81       	ldd	r18, Y+2	; 0x02
    3180:	3b 81       	ldd	r19, Y+3	; 0x03
    3182:	8c 81       	ldd	r24, Y+4	; 0x04
    3184:	9d 81       	ldd	r25, Y+5	; 0x05
    3186:	fc 01       	movw	r30, r24
    3188:	e2 0f       	add	r30, r18
    318a:	f3 1f       	adc	r31, r19
    318c:	80 81       	ld	r24, Z
    318e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
		size++;
	}

		if(size<=16)
		{
			for(count=size-1;count>=0;count--)
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	9b 81       	ldd	r25, Y+3	; 0x03
    3196:	01 97       	sbiw	r24, 0x01	; 1
    3198:	9b 83       	std	Y+3, r25	; 0x03
    319a:	8a 83       	std	Y+2, r24	; 0x02
    319c:	8a 81       	ldd	r24, Y+2	; 0x02
    319e:	9b 81       	ldd	r25, Y+3	; 0x03
    31a0:	99 23       	and	r25, r25
    31a2:	c4 f6       	brge	.-80     	; 0x3154 <LCD_WrtireString_Arabic+0x64>
				if((*(str+count))<=28)
					LCD_WriteArabicData(*(str+count));
				else
					LCD_WriteData(*(str+count));
			}
			return 1;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	8e 83       	std	Y+6, r24	; 0x06
    31a8:	01 c0       	rjmp	.+2      	; 0x31ac <LCD_WrtireString_Arabic+0xbc>
		}
		else
			return 0;
    31aa:	1e 82       	std	Y+6, r1	; 0x06
    31ac:	8e 81       	ldd	r24, Y+6	; 0x06
}
    31ae:	26 96       	adiw	r28, 0x06	; 6
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	cf 91       	pop	r28
    31bc:	df 91       	pop	r29
    31be:	08 95       	ret

000031c0 <LED_Init>:

#include "LED.h"
#include "DIO.h"

void LED_Init(u8 u8LedNumber)
{
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	0f 92       	push	r0
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	89 83       	std	Y+1, r24	; 0x01
	if(u8LedNumber)
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	88 23       	and	r24, r24
    31d0:	59 f0       	breq	.+22     	; 0x31e8 <LED_Init+0x28>
	{
		DIO_voidSetDir(PortA,Pin5,Output); /* Set pin 4A as an output pin */
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	65 e0       	ldi	r22, 0x05	; 5
    31d6:	41 e0       	ldi	r20, 0x01	; 1
    31d8:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
		DIO_voidWriteVal(PortA,Pin5,Zero_Volt); /* Set pin 5A to 0V */
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	65 e0       	ldi	r22, 0x05	; 5
    31e0:	40 e0       	ldi	r20, 0x00	; 0
    31e2:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
    31e6:	0a c0       	rjmp	.+20     	; 0x31fc <LED_Init+0x3c>
	}
	else
	{
		DIO_voidSetDir(PortA,Pin4,Output); /* Set pin 4A as an output pin */
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	64 e0       	ldi	r22, 0x04	; 4
    31ec:	41 e0       	ldi	r20, 0x01	; 1
    31ee:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
		DIO_voidWriteVal(PortA,Pin4,Zero_Volt); /* Set pin 4A to 0V */
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	64 e0       	ldi	r22, 0x04	; 4
    31f6:	40 e0       	ldi	r20, 0x00	; 0
    31f8:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
	}
}
    31fc:	0f 90       	pop	r0
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	08 95       	ret

00003204 <LED>:
void LED(u8 u8LedNumber, u8 u8State)
{
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	00 d0       	rcall	.+0      	; 0x320a <LED+0x6>
    320a:	cd b7       	in	r28, 0x3d	; 61
    320c:	de b7       	in	r29, 0x3e	; 62
    320e:	89 83       	std	Y+1, r24	; 0x01
    3210:	6a 83       	std	Y+2, r22	; 0x02
	if(u8LedNumber)
    3212:	89 81       	ldd	r24, Y+1	; 0x01
    3214:	88 23       	and	r24, r24
    3216:	31 f0       	breq	.+12     	; 0x3224 <LED+0x20>
		DIO_voidWriteVal(PortA,Pin5,u8State); /* Set pin 5A to StateV */
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	65 e0       	ldi	r22, 0x05	; 5
    321c:	4a 81       	ldd	r20, Y+2	; 0x02
    321e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
    3222:	05 c0       	rjmp	.+10     	; 0x322e <LED+0x2a>

	else
		DIO_voidWriteVal(PortA,Pin4,u8State); /* Set pin 4A to StateV */
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	64 e0       	ldi	r22, 0x04	; 4
    3228:	4a 81       	ldd	r20, Y+2	; 0x02
    322a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
}
    322e:	0f 90       	pop	r0
    3230:	0f 90       	pop	r0
    3232:	cf 91       	pop	r28
    3234:	df 91       	pop	r29
    3236:	08 95       	ret

00003238 <SS_Init>:
#include "DIO.h"
#include "Utils.h"
#include <avr/delay.h>

void SS_Init()
{
    3238:	df 93       	push	r29
    323a:	cf 93       	push	r28
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDir(PortB,Pin0,Output);
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	60 e0       	ldi	r22, 0x00	; 0
    3244:	41 e0       	ldi	r20, 0x01	; 1
    3246:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin1,Output);
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	61 e0       	ldi	r22, 0x01	; 1
    324e:	41 e0       	ldi	r20, 0x01	; 1
    3250:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin4,Output);
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	64 e0       	ldi	r22, 0x04	; 4
    3258:	41 e0       	ldi	r20, 0x01	; 1
    325a:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin5,Output);
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	65 e0       	ldi	r22, 0x05	; 5
    3262:	41 e0       	ldi	r20, 0x01	; 1
    3264:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin6,Output);
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	66 e0       	ldi	r22, 0x06	; 6
    326c:	41 e0       	ldi	r20, 0x01	; 1
    326e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
	DIO_voidSetDir(PortB,Pin7,Output);
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	67 e0       	ldi	r22, 0x07	; 7
    3276:	41 e0       	ldi	r20, 0x01	; 1
    3278:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_voidSetDir>
}
    327c:	cf 91       	pop	r28
    327e:	df 91       	pop	r29
    3280:	08 95       	ret

00003282 <SS_Write>:

void SS_Write(u8 u8Number, u8 u8channel)
{
    3282:	df 93       	push	r29
    3284:	cf 93       	push	r28
    3286:	00 d0       	rcall	.+0      	; 0x3288 <SS_Write+0x6>
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	89 83       	std	Y+1, r24	; 0x01
    328e:	6a 83       	std	Y+2, r22	; 0x02
	if(u8channel) /*1 for SS number 4(Most Sig)*/
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
    3292:	88 23       	and	r24, r24
    3294:	59 f0       	breq	.+22     	; 0x32ac <SS_Write+0x2a>
	{
		DIO_voidWriteVal(PortB,Pin4,Zero_Volt);
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	64 e0       	ldi	r22, 0x04	; 4
    329a:	40 e0       	ldi	r20, 0x00	; 0
    329c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortB,Pin5,Five_Volt);
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	65 e0       	ldi	r22, 0x05	; 5
    32a4:	41 e0       	ldi	r20, 0x01	; 1
    32a6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
    32aa:	0a c0       	rjmp	.+20     	; 0x32c0 <SS_Write+0x3e>
	}
	else /*0 for SS number 5(Lest Sig)*/
	{
		DIO_voidWriteVal(PortB,Pin4,Five_Volt);
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	64 e0       	ldi	r22, 0x04	; 4
    32b0:	41 e0       	ldi	r20, 0x01	; 1
    32b2:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
		DIO_voidWriteVal(PortB,Pin5,Zero_Volt);
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	65 e0       	ldi	r22, 0x05	; 5
    32ba:	40 e0       	ldi	r20, 0x00	; 0
    32bc:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
	}

	DIO_voidWriteVal(PortB,Pin0,Get_Bit(u8Number,0)); /*A*/
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	98 2f       	mov	r25, r24
    32c4:	91 70       	andi	r25, 0x01	; 1
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	60 e0       	ldi	r22, 0x00	; 0
    32ca:	49 2f       	mov	r20, r25
    32cc:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortB,Pin1,Get_Bit(u8Number,1)); /*B*/
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	88 2f       	mov	r24, r24
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	82 70       	andi	r24, 0x02	; 2
    32d8:	90 70       	andi	r25, 0x00	; 0
    32da:	95 95       	asr	r25
    32dc:	87 95       	ror	r24
    32de:	98 2f       	mov	r25, r24
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	61 e0       	ldi	r22, 0x01	; 1
    32e4:	49 2f       	mov	r20, r25
    32e6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortB,Pin6,Get_Bit(u8Number,2)); /*C*/
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	88 2f       	mov	r24, r24
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	84 70       	andi	r24, 0x04	; 4
    32f2:	90 70       	andi	r25, 0x00	; 0
    32f4:	95 95       	asr	r25
    32f6:	87 95       	ror	r24
    32f8:	95 95       	asr	r25
    32fa:	87 95       	ror	r24
    32fc:	98 2f       	mov	r25, r24
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	66 e0       	ldi	r22, 0x06	; 6
    3302:	49 2f       	mov	r20, r25
    3304:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>
	DIO_voidWriteVal(PortB,Pin7,Get_Bit(u8Number,3)); /*D*/
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	88 2f       	mov	r24, r24
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	88 70       	andi	r24, 0x08	; 8
    3310:	90 70       	andi	r25, 0x00	; 0
    3312:	95 95       	asr	r25
    3314:	87 95       	ror	r24
    3316:	95 95       	asr	r25
    3318:	87 95       	ror	r24
    331a:	95 95       	asr	r25
    331c:	87 95       	ror	r24
    331e:	98 2f       	mov	r25, r24
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	67 e0       	ldi	r22, 0x07	; 7
    3324:	49 2f       	mov	r20, r25
    3326:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_voidWriteVal>

}
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	cf 91       	pop	r28
    3330:	df 91       	pop	r29
    3332:	08 95       	ret

00003334 <main>:
#include "DIO.h"
#include "avr/delay.h"


int main()
{
    3334:	0f 93       	push	r16
    3336:	1f 93       	push	r17
    3338:	df 93       	push	r29
    333a:	cf 93       	push	r28
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
    3340:	cb 54       	subi	r28, 0x4B	; 75
    3342:	d0 40       	sbci	r29, 0x00	; 0
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	f8 94       	cli
    3348:	de bf       	out	0x3e, r29	; 62
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	cd bf       	out	0x3d, r28	; 61
	u32 Data_Reading;
	u32 Data_Voltage;
	u8 count,count2, Reading[4], Voltage[4];
	u8 Temp;
	ADC_voidInit();
    334e:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	LCD_Init();
    3352:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_Init>
	SS_Init();
    3356:	0e 94 1c 19 	call	0x3238	; 0x3238 <SS_Init>
	Buzzer_Init();
    335a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Buzzer_Init>
	LED_Init(0);
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <LED_Init>

	while(1)
	{
		Data_Reading = ADC_u32GetVal(0);
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u32GetVal>
    336a:	fe 01       	movw	r30, r28
    336c:	e0 5c       	subi	r30, 0xC0	; 192
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	cc 01       	movw	r24, r24
    3372:	a0 e0       	ldi	r26, 0x00	; 0
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	80 83       	st	Z, r24
    3378:	91 83       	std	Z+1, r25	; 0x01
    337a:	a2 83       	std	Z+2, r26	; 0x02
    337c:	b3 83       	std	Z+3, r27	; 0x03
		Data_Voltage=(Data_Reading*5*100)/1023;
    337e:	fe 01       	movw	r30, r28
    3380:	e0 5c       	subi	r30, 0xC0	; 192
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	80 81       	ld	r24, Z
    3386:	91 81       	ldd	r25, Z+1	; 0x01
    3388:	a2 81       	ldd	r26, Z+2	; 0x02
    338a:	b3 81       	ldd	r27, Z+3	; 0x03
    338c:	24 ef       	ldi	r18, 0xF4	; 244
    338e:	31 e0       	ldi	r19, 0x01	; 1
    3390:	40 e0       	ldi	r20, 0x00	; 0
    3392:	50 e0       	ldi	r21, 0x00	; 0
    3394:	bc 01       	movw	r22, r24
    3396:	cd 01       	movw	r24, r26
    3398:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__mulsi3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	2f ef       	ldi	r18, 0xFF	; 255
    33a2:	33 e0       	ldi	r19, 0x03	; 3
    33a4:	40 e0       	ldi	r20, 0x00	; 0
    33a6:	50 e0       	ldi	r21, 0x00	; 0
    33a8:	bc 01       	movw	r22, r24
    33aa:	cd 01       	movw	r24, r26
    33ac:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__udivmodsi4>
    33b0:	da 01       	movw	r26, r20
    33b2:	c9 01       	movw	r24, r18
    33b4:	8c af       	std	Y+60, r24	; 0x3c
    33b6:	9d af       	std	Y+61, r25	; 0x3d
    33b8:	ae af       	std	Y+62, r26	; 0x3e
    33ba:	bf af       	std	Y+63, r27	; 0x3f
		Temp=Data_Voltage/10; /*from 0 to 50*/
    33bc:	8c ad       	ldd	r24, Y+60	; 0x3c
    33be:	9d ad       	ldd	r25, Y+61	; 0x3d
    33c0:	ae ad       	ldd	r26, Y+62	; 0x3e
    33c2:	bf ad       	ldd	r27, Y+63	; 0x3f
    33c4:	2a e0       	ldi	r18, 0x0A	; 10
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	40 e0       	ldi	r20, 0x00	; 0
    33ca:	50 e0       	ldi	r21, 0x00	; 0
    33cc:	bc 01       	movw	r22, r24
    33ce:	cd 01       	movw	r24, r26
    33d0:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__udivmodsi4>
    33d4:	da 01       	movw	r26, r20
    33d6:	c9 01       	movw	r24, r18
    33d8:	89 af       	std	Y+57, r24	; 0x39

		for(count=4;count>0;count--)
    33da:	84 e0       	ldi	r24, 0x04	; 4
    33dc:	8b af       	std	Y+59, r24	; 0x3b
    33de:	3c c0       	rjmp	.+120    	; 0x3458 <main+0x124>
		{
			Reading[count-1]=Data_Reading%10 + 48;
    33e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    33e2:	88 2f       	mov	r24, r24
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	8c 01       	movw	r16, r24
    33e8:	01 50       	subi	r16, 0x01	; 1
    33ea:	10 40       	sbci	r17, 0x00	; 0
    33ec:	fe 01       	movw	r30, r28
    33ee:	e0 5c       	subi	r30, 0xC0	; 192
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	80 81       	ld	r24, Z
    33f4:	91 81       	ldd	r25, Z+1	; 0x01
    33f6:	a2 81       	ldd	r26, Z+2	; 0x02
    33f8:	b3 81       	ldd	r27, Z+3	; 0x03
    33fa:	2a e0       	ldi	r18, 0x0A	; 10
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e0       	ldi	r20, 0x00	; 0
    3400:	50 e0       	ldi	r21, 0x00	; 0
    3402:	bc 01       	movw	r22, r24
    3404:	cd 01       	movw	r24, r26
    3406:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__udivmodsi4>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	28 2f       	mov	r18, r24
    3410:	20 5d       	subi	r18, 0xD0	; 208
    3412:	ce 01       	movw	r24, r28
    3414:	8c 5b       	subi	r24, 0xBC	; 188
    3416:	9f 4f       	sbci	r25, 0xFF	; 255
    3418:	fc 01       	movw	r30, r24
    341a:	e0 0f       	add	r30, r16
    341c:	f1 1f       	adc	r31, r17
    341e:	20 83       	st	Z, r18
			Data_Reading/=10;
    3420:	8e 01       	movw	r16, r28
    3422:	00 5c       	subi	r16, 0xC0	; 192
    3424:	1f 4f       	sbci	r17, 0xFF	; 255
    3426:	fe 01       	movw	r30, r28
    3428:	e0 5c       	subi	r30, 0xC0	; 192
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	80 81       	ld	r24, Z
    342e:	91 81       	ldd	r25, Z+1	; 0x01
    3430:	a2 81       	ldd	r26, Z+2	; 0x02
    3432:	b3 81       	ldd	r27, Z+3	; 0x03
    3434:	2a e0       	ldi	r18, 0x0A	; 10
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e0       	ldi	r20, 0x00	; 0
    343a:	50 e0       	ldi	r21, 0x00	; 0
    343c:	bc 01       	movw	r22, r24
    343e:	cd 01       	movw	r24, r26
    3440:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__udivmodsi4>
    3444:	da 01       	movw	r26, r20
    3446:	c9 01       	movw	r24, r18
    3448:	f8 01       	movw	r30, r16
    344a:	80 83       	st	Z, r24
    344c:	91 83       	std	Z+1, r25	; 0x01
    344e:	a2 83       	std	Z+2, r26	; 0x02
    3450:	b3 83       	std	Z+3, r27	; 0x03
	{
		Data_Reading = ADC_u32GetVal(0);
		Data_Voltage=(Data_Reading*5*100)/1023;
		Temp=Data_Voltage/10; /*from 0 to 50*/

		for(count=4;count>0;count--)
    3452:	8b ad       	ldd	r24, Y+59	; 0x3b
    3454:	81 50       	subi	r24, 0x01	; 1
    3456:	8b af       	std	Y+59, r24	; 0x3b
    3458:	8b ad       	ldd	r24, Y+59	; 0x3b
    345a:	88 23       	and	r24, r24
    345c:	09 f6       	brne	.-126    	; 0x33e0 <main+0xac>
		{
			Reading[count-1]=Data_Reading%10 + 48;
			Data_Reading/=10;
		}

		for(count=3;count>0;count--)
    345e:	83 e0       	ldi	r24, 0x03	; 3
    3460:	8b af       	std	Y+59, r24	; 0x3b
    3462:	31 c0       	rjmp	.+98     	; 0x34c6 <main+0x192>
		{
			Voltage[count-1]=Data_Voltage%10;
    3464:	8b ad       	ldd	r24, Y+59	; 0x3b
    3466:	88 2f       	mov	r24, r24
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	8c 01       	movw	r16, r24
    346c:	01 50       	subi	r16, 0x01	; 1
    346e:	10 40       	sbci	r17, 0x00	; 0
    3470:	8c ad       	ldd	r24, Y+60	; 0x3c
    3472:	9d ad       	ldd	r25, Y+61	; 0x3d
    3474:	ae ad       	ldd	r26, Y+62	; 0x3e
    3476:	bf ad       	ldd	r27, Y+63	; 0x3f
    3478:	2a e0       	ldi	r18, 0x0A	; 10
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	40 e0       	ldi	r20, 0x00	; 0
    347e:	50 e0       	ldi	r21, 0x00	; 0
    3480:	bc 01       	movw	r22, r24
    3482:	cd 01       	movw	r24, r26
    3484:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__udivmodsi4>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	28 2f       	mov	r18, r24
    348e:	ce 01       	movw	r24, r28
    3490:	88 5b       	subi	r24, 0xB8	; 184
    3492:	9f 4f       	sbci	r25, 0xFF	; 255
    3494:	fc 01       	movw	r30, r24
    3496:	e0 0f       	add	r30, r16
    3498:	f1 1f       	adc	r31, r17
    349a:	20 83       	st	Z, r18
			Data_Voltage/=10;
    349c:	8c ad       	ldd	r24, Y+60	; 0x3c
    349e:	9d ad       	ldd	r25, Y+61	; 0x3d
    34a0:	ae ad       	ldd	r26, Y+62	; 0x3e
    34a2:	bf ad       	ldd	r27, Y+63	; 0x3f
    34a4:	2a e0       	ldi	r18, 0x0A	; 10
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	50 e0       	ldi	r21, 0x00	; 0
    34ac:	bc 01       	movw	r22, r24
    34ae:	cd 01       	movw	r24, r26
    34b0:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__udivmodsi4>
    34b4:	da 01       	movw	r26, r20
    34b6:	c9 01       	movw	r24, r18
    34b8:	8c af       	std	Y+60, r24	; 0x3c
    34ba:	9d af       	std	Y+61, r25	; 0x3d
    34bc:	ae af       	std	Y+62, r26	; 0x3e
    34be:	bf af       	std	Y+63, r27	; 0x3f
		{
			Reading[count-1]=Data_Reading%10 + 48;
			Data_Reading/=10;
		}

		for(count=3;count>0;count--)
    34c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    34c2:	81 50       	subi	r24, 0x01	; 1
    34c4:	8b af       	std	Y+59, r24	; 0x3b
    34c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    34c8:	88 23       	and	r24, r24
    34ca:	61 f6       	brne	.-104    	; 0x3464 <main+0x130>
		{
			Voltage[count-1]=Data_Voltage%10;
			Data_Voltage/=10;
		}

		for(count2=0;count2<50;count2++)
    34cc:	1a ae       	std	Y+58, r1	; 0x3a
    34ce:	f5 c0       	rjmp	.+490    	; 0x36ba <main+0x386>
		{
				SS_Write(Voltage[0],1);
    34d0:	fe 01       	movw	r30, r28
    34d2:	e8 5b       	subi	r30, 0xB8	; 184
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	80 81       	ld	r24, Z
    34d8:	61 e0       	ldi	r22, 0x01	; 1
    34da:	0e 94 41 19 	call	0x3282	; 0x3282 <SS_Write>
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	a0 e2       	ldi	r26, 0x20	; 32
    34e4:	b1 e4       	ldi	r27, 0x41	; 65
    34e6:	8d ab       	std	Y+53, r24	; 0x35
    34e8:	9e ab       	std	Y+54, r25	; 0x36
    34ea:	af ab       	std	Y+55, r26	; 0x37
    34ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ee:	6d a9       	ldd	r22, Y+53	; 0x35
    34f0:	7e a9       	ldd	r23, Y+54	; 0x36
    34f2:	8f a9       	ldd	r24, Y+55	; 0x37
    34f4:	98 ad       	ldd	r25, Y+56	; 0x38
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	4a e7       	ldi	r20, 0x7A	; 122
    34fc:	53 e4       	ldi	r21, 0x43	; 67
    34fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	89 ab       	std	Y+49, r24	; 0x31
    3508:	9a ab       	std	Y+50, r25	; 0x32
    350a:	ab ab       	std	Y+51, r26	; 0x33
    350c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    350e:	69 a9       	ldd	r22, Y+49	; 0x31
    3510:	7a a9       	ldd	r23, Y+50	; 0x32
    3512:	8b a9       	ldd	r24, Y+51	; 0x33
    3514:	9c a9       	ldd	r25, Y+52	; 0x34
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	40 e8       	ldi	r20, 0x80	; 128
    351c:	5f e3       	ldi	r21, 0x3F	; 63
    351e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3522:	88 23       	and	r24, r24
    3524:	2c f4       	brge	.+10     	; 0x3530 <main+0x1fc>
		__ticks = 1;
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	98 ab       	std	Y+48, r25	; 0x30
    352c:	8f a7       	std	Y+47, r24	; 0x2f
    352e:	3f c0       	rjmp	.+126    	; 0x35ae <main+0x27a>
	else if (__tmp > 65535)
    3530:	69 a9       	ldd	r22, Y+49	; 0x31
    3532:	7a a9       	ldd	r23, Y+50	; 0x32
    3534:	8b a9       	ldd	r24, Y+51	; 0x33
    3536:	9c a9       	ldd	r25, Y+52	; 0x34
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	3f ef       	ldi	r19, 0xFF	; 255
    353c:	4f e7       	ldi	r20, 0x7F	; 127
    353e:	57 e4       	ldi	r21, 0x47	; 71
    3540:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3544:	18 16       	cp	r1, r24
    3546:	4c f5       	brge	.+82     	; 0x359a <main+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3548:	6d a9       	ldd	r22, Y+53	; 0x35
    354a:	7e a9       	ldd	r23, Y+54	; 0x36
    354c:	8f a9       	ldd	r24, Y+55	; 0x37
    354e:	98 ad       	ldd	r25, Y+56	; 0x38
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e2       	ldi	r20, 0x20	; 32
    3556:	51 e4       	ldi	r21, 0x41	; 65
    3558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	bc 01       	movw	r22, r24
    3562:	cd 01       	movw	r24, r26
    3564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	98 ab       	std	Y+48, r25	; 0x30
    356e:	8f a7       	std	Y+47, r24	; 0x2f
    3570:	0f c0       	rjmp	.+30     	; 0x3590 <main+0x25c>
    3572:	89 e1       	ldi	r24, 0x19	; 25
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	9e a7       	std	Y+46, r25	; 0x2e
    3578:	8d a7       	std	Y+45, r24	; 0x2d
    357a:	8d a5       	ldd	r24, Y+45	; 0x2d
    357c:	9e a5       	ldd	r25, Y+46	; 0x2e
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	f1 f7       	brne	.-4      	; 0x357e <main+0x24a>
    3582:	9e a7       	std	Y+46, r25	; 0x2e
    3584:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3586:	8f a5       	ldd	r24, Y+47	; 0x2f
    3588:	98 a9       	ldd	r25, Y+48	; 0x30
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	98 ab       	std	Y+48, r25	; 0x30
    358e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3590:	8f a5       	ldd	r24, Y+47	; 0x2f
    3592:	98 a9       	ldd	r25, Y+48	; 0x30
    3594:	00 97       	sbiw	r24, 0x00	; 0
    3596:	69 f7       	brne	.-38     	; 0x3572 <main+0x23e>
    3598:	14 c0       	rjmp	.+40     	; 0x35c2 <main+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359a:	69 a9       	ldd	r22, Y+49	; 0x31
    359c:	7a a9       	ldd	r23, Y+50	; 0x32
    359e:	8b a9       	ldd	r24, Y+51	; 0x33
    35a0:	9c a9       	ldd	r25, Y+52	; 0x34
    35a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	98 ab       	std	Y+48, r25	; 0x30
    35ac:	8f a7       	std	Y+47, r24	; 0x2f
    35ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    35b0:	98 a9       	ldd	r25, Y+48	; 0x30
    35b2:	9c a7       	std	Y+44, r25	; 0x2c
    35b4:	8b a7       	std	Y+43, r24	; 0x2b
    35b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    35b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <main+0x286>
    35be:	9c a7       	std	Y+44, r25	; 0x2c
    35c0:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(10);
				SS_Write(Voltage[1],0);
    35c2:	fe 01       	movw	r30, r28
    35c4:	e8 5b       	subi	r30, 0xB8	; 184
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	81 81       	ldd	r24, Z+1	; 0x01
    35ca:	60 e0       	ldi	r22, 0x00	; 0
    35cc:	0e 94 41 19 	call	0x3282	; 0x3282 <SS_Write>
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	a0 e2       	ldi	r26, 0x20	; 32
    35d6:	b1 e4       	ldi	r27, 0x41	; 65
    35d8:	8f a3       	std	Y+39, r24	; 0x27
    35da:	98 a7       	std	Y+40, r25	; 0x28
    35dc:	a9 a7       	std	Y+41, r26	; 0x29
    35de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e0:	6f a1       	ldd	r22, Y+39	; 0x27
    35e2:	78 a5       	ldd	r23, Y+40	; 0x28
    35e4:	89 a5       	ldd	r24, Y+41	; 0x29
    35e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	4a e7       	ldi	r20, 0x7A	; 122
    35ee:	53 e4       	ldi	r21, 0x43	; 67
    35f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	8b a3       	std	Y+35, r24	; 0x23
    35fa:	9c a3       	std	Y+36, r25	; 0x24
    35fc:	ad a3       	std	Y+37, r26	; 0x25
    35fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3600:	6b a1       	ldd	r22, Y+35	; 0x23
    3602:	7c a1       	ldd	r23, Y+36	; 0x24
    3604:	8d a1       	ldd	r24, Y+37	; 0x25
    3606:	9e a1       	ldd	r25, Y+38	; 0x26
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	40 e8       	ldi	r20, 0x80	; 128
    360e:	5f e3       	ldi	r21, 0x3F	; 63
    3610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3614:	88 23       	and	r24, r24
    3616:	2c f4       	brge	.+10     	; 0x3622 <main+0x2ee>
		__ticks = 1;
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	9a a3       	std	Y+34, r25	; 0x22
    361e:	89 a3       	std	Y+33, r24	; 0x21
    3620:	3f c0       	rjmp	.+126    	; 0x36a0 <main+0x36c>
	else if (__tmp > 65535)
    3622:	6b a1       	ldd	r22, Y+35	; 0x23
    3624:	7c a1       	ldd	r23, Y+36	; 0x24
    3626:	8d a1       	ldd	r24, Y+37	; 0x25
    3628:	9e a1       	ldd	r25, Y+38	; 0x26
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	3f ef       	ldi	r19, 0xFF	; 255
    362e:	4f e7       	ldi	r20, 0x7F	; 127
    3630:	57 e4       	ldi	r21, 0x47	; 71
    3632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3636:	18 16       	cp	r1, r24
    3638:	4c f5       	brge	.+82     	; 0x368c <main+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363a:	6f a1       	ldd	r22, Y+39	; 0x27
    363c:	78 a5       	ldd	r23, Y+40	; 0x28
    363e:	89 a5       	ldd	r24, Y+41	; 0x29
    3640:	9a a5       	ldd	r25, Y+42	; 0x2a
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 e2       	ldi	r20, 0x20	; 32
    3648:	51 e4       	ldi	r21, 0x41	; 65
    364a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	bc 01       	movw	r22, r24
    3654:	cd 01       	movw	r24, r26
    3656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	9a a3       	std	Y+34, r25	; 0x22
    3660:	89 a3       	std	Y+33, r24	; 0x21
    3662:	0f c0       	rjmp	.+30     	; 0x3682 <main+0x34e>
    3664:	89 e1       	ldi	r24, 0x19	; 25
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	98 a3       	std	Y+32, r25	; 0x20
    366a:	8f 8f       	std	Y+31, r24	; 0x1f
    366c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    366e:	98 a1       	ldd	r25, Y+32	; 0x20
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	f1 f7       	brne	.-4      	; 0x3670 <main+0x33c>
    3674:	98 a3       	std	Y+32, r25	; 0x20
    3676:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3678:	89 a1       	ldd	r24, Y+33	; 0x21
    367a:	9a a1       	ldd	r25, Y+34	; 0x22
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	9a a3       	std	Y+34, r25	; 0x22
    3680:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3682:	89 a1       	ldd	r24, Y+33	; 0x21
    3684:	9a a1       	ldd	r25, Y+34	; 0x22
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	69 f7       	brne	.-38     	; 0x3664 <main+0x330>
    368a:	14 c0       	rjmp	.+40     	; 0x36b4 <main+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368c:	6b a1       	ldd	r22, Y+35	; 0x23
    368e:	7c a1       	ldd	r23, Y+36	; 0x24
    3690:	8d a1       	ldd	r24, Y+37	; 0x25
    3692:	9e a1       	ldd	r25, Y+38	; 0x26
    3694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	9a a3       	std	Y+34, r25	; 0x22
    369e:	89 a3       	std	Y+33, r24	; 0x21
    36a0:	89 a1       	ldd	r24, Y+33	; 0x21
    36a2:	9a a1       	ldd	r25, Y+34	; 0x22
    36a4:	9e 8f       	std	Y+30, r25	; 0x1e
    36a6:	8d 8f       	std	Y+29, r24	; 0x1d
    36a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	f1 f7       	brne	.-4      	; 0x36ac <main+0x378>
    36b0:	9e 8f       	std	Y+30, r25	; 0x1e
    36b2:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			Voltage[count-1]=Data_Voltage%10;
			Data_Voltage/=10;
		}

		for(count2=0;count2<50;count2++)
    36b4:	8a ad       	ldd	r24, Y+58	; 0x3a
    36b6:	8f 5f       	subi	r24, 0xFF	; 255
    36b8:	8a af       	std	Y+58, r24	; 0x3a
    36ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    36bc:	82 33       	cpi	r24, 0x32	; 50
    36be:	08 f4       	brcc	.+2      	; 0x36c2 <main+0x38e>
    36c0:	07 cf       	rjmp	.-498    	; 0x34d0 <main+0x19c>
				_delay_ms(10);
				SS_Write(Voltage[1],0);
				_delay_ms(10);
		}

	if(Temp>=27 && Temp<=31)
    36c2:	89 ad       	ldd	r24, Y+57	; 0x39
    36c4:	8b 31       	cpi	r24, 0x1B	; 27
    36c6:	f8 f0       	brcs	.+62     	; 0x3706 <main+0x3d2>
    36c8:	89 ad       	ldd	r24, Y+57	; 0x39
    36ca:	80 32       	cpi	r24, 0x20	; 32
    36cc:	e0 f4       	brcc	.+56     	; 0x3706 <main+0x3d2>
	{
		Buzzer(OFF);
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	0e 94 0a 07 	call	0xe14	; 0xe14 <Buzzer>
		LED(0,ON);
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	61 e0       	ldi	r22, 0x01	; 1
    36d8:	0e 94 02 19 	call	0x3204	; 0x3204 <LED>
		for(count=0;count<4;count++)
    36dc:	1b ae       	std	Y+59, r1	; 0x3b
    36de:	0f c0       	rjmp	.+30     	; 0x36fe <main+0x3ca>
			LCD_WriteData(Reading[count]);
    36e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    36e2:	28 2f       	mov	r18, r24
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	ce 01       	movw	r24, r28
    36e8:	8c 5b       	subi	r24, 0xBC	; 188
    36ea:	9f 4f       	sbci	r25, 0xFF	; 255
    36ec:	fc 01       	movw	r30, r24
    36ee:	e2 0f       	add	r30, r18
    36f0:	f3 1f       	adc	r31, r19
    36f2:	80 81       	ld	r24, Z
    36f4:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>

	if(Temp>=27 && Temp<=31)
	{
		Buzzer(OFF);
		LED(0,ON);
		for(count=0;count<4;count++)
    36f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    36fa:	8f 5f       	subi	r24, 0xFF	; 255
    36fc:	8b af       	std	Y+59, r24	; 0x3b
    36fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    3700:	84 30       	cpi	r24, 0x04	; 4
    3702:	70 f3       	brcs	.-36     	; 0x36e0 <main+0x3ac>
    3704:	c0 c0       	rjmp	.+384    	; 0x3886 <main+0x552>
			LCD_WriteData(Reading[count]);
	}
	else if (Temp>31 && Temp<=35)
    3706:	89 ad       	ldd	r24, Y+57	; 0x39
    3708:	80 32       	cpi	r24, 0x20	; 32
    370a:	08 f4       	brcc	.+2      	; 0x370e <main+0x3da>
    370c:	96 c0       	rjmp	.+300    	; 0x383a <main+0x506>
    370e:	89 ad       	ldd	r24, Y+57	; 0x39
    3710:	84 32       	cpi	r24, 0x24	; 36
    3712:	08 f0       	brcs	.+2      	; 0x3716 <main+0x3e2>
    3714:	92 c0       	rjmp	.+292    	; 0x383a <main+0x506>
		{
		Buzzer(OFF);
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	0e 94 0a 07 	call	0xe14	; 0xe14 <Buzzer>
		LED(0,ON);
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	61 e0       	ldi	r22, 0x01	; 1
    3720:	0e 94 02 19 	call	0x3204	; 0x3204 <LED>
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	aa e7       	ldi	r26, 0x7A	; 122
    372a:	b4 e4       	ldi	r27, 0x44	; 68
    372c:	89 8f       	std	Y+25, r24	; 0x19
    372e:	9a 8f       	std	Y+26, r25	; 0x1a
    3730:	ab 8f       	std	Y+27, r26	; 0x1b
    3732:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3734:	69 8d       	ldd	r22, Y+25	; 0x19
    3736:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3738:	8b 8d       	ldd	r24, Y+27	; 0x1b
    373a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	4a e7       	ldi	r20, 0x7A	; 122
    3742:	53 e4       	ldi	r21, 0x43	; 67
    3744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	8d 8b       	std	Y+21, r24	; 0x15
    374e:	9e 8b       	std	Y+22, r25	; 0x16
    3750:	af 8b       	std	Y+23, r26	; 0x17
    3752:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3754:	6d 89       	ldd	r22, Y+21	; 0x15
    3756:	7e 89       	ldd	r23, Y+22	; 0x16
    3758:	8f 89       	ldd	r24, Y+23	; 0x17
    375a:	98 8d       	ldd	r25, Y+24	; 0x18
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e8       	ldi	r20, 0x80	; 128
    3762:	5f e3       	ldi	r21, 0x3F	; 63
    3764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3768:	88 23       	and	r24, r24
    376a:	2c f4       	brge	.+10     	; 0x3776 <main+0x442>
		__ticks = 1;
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	9c 8b       	std	Y+20, r25	; 0x14
    3772:	8b 8b       	std	Y+19, r24	; 0x13
    3774:	3f c0       	rjmp	.+126    	; 0x37f4 <main+0x4c0>
	else if (__tmp > 65535)
    3776:	6d 89       	ldd	r22, Y+21	; 0x15
    3778:	7e 89       	ldd	r23, Y+22	; 0x16
    377a:	8f 89       	ldd	r24, Y+23	; 0x17
    377c:	98 8d       	ldd	r25, Y+24	; 0x18
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	3f ef       	ldi	r19, 0xFF	; 255
    3782:	4f e7       	ldi	r20, 0x7F	; 127
    3784:	57 e4       	ldi	r21, 0x47	; 71
    3786:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    378a:	18 16       	cp	r1, r24
    378c:	4c f5       	brge	.+82     	; 0x37e0 <main+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378e:	69 8d       	ldd	r22, Y+25	; 0x19
    3790:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3792:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3794:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	40 e2       	ldi	r20, 0x20	; 32
    379c:	51 e4       	ldi	r21, 0x41	; 65
    379e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	bc 01       	movw	r22, r24
    37a8:	cd 01       	movw	r24, r26
    37aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	9c 8b       	std	Y+20, r25	; 0x14
    37b4:	8b 8b       	std	Y+19, r24	; 0x13
    37b6:	0f c0       	rjmp	.+30     	; 0x37d6 <main+0x4a2>
    37b8:	89 e1       	ldi	r24, 0x19	; 25
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	9a 8b       	std	Y+18, r25	; 0x12
    37be:	89 8b       	std	Y+17, r24	; 0x11
    37c0:	89 89       	ldd	r24, Y+17	; 0x11
    37c2:	9a 89       	ldd	r25, Y+18	; 0x12
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <main+0x490>
    37c8:	9a 8b       	std	Y+18, r25	; 0x12
    37ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37cc:	8b 89       	ldd	r24, Y+19	; 0x13
    37ce:	9c 89       	ldd	r25, Y+20	; 0x14
    37d0:	01 97       	sbiw	r24, 0x01	; 1
    37d2:	9c 8b       	std	Y+20, r25	; 0x14
    37d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d6:	8b 89       	ldd	r24, Y+19	; 0x13
    37d8:	9c 89       	ldd	r25, Y+20	; 0x14
    37da:	00 97       	sbiw	r24, 0x00	; 0
    37dc:	69 f7       	brne	.-38     	; 0x37b8 <main+0x484>
    37de:	14 c0       	rjmp	.+40     	; 0x3808 <main+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e0:	6d 89       	ldd	r22, Y+21	; 0x15
    37e2:	7e 89       	ldd	r23, Y+22	; 0x16
    37e4:	8f 89       	ldd	r24, Y+23	; 0x17
    37e6:	98 8d       	ldd	r25, Y+24	; 0x18
    37e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	9c 8b       	std	Y+20, r25	; 0x14
    37f2:	8b 8b       	std	Y+19, r24	; 0x13
    37f4:	8b 89       	ldd	r24, Y+19	; 0x13
    37f6:	9c 89       	ldd	r25, Y+20	; 0x14
    37f8:	98 8b       	std	Y+16, r25	; 0x10
    37fa:	8f 87       	std	Y+15, r24	; 0x0f
    37fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    37fe:	98 89       	ldd	r25, Y+16	; 0x10
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	f1 f7       	brne	.-4      	; 0x3800 <main+0x4cc>
    3804:	98 8b       	std	Y+16, r25	; 0x10
    3806:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LED(0,OFF);
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	60 e0       	ldi	r22, 0x00	; 0
    380c:	0e 94 02 19 	call	0x3204	; 0x3204 <LED>
		for(count=0;count<4;count++)
    3810:	1b ae       	std	Y+59, r1	; 0x3b
    3812:	0f c0       	rjmp	.+30     	; 0x3832 <main+0x4fe>
			LCD_WriteData(Reading[count]);
    3814:	8b ad       	ldd	r24, Y+59	; 0x3b
    3816:	28 2f       	mov	r18, r24
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	ce 01       	movw	r24, r28
    381c:	8c 5b       	subi	r24, 0xBC	; 188
    381e:	9f 4f       	sbci	r25, 0xFF	; 255
    3820:	fc 01       	movw	r30, r24
    3822:	e2 0f       	add	r30, r18
    3824:	f3 1f       	adc	r31, r19
    3826:	80 81       	ld	r24, Z
    3828:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
		{
		Buzzer(OFF);
		LED(0,ON);
		_delay_ms(1000);
		LED(0,OFF);
		for(count=0;count<4;count++)
    382c:	8b ad       	ldd	r24, Y+59	; 0x3b
    382e:	8f 5f       	subi	r24, 0xFF	; 255
    3830:	8b af       	std	Y+59, r24	; 0x3b
    3832:	8b ad       	ldd	r24, Y+59	; 0x3b
    3834:	84 30       	cpi	r24, 0x04	; 4
    3836:	70 f3       	brcs	.-36     	; 0x3814 <main+0x4e0>
    3838:	26 c0       	rjmp	.+76     	; 0x3886 <main+0x552>
			LCD_WriteData(Reading[count]);
		}
		else if (Temp>35)
    383a:	89 ad       	ldd	r24, Y+57	; 0x39
    383c:	84 32       	cpi	r24, 0x24	; 36
    383e:	40 f0       	brcs	.+16     	; 0x3850 <main+0x51c>
		{
			Buzzer(ON);
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	0e 94 0a 07 	call	0xe14	; 0xe14 <Buzzer>
			LCD_WrtireString("DANGER!");
    3846:	80 e6       	ldi	r24, 0x60	; 96
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_WrtireString>
    384e:	1b c0       	rjmp	.+54     	; 0x3886 <main+0x552>
		}
		else
		{
			for(count=0;count<4;count++)
    3850:	1b ae       	std	Y+59, r1	; 0x3b
    3852:	0f c0       	rjmp	.+30     	; 0x3872 <main+0x53e>
				LCD_WriteData(Reading[count]);
    3854:	8b ad       	ldd	r24, Y+59	; 0x3b
    3856:	28 2f       	mov	r18, r24
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	ce 01       	movw	r24, r28
    385c:	8c 5b       	subi	r24, 0xBC	; 188
    385e:	9f 4f       	sbci	r25, 0xFF	; 255
    3860:	fc 01       	movw	r30, r24
    3862:	e2 0f       	add	r30, r18
    3864:	f3 1f       	adc	r31, r19
    3866:	80 81       	ld	r24, Z
    3868:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_WriteData>
			Buzzer(ON);
			LCD_WrtireString("DANGER!");
		}
		else
		{
			for(count=0;count<4;count++)
    386c:	8b ad       	ldd	r24, Y+59	; 0x3b
    386e:	8f 5f       	subi	r24, 0xFF	; 255
    3870:	8b af       	std	Y+59, r24	; 0x3b
    3872:	8b ad       	ldd	r24, Y+59	; 0x3b
    3874:	84 30       	cpi	r24, 0x04	; 4
    3876:	70 f3       	brcs	.-36     	; 0x3854 <main+0x520>
				LCD_WriteData(Reading[count]);
				LED(0,OFF);
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	60 e0       	ldi	r22, 0x00	; 0
    387c:	0e 94 02 19 	call	0x3204	; 0x3204 <LED>
				Buzzer(OFF);
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	0e 94 0a 07 	call	0xe14	; 0xe14 <Buzzer>
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	aa e7       	ldi	r26, 0x7A	; 122
    388c:	b4 e4       	ldi	r27, 0x44	; 68
    388e:	8b 87       	std	Y+11, r24	; 0x0b
    3890:	9c 87       	std	Y+12, r25	; 0x0c
    3892:	ad 87       	std	Y+13, r26	; 0x0d
    3894:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3896:	6b 85       	ldd	r22, Y+11	; 0x0b
    3898:	7c 85       	ldd	r23, Y+12	; 0x0c
    389a:	8d 85       	ldd	r24, Y+13	; 0x0d
    389c:	9e 85       	ldd	r25, Y+14	; 0x0e
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	4a e7       	ldi	r20, 0x7A	; 122
    38a4:	53 e4       	ldi	r21, 0x43	; 67
    38a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	8f 83       	std	Y+7, r24	; 0x07
    38b0:	98 87       	std	Y+8, r25	; 0x08
    38b2:	a9 87       	std	Y+9, r26	; 0x09
    38b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38b6:	6f 81       	ldd	r22, Y+7	; 0x07
    38b8:	78 85       	ldd	r23, Y+8	; 0x08
    38ba:	89 85       	ldd	r24, Y+9	; 0x09
    38bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	40 e8       	ldi	r20, 0x80	; 128
    38c4:	5f e3       	ldi	r21, 0x3F	; 63
    38c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ca:	88 23       	and	r24, r24
    38cc:	2c f4       	brge	.+10     	; 0x38d8 <main+0x5a4>
		__ticks = 1;
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	9e 83       	std	Y+6, r25	; 0x06
    38d4:	8d 83       	std	Y+5, r24	; 0x05
    38d6:	3f c0       	rjmp	.+126    	; 0x3956 <main+0x622>
	else if (__tmp > 65535)
    38d8:	6f 81       	ldd	r22, Y+7	; 0x07
    38da:	78 85       	ldd	r23, Y+8	; 0x08
    38dc:	89 85       	ldd	r24, Y+9	; 0x09
    38de:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	3f ef       	ldi	r19, 0xFF	; 255
    38e4:	4f e7       	ldi	r20, 0x7F	; 127
    38e6:	57 e4       	ldi	r21, 0x47	; 71
    38e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ec:	18 16       	cp	r1, r24
    38ee:	4c f5       	brge	.+82     	; 0x3942 <main+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	40 e2       	ldi	r20, 0x20	; 32
    38fe:	51 e4       	ldi	r21, 0x41	; 65
    3900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3904:	dc 01       	movw	r26, r24
    3906:	cb 01       	movw	r24, r22
    3908:	bc 01       	movw	r22, r24
    390a:	cd 01       	movw	r24, r26
    390c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	9e 83       	std	Y+6, r25	; 0x06
    3916:	8d 83       	std	Y+5, r24	; 0x05
    3918:	0f c0       	rjmp	.+30     	; 0x3938 <main+0x604>
    391a:	89 e1       	ldi	r24, 0x19	; 25
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	9c 83       	std	Y+4, r25	; 0x04
    3920:	8b 83       	std	Y+3, r24	; 0x03
    3922:	8b 81       	ldd	r24, Y+3	; 0x03
    3924:	9c 81       	ldd	r25, Y+4	; 0x04
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	f1 f7       	brne	.-4      	; 0x3926 <main+0x5f2>
    392a:	9c 83       	std	Y+4, r25	; 0x04
    392c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    392e:	8d 81       	ldd	r24, Y+5	; 0x05
    3930:	9e 81       	ldd	r25, Y+6	; 0x06
    3932:	01 97       	sbiw	r24, 0x01	; 1
    3934:	9e 83       	std	Y+6, r25	; 0x06
    3936:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3938:	8d 81       	ldd	r24, Y+5	; 0x05
    393a:	9e 81       	ldd	r25, Y+6	; 0x06
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	69 f7       	brne	.-38     	; 0x391a <main+0x5e6>
    3940:	14 c0       	rjmp	.+40     	; 0x396a <main+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3942:	6f 81       	ldd	r22, Y+7	; 0x07
    3944:	78 85       	ldd	r23, Y+8	; 0x08
    3946:	89 85       	ldd	r24, Y+9	; 0x09
    3948:	9a 85       	ldd	r25, Y+10	; 0x0a
    394a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	9e 83       	std	Y+6, r25	; 0x06
    3954:	8d 83       	std	Y+5, r24	; 0x05
    3956:	8d 81       	ldd	r24, Y+5	; 0x05
    3958:	9e 81       	ldd	r25, Y+6	; 0x06
    395a:	9a 83       	std	Y+2, r25	; 0x02
    395c:	89 83       	std	Y+1, r24	; 0x01
    395e:	89 81       	ldd	r24, Y+1	; 0x01
    3960:	9a 81       	ldd	r25, Y+2	; 0x02
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	f1 f7       	brne	.-4      	; 0x3962 <main+0x62e>
    3966:	9a 83       	std	Y+2, r25	; 0x02
    3968:	89 83       	std	Y+1, r24	; 0x01
		}

	_delay_ms(1000);
	LCD_CLear();
    396a:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LCD_CLear>
    396e:	fa cc       	rjmp	.-1548   	; 0x3364 <main+0x30>

00003970 <__mulsi3>:
    3970:	62 9f       	mul	r22, r18
    3972:	d0 01       	movw	r26, r0
    3974:	73 9f       	mul	r23, r19
    3976:	f0 01       	movw	r30, r0
    3978:	82 9f       	mul	r24, r18
    397a:	e0 0d       	add	r30, r0
    397c:	f1 1d       	adc	r31, r1
    397e:	64 9f       	mul	r22, r20
    3980:	e0 0d       	add	r30, r0
    3982:	f1 1d       	adc	r31, r1
    3984:	92 9f       	mul	r25, r18
    3986:	f0 0d       	add	r31, r0
    3988:	83 9f       	mul	r24, r19
    398a:	f0 0d       	add	r31, r0
    398c:	74 9f       	mul	r23, r20
    398e:	f0 0d       	add	r31, r0
    3990:	65 9f       	mul	r22, r21
    3992:	f0 0d       	add	r31, r0
    3994:	99 27       	eor	r25, r25
    3996:	72 9f       	mul	r23, r18
    3998:	b0 0d       	add	r27, r0
    399a:	e1 1d       	adc	r30, r1
    399c:	f9 1f       	adc	r31, r25
    399e:	63 9f       	mul	r22, r19
    39a0:	b0 0d       	add	r27, r0
    39a2:	e1 1d       	adc	r30, r1
    39a4:	f9 1f       	adc	r31, r25
    39a6:	bd 01       	movw	r22, r26
    39a8:	cf 01       	movw	r24, r30
    39aa:	11 24       	eor	r1, r1
    39ac:	08 95       	ret

000039ae <__udivmodsi4>:
    39ae:	a1 e2       	ldi	r26, 0x21	; 33
    39b0:	1a 2e       	mov	r1, r26
    39b2:	aa 1b       	sub	r26, r26
    39b4:	bb 1b       	sub	r27, r27
    39b6:	fd 01       	movw	r30, r26
    39b8:	0d c0       	rjmp	.+26     	; 0x39d4 <__udivmodsi4_ep>

000039ba <__udivmodsi4_loop>:
    39ba:	aa 1f       	adc	r26, r26
    39bc:	bb 1f       	adc	r27, r27
    39be:	ee 1f       	adc	r30, r30
    39c0:	ff 1f       	adc	r31, r31
    39c2:	a2 17       	cp	r26, r18
    39c4:	b3 07       	cpc	r27, r19
    39c6:	e4 07       	cpc	r30, r20
    39c8:	f5 07       	cpc	r31, r21
    39ca:	20 f0       	brcs	.+8      	; 0x39d4 <__udivmodsi4_ep>
    39cc:	a2 1b       	sub	r26, r18
    39ce:	b3 0b       	sbc	r27, r19
    39d0:	e4 0b       	sbc	r30, r20
    39d2:	f5 0b       	sbc	r31, r21

000039d4 <__udivmodsi4_ep>:
    39d4:	66 1f       	adc	r22, r22
    39d6:	77 1f       	adc	r23, r23
    39d8:	88 1f       	adc	r24, r24
    39da:	99 1f       	adc	r25, r25
    39dc:	1a 94       	dec	r1
    39de:	69 f7       	brne	.-38     	; 0x39ba <__udivmodsi4_loop>
    39e0:	60 95       	com	r22
    39e2:	70 95       	com	r23
    39e4:	80 95       	com	r24
    39e6:	90 95       	com	r25
    39e8:	9b 01       	movw	r18, r22
    39ea:	ac 01       	movw	r20, r24
    39ec:	bd 01       	movw	r22, r26
    39ee:	cf 01       	movw	r24, r30
    39f0:	08 95       	ret

000039f2 <__prologue_saves__>:
    39f2:	2f 92       	push	r2
    39f4:	3f 92       	push	r3
    39f6:	4f 92       	push	r4
    39f8:	5f 92       	push	r5
    39fa:	6f 92       	push	r6
    39fc:	7f 92       	push	r7
    39fe:	8f 92       	push	r8
    3a00:	9f 92       	push	r9
    3a02:	af 92       	push	r10
    3a04:	bf 92       	push	r11
    3a06:	cf 92       	push	r12
    3a08:	df 92       	push	r13
    3a0a:	ef 92       	push	r14
    3a0c:	ff 92       	push	r15
    3a0e:	0f 93       	push	r16
    3a10:	1f 93       	push	r17
    3a12:	cf 93       	push	r28
    3a14:	df 93       	push	r29
    3a16:	cd b7       	in	r28, 0x3d	; 61
    3a18:	de b7       	in	r29, 0x3e	; 62
    3a1a:	ca 1b       	sub	r28, r26
    3a1c:	db 0b       	sbc	r29, r27
    3a1e:	0f b6       	in	r0, 0x3f	; 63
    3a20:	f8 94       	cli
    3a22:	de bf       	out	0x3e, r29	; 62
    3a24:	0f be       	out	0x3f, r0	; 63
    3a26:	cd bf       	out	0x3d, r28	; 61
    3a28:	09 94       	ijmp

00003a2a <__epilogue_restores__>:
    3a2a:	2a 88       	ldd	r2, Y+18	; 0x12
    3a2c:	39 88       	ldd	r3, Y+17	; 0x11
    3a2e:	48 88       	ldd	r4, Y+16	; 0x10
    3a30:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a32:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a34:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a36:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a38:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a3a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a3c:	b9 84       	ldd	r11, Y+9	; 0x09
    3a3e:	c8 84       	ldd	r12, Y+8	; 0x08
    3a40:	df 80       	ldd	r13, Y+7	; 0x07
    3a42:	ee 80       	ldd	r14, Y+6	; 0x06
    3a44:	fd 80       	ldd	r15, Y+5	; 0x05
    3a46:	0c 81       	ldd	r16, Y+4	; 0x04
    3a48:	1b 81       	ldd	r17, Y+3	; 0x03
    3a4a:	aa 81       	ldd	r26, Y+2	; 0x02
    3a4c:	b9 81       	ldd	r27, Y+1	; 0x01
    3a4e:	ce 0f       	add	r28, r30
    3a50:	d1 1d       	adc	r29, r1
    3a52:	0f b6       	in	r0, 0x3f	; 63
    3a54:	f8 94       	cli
    3a56:	de bf       	out	0x3e, r29	; 62
    3a58:	0f be       	out	0x3f, r0	; 63
    3a5a:	cd bf       	out	0x3d, r28	; 61
    3a5c:	ed 01       	movw	r28, r26
    3a5e:	08 95       	ret

00003a60 <_exit>:
    3a60:	f8 94       	cli

00003a62 <__stop_program>:
    3a62:	ff cf       	rjmp	.-2      	; 0x3a62 <__stop_program>
